
stm-usb-touchscreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007478  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800763c  0800763c  0000863c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076ac  080076ac  000092c4  2**0
                  CONTENTS
  4 .ARM          00000008  080076ac  080076ac  000086ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076b4  080076b4  000092c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076b4  080076b4  000086b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076b8  080076b8  000086b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  080076bc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a24  200002c4  08007980  000092c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ce8  08007980  00009ce8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000092c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ded8  00000000  00000000  000092f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002be3  00000000  00000000  000171cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  00019db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008bf  00000000  00000000  0001a988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023546  00000000  00000000  0001b247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010acc  00000000  00000000  0003e78d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9cdc  00000000  00000000  0004f259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118f35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f08  00000000  00000000  00118f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0011be80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200002c4 	.word	0x200002c4
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007624 	.word	0x08007624

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200002c8 	.word	0x200002c8
 8000200:	08007624 	.word	0x08007624

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 f9af 	bl	800085c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f82f 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f899 	bl	8000638 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000506:	f006 fb81 	bl	8006c0c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  int user_button_pressed = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
  touchscreen_init();
 800050e:	f006 fac7 	bl	8006aa0 <touchscreen_init>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  			if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8000512:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000516:	4810      	ldr	r0, [pc, #64]	@ (8000558 <main+0x64>)
 8000518:	f000 fcdc 	bl	8000ed4 <HAL_GPIO_ReadPin>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d002      	beq.n	8000528 <main+0x34>
  			{
  				user_button_pressed = 1;
 8000522:	2301      	movs	r3, #1
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	e7f4      	b.n	8000512 <main+0x1e>
  			}
  			else if (user_button_pressed)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d0f1      	beq.n	8000512 <main+0x1e>
  			{
  				HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 800052e:	2201      	movs	r2, #1
 8000530:	2101      	movs	r1, #1
 8000532:	480a      	ldr	r0, [pc, #40]	@ (800055c <main+0x68>)
 8000534:	f000 fce6 	bl	8000f04 <HAL_GPIO_WritePin>
  				HAL_Delay(250);
 8000538:	20fa      	movs	r0, #250	@ 0xfa
 800053a:	f000 fa01 	bl	8000940 <HAL_Delay>
  				HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	2101      	movs	r1, #1
 8000542:	4806      	ldr	r0, [pc, #24]	@ (800055c <main+0x68>)
 8000544:	f000 fcde 	bl	8000f04 <HAL_GPIO_WritePin>
  				user_button_pressed = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
//  				touchscreen_send(0);
//  				HAL_Delay(100);
//  				touchscreen_remove_contact(0);
//  				touchscreen_remove_contact(1);
//  				touchscreen_send(0);
  			  touchscreen_test();
 800054c:	f006 fad4 	bl	8006af8 <touchscreen_test>
  				HAL_Delay(250);
 8000550:	20fa      	movs	r0, #250	@ 0xfa
 8000552:	f000 f9f5 	bl	8000940 <HAL_Delay>
  			if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8000556:	e7dc      	b.n	8000512 <main+0x1e>
 8000558:	40020800 	.word	0x40020800
 800055c:	40020400 	.word	0x40020400

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	@ 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	2234      	movs	r2, #52	@ 0x34
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f007 f82c 	bl	80075cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4b29      	ldr	r3, [pc, #164]	@ (8000630 <SystemClock_Config+0xd0>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058c:	4a28      	ldr	r2, [pc, #160]	@ (8000630 <SystemClock_Config+0xd0>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	@ 0x40
 8000594:	4b26      	ldr	r3, [pc, #152]	@ (8000630 <SystemClock_Config+0xd0>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2300      	movs	r3, #0
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	4b23      	ldr	r3, [pc, #140]	@ (8000634 <SystemClock_Config+0xd4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a22      	ldr	r2, [pc, #136]	@ (8000634 <SystemClock_Config+0xd4>)
 80005aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b20      	ldr	r3, [pc, #128]	@ (8000634 <SystemClock_Config+0xd4>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005b8:	603b      	str	r3, [r7, #0]
 80005ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005bc:	2301      	movs	r3, #1
 80005be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d0:	2304      	movs	r3, #4
 80005d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005d4:	23a8      	movs	r3, #168	@ 0xa8
 80005d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d8:	2302      	movs	r3, #2
 80005da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005dc:	2307      	movs	r3, #7
 80005de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 031c 	add.w	r3, r7, #28
 80005e8:	4618      	mov	r0, r3
 80005ea:	f002 fd75 	bl	80030d8 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005f4:	f000 f88e 	bl	8000714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000604:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000608:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800060e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	2105      	movs	r1, #5
 8000616:	4618      	mov	r0, r3
 8000618:	f001 ff12 	bl	8002440 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000622:	f000 f877 	bl	8000714 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	@ 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	@ 0x28
 800063c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
 8000652:	4b2d      	ldr	r3, [pc, #180]	@ (8000708 <MX_GPIO_Init+0xd0>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	4a2c      	ldr	r2, [pc, #176]	@ (8000708 <MX_GPIO_Init+0xd0>)
 8000658:	f043 0304 	orr.w	r3, r3, #4
 800065c:	6313      	str	r3, [r2, #48]	@ 0x30
 800065e:	4b2a      	ldr	r3, [pc, #168]	@ (8000708 <MX_GPIO_Init+0xd0>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	f003 0304 	and.w	r3, r3, #4
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <MX_GPIO_Init+0xd0>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	4a25      	ldr	r2, [pc, #148]	@ (8000708 <MX_GPIO_Init+0xd0>)
 8000674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000678:	6313      	str	r3, [r2, #48]	@ 0x30
 800067a:	4b23      	ldr	r3, [pc, #140]	@ (8000708 <MX_GPIO_Init+0xd0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	4b1f      	ldr	r3, [pc, #124]	@ (8000708 <MX_GPIO_Init+0xd0>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	4a1e      	ldr	r2, [pc, #120]	@ (8000708 <MX_GPIO_Init+0xd0>)
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	6313      	str	r3, [r2, #48]	@ 0x30
 8000696:	4b1c      	ldr	r3, [pc, #112]	@ (8000708 <MX_GPIO_Init+0xd0>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	f003 0302 	and.w	r3, r3, #2
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	4b18      	ldr	r3, [pc, #96]	@ (8000708 <MX_GPIO_Init+0xd0>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	4a17      	ldr	r2, [pc, #92]	@ (8000708 <MX_GPIO_Init+0xd0>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b2:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <MX_GPIO_Init+0xd0>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2101      	movs	r1, #1
 80006c2:	4812      	ldr	r0, [pc, #72]	@ (800070c <MX_GPIO_Init+0xd4>)
 80006c4:	f000 fc1e 	bl	8000f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80006c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4619      	mov	r1, r3
 80006de:	480c      	ldr	r0, [pc, #48]	@ (8000710 <MX_GPIO_Init+0xd8>)
 80006e0:	f000 fa64 	bl	8000bac <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 80006e4:	2301      	movs	r3, #1
 80006e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	2301      	movs	r3, #1
 80006ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	4619      	mov	r1, r3
 80006fa:	4804      	ldr	r0, [pc, #16]	@ (800070c <MX_GPIO_Init+0xd4>)
 80006fc:	f000 fa56 	bl	8000bac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000700:	bf00      	nop
 8000702:	3728      	adds	r7, #40	@ 0x28
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40023800 	.word	0x40023800
 800070c:	40020400 	.word	0x40020400
 8000710:	40020800 	.word	0x40020800

08000714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000718:	b672      	cpsid	i
}
 800071a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <Error_Handler+0x8>

08000720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b10      	ldr	r3, [pc, #64]	@ (800076c <HAL_MspInit+0x4c>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800072e:	4a0f      	ldr	r2, [pc, #60]	@ (800076c <HAL_MspInit+0x4c>)
 8000730:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000734:	6453      	str	r3, [r2, #68]	@ 0x44
 8000736:	4b0d      	ldr	r3, [pc, #52]	@ (800076c <HAL_MspInit+0x4c>)
 8000738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800073a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	4b09      	ldr	r3, [pc, #36]	@ (800076c <HAL_MspInit+0x4c>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074a:	4a08      	ldr	r2, [pc, #32]	@ (800076c <HAL_MspInit+0x4c>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000750:	6413      	str	r3, [r2, #64]	@ 0x40
 8000752:	4b06      	ldr	r3, [pc, #24]	@ (800076c <HAL_MspInit+0x4c>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <NMI_Handler+0x4>

08000778 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <HardFault_Handler+0x4>

08000780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <MemManage_Handler+0x4>

08000788 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <BusFault_Handler+0x4>

08000790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <UsageFault_Handler+0x4>

08000798 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c6:	f000 f89b 	bl	8000900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007d4:	4802      	ldr	r0, [pc, #8]	@ (80007e0 <OTG_FS_IRQHandler+0x10>)
 80007d6:	f000 fcf9 	bl	80011cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200007e8 	.word	0x200007e8

080007e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <SystemInit+0x20>)
 80007ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ee:	4a05      	ldr	r2, [pc, #20]	@ (8000804 <SystemInit+0x20>)
 80007f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000808:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000840 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800080c:	f7ff ffea 	bl	80007e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000810:	480c      	ldr	r0, [pc, #48]	@ (8000844 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000812:	490d      	ldr	r1, [pc, #52]	@ (8000848 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000814:	4a0d      	ldr	r2, [pc, #52]	@ (800084c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000818:	e002      	b.n	8000820 <LoopCopyDataInit>

0800081a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800081c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081e:	3304      	adds	r3, #4

08000820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000824:	d3f9      	bcc.n	800081a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000826:	4a0a      	ldr	r2, [pc, #40]	@ (8000850 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000828:	4c0a      	ldr	r4, [pc, #40]	@ (8000854 <LoopFillZerobss+0x22>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800082c:	e001      	b.n	8000832 <LoopFillZerobss>

0800082e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000830:	3204      	adds	r2, #4

08000832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000834:	d3fb      	bcc.n	800082e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000836:	f006 fed1 	bl	80075dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800083a:	f7ff fe5b 	bl	80004f4 <main>
  bx  lr    
 800083e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000840:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000848:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 800084c:	080076bc 	.word	0x080076bc
  ldr r2, =_sbss
 8000850:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8000854:	20000ce8 	.word	0x20000ce8

08000858 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000858:	e7fe      	b.n	8000858 <ADC_IRQHandler>
	...

0800085c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000860:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <HAL_Init+0x40>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a0d      	ldr	r2, [pc, #52]	@ (800089c <HAL_Init+0x40>)
 8000866:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800086a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800086c:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <HAL_Init+0x40>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a0a      	ldr	r2, [pc, #40]	@ (800089c <HAL_Init+0x40>)
 8000872:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000876:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000878:	4b08      	ldr	r3, [pc, #32]	@ (800089c <HAL_Init+0x40>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a07      	ldr	r2, [pc, #28]	@ (800089c <HAL_Init+0x40>)
 800087e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000882:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000884:	2003      	movs	r0, #3
 8000886:	f000 f94f 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800088a:	2000      	movs	r0, #0
 800088c:	f000 f808 	bl	80008a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000890:	f7ff ff46 	bl	8000720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023c00 	.word	0x40023c00

080008a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <HAL_InitTick+0x54>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <HAL_InitTick+0x58>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4619      	mov	r1, r3
 80008b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 f967 	bl	8000b92 <HAL_SYSTICK_Config>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e00e      	b.n	80008ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b0f      	cmp	r3, #15
 80008d2:	d80a      	bhi.n	80008ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d4:	2200      	movs	r2, #0
 80008d6:	6879      	ldr	r1, [r7, #4]
 80008d8:	f04f 30ff 	mov.w	r0, #4294967295
 80008dc:	f000 f92f 	bl	8000b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e0:	4a06      	ldr	r2, [pc, #24]	@ (80008fc <HAL_InitTick+0x5c>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008e6:	2300      	movs	r3, #0
 80008e8:	e000      	b.n	80008ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000000 	.word	0x20000000
 80008f8:	20000008 	.word	0x20000008
 80008fc:	20000004 	.word	0x20000004

08000900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <HAL_IncTick+0x20>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	461a      	mov	r2, r3
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_IncTick+0x24>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4413      	add	r3, r2
 8000910:	4a04      	ldr	r2, [pc, #16]	@ (8000924 <HAL_IncTick+0x24>)
 8000912:	6013      	str	r3, [r2, #0]
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000008 	.word	0x20000008
 8000924:	200002e0 	.word	0x200002e0

08000928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  return uwTick;
 800092c:	4b03      	ldr	r3, [pc, #12]	@ (800093c <HAL_GetTick+0x14>)
 800092e:	681b      	ldr	r3, [r3, #0]
}
 8000930:	4618      	mov	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	200002e0 	.word	0x200002e0

08000940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000948:	f7ff ffee 	bl	8000928 <HAL_GetTick>
 800094c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000958:	d005      	beq.n	8000966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800095a:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <HAL_Delay+0x44>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	461a      	mov	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	4413      	add	r3, r2
 8000964:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000966:	bf00      	nop
 8000968:	f7ff ffde 	bl	8000928 <HAL_GetTick>
 800096c:	4602      	mov	r2, r0
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	429a      	cmp	r2, r3
 8000976:	d8f7      	bhi.n	8000968 <HAL_Delay+0x28>
  {
  }
}
 8000978:	bf00      	nop
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000008 	.word	0x20000008

08000988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000998:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <__NVIC_SetPriorityGrouping+0x44>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009a4:	4013      	ands	r3, r2
 80009a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ba:	4a04      	ldr	r2, [pc, #16]	@ (80009cc <__NVIC_SetPriorityGrouping+0x44>)
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	60d3      	str	r3, [r2, #12]
}
 80009c0:	bf00      	nop
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d4:	4b04      	ldr	r3, [pc, #16]	@ (80009e8 <__NVIC_GetPriorityGrouping+0x18>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	0a1b      	lsrs	r3, r3, #8
 80009da:	f003 0307 	and.w	r3, r3, #7
}
 80009de:	4618      	mov	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	db0b      	blt.n	8000a16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	f003 021f 	and.w	r2, r3, #31
 8000a04:	4907      	ldr	r1, [pc, #28]	@ (8000a24 <__NVIC_EnableIRQ+0x38>)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	095b      	lsrs	r3, r3, #5
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000e100 	.word	0xe000e100

08000a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	db0a      	blt.n	8000a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	490c      	ldr	r1, [pc, #48]	@ (8000a74 <__NVIC_SetPriority+0x4c>)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	0112      	lsls	r2, r2, #4
 8000a48:	b2d2      	uxtb	r2, r2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a50:	e00a      	b.n	8000a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	4908      	ldr	r1, [pc, #32]	@ (8000a78 <__NVIC_SetPriority+0x50>)
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	f003 030f 	and.w	r3, r3, #15
 8000a5e:	3b04      	subs	r3, #4
 8000a60:	0112      	lsls	r2, r2, #4
 8000a62:	b2d2      	uxtb	r2, r2
 8000a64:	440b      	add	r3, r1
 8000a66:	761a      	strb	r2, [r3, #24]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000e100 	.word	0xe000e100
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b089      	sub	sp, #36	@ 0x24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	f1c3 0307 	rsb	r3, r3, #7
 8000a96:	2b04      	cmp	r3, #4
 8000a98:	bf28      	it	cs
 8000a9a:	2304      	movcs	r3, #4
 8000a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	2b06      	cmp	r3, #6
 8000aa4:	d902      	bls.n	8000aac <NVIC_EncodePriority+0x30>
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3b03      	subs	r3, #3
 8000aaa:	e000      	b.n	8000aae <NVIC_EncodePriority+0x32>
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43da      	mvns	r2, r3
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	401a      	ands	r2, r3
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ace:	43d9      	mvns	r1, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	4313      	orrs	r3, r2
         );
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3724      	adds	r7, #36	@ 0x24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000af4:	d301      	bcc.n	8000afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af6:	2301      	movs	r3, #1
 8000af8:	e00f      	b.n	8000b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afa:	4a0a      	ldr	r2, [pc, #40]	@ (8000b24 <SysTick_Config+0x40>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b02:	210f      	movs	r1, #15
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295
 8000b08:	f7ff ff8e 	bl	8000a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b0c:	4b05      	ldr	r3, [pc, #20]	@ (8000b24 <SysTick_Config+0x40>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b12:	4b04      	ldr	r3, [pc, #16]	@ (8000b24 <SysTick_Config+0x40>)
 8000b14:	2207      	movs	r2, #7
 8000b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	e000e010 	.word	0xe000e010

08000b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff29 	bl	8000988 <__NVIC_SetPriorityGrouping>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b086      	sub	sp, #24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
 8000b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b50:	f7ff ff3e 	bl	80009d0 <__NVIC_GetPriorityGrouping>
 8000b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	6978      	ldr	r0, [r7, #20]
 8000b5c:	f7ff ff8e 	bl	8000a7c <NVIC_EncodePriority>
 8000b60:	4602      	mov	r2, r0
 8000b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff5d 	bl	8000a28 <__NVIC_SetPriority>
}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff31 	bl	80009ec <__NVIC_EnableIRQ>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ffa2 	bl	8000ae4 <SysTick_Config>
 8000ba0:	4603      	mov	r3, r0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b089      	sub	sp, #36	@ 0x24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
 8000bc6:	e165      	b.n	8000e94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bc8:	2201      	movs	r2, #1
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	697a      	ldr	r2, [r7, #20]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	f040 8154 	bne.w	8000e8e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f003 0303 	and.w	r3, r3, #3
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d005      	beq.n	8000bfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d130      	bne.n	8000c60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	2203      	movs	r2, #3
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	4013      	ands	r3, r2
 8000c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	68da      	ldr	r2, [r3, #12]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c34:	2201      	movs	r2, #1
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	091b      	lsrs	r3, r3, #4
 8000c4a:	f003 0201 	and.w	r2, r3, #1
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f003 0303 	and.w	r3, r3, #3
 8000c68:	2b03      	cmp	r3, #3
 8000c6a:	d017      	beq.n	8000c9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	2203      	movs	r2, #3
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	4013      	ands	r3, r2
 8000c82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d123      	bne.n	8000cf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	08da      	lsrs	r2, r3, #3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3208      	adds	r2, #8
 8000cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	f003 0307 	and.w	r3, r3, #7
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	220f      	movs	r2, #15
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	691a      	ldr	r2, [r3, #16]
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	08da      	lsrs	r2, r3, #3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3208      	adds	r2, #8
 8000cea:	69b9      	ldr	r1, [r7, #24]
 8000cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0203 	and.w	r2, r3, #3
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f000 80ae 	beq.w	8000e8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b5d      	ldr	r3, [pc, #372]	@ (8000eac <HAL_GPIO_Init+0x300>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3a:	4a5c      	ldr	r2, [pc, #368]	@ (8000eac <HAL_GPIO_Init+0x300>)
 8000d3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d42:	4b5a      	ldr	r3, [pc, #360]	@ (8000eac <HAL_GPIO_Init+0x300>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d4e:	4a58      	ldr	r2, [pc, #352]	@ (8000eb0 <HAL_GPIO_Init+0x304>)
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	089b      	lsrs	r3, r3, #2
 8000d54:	3302      	adds	r3, #2
 8000d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f003 0303 	and.w	r3, r3, #3
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	220f      	movs	r2, #15
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a4f      	ldr	r2, [pc, #316]	@ (8000eb4 <HAL_GPIO_Init+0x308>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d025      	beq.n	8000dc6 <HAL_GPIO_Init+0x21a>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a4e      	ldr	r2, [pc, #312]	@ (8000eb8 <HAL_GPIO_Init+0x30c>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d01f      	beq.n	8000dc2 <HAL_GPIO_Init+0x216>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a4d      	ldr	r2, [pc, #308]	@ (8000ebc <HAL_GPIO_Init+0x310>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d019      	beq.n	8000dbe <HAL_GPIO_Init+0x212>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a4c      	ldr	r2, [pc, #304]	@ (8000ec0 <HAL_GPIO_Init+0x314>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d013      	beq.n	8000dba <HAL_GPIO_Init+0x20e>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a4b      	ldr	r2, [pc, #300]	@ (8000ec4 <HAL_GPIO_Init+0x318>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d00d      	beq.n	8000db6 <HAL_GPIO_Init+0x20a>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a4a      	ldr	r2, [pc, #296]	@ (8000ec8 <HAL_GPIO_Init+0x31c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d007      	beq.n	8000db2 <HAL_GPIO_Init+0x206>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a49      	ldr	r2, [pc, #292]	@ (8000ecc <HAL_GPIO_Init+0x320>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d101      	bne.n	8000dae <HAL_GPIO_Init+0x202>
 8000daa:	2306      	movs	r3, #6
 8000dac:	e00c      	b.n	8000dc8 <HAL_GPIO_Init+0x21c>
 8000dae:	2307      	movs	r3, #7
 8000db0:	e00a      	b.n	8000dc8 <HAL_GPIO_Init+0x21c>
 8000db2:	2305      	movs	r3, #5
 8000db4:	e008      	b.n	8000dc8 <HAL_GPIO_Init+0x21c>
 8000db6:	2304      	movs	r3, #4
 8000db8:	e006      	b.n	8000dc8 <HAL_GPIO_Init+0x21c>
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e004      	b.n	8000dc8 <HAL_GPIO_Init+0x21c>
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	e002      	b.n	8000dc8 <HAL_GPIO_Init+0x21c>
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e000      	b.n	8000dc8 <HAL_GPIO_Init+0x21c>
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	69fa      	ldr	r2, [r7, #28]
 8000dca:	f002 0203 	and.w	r2, r2, #3
 8000dce:	0092      	lsls	r2, r2, #2
 8000dd0:	4093      	lsls	r3, r2
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dd8:	4935      	ldr	r1, [pc, #212]	@ (8000eb0 <HAL_GPIO_Init+0x304>)
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	089b      	lsrs	r3, r3, #2
 8000dde:	3302      	adds	r3, #2
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000de6:	4b3a      	ldr	r3, [pc, #232]	@ (8000ed0 <HAL_GPIO_Init+0x324>)
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	43db      	mvns	r3, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4013      	ands	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d003      	beq.n	8000e0a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e0a:	4a31      	ldr	r2, [pc, #196]	@ (8000ed0 <HAL_GPIO_Init+0x324>)
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e10:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed0 <HAL_GPIO_Init+0x324>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d003      	beq.n	8000e34 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e34:	4a26      	ldr	r2, [pc, #152]	@ (8000ed0 <HAL_GPIO_Init+0x324>)
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e3a:	4b25      	ldr	r3, [pc, #148]	@ (8000ed0 <HAL_GPIO_Init+0x324>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	43db      	mvns	r3, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4013      	ands	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed0 <HAL_GPIO_Init+0x324>)
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e64:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed0 <HAL_GPIO_Init+0x324>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d003      	beq.n	8000e88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e88:	4a11      	ldr	r2, [pc, #68]	@ (8000ed0 <HAL_GPIO_Init+0x324>)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3301      	adds	r3, #1
 8000e92:	61fb      	str	r3, [r7, #28]
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	2b0f      	cmp	r3, #15
 8000e98:	f67f ae96 	bls.w	8000bc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	3724      	adds	r7, #36	@ 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40013800 	.word	0x40013800
 8000eb4:	40020000 	.word	0x40020000
 8000eb8:	40020400 	.word	0x40020400
 8000ebc:	40020800 	.word	0x40020800
 8000ec0:	40020c00 	.word	0x40020c00
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40021400 	.word	0x40021400
 8000ecc:	40021800 	.word	0x40021800
 8000ed0:	40013c00 	.word	0x40013c00

08000ed4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	691a      	ldr	r2, [r3, #16]
 8000ee4:	887b      	ldrh	r3, [r7, #2]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d002      	beq.n	8000ef2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000eec:	2301      	movs	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
 8000ef0:	e001      	b.n	8000ef6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	807b      	strh	r3, [r7, #2]
 8000f10:	4613      	mov	r3, r2
 8000f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f14:	787b      	ldrb	r3, [r7, #1]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f1a:	887a      	ldrh	r2, [r7, #2]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f20:	e003      	b.n	8000f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f22:	887b      	ldrh	r3, [r7, #2]
 8000f24:	041a      	lsls	r2, r3, #16
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	619a      	str	r2, [r3, #24]
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b086      	sub	sp, #24
 8000f3a:	af02      	add	r7, sp, #8
 8000f3c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e108      	b.n	800115a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d106      	bne.n	8000f68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f005 ffcc 	bl	8006f00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f76:	d102      	bne.n	8000f7e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f002 fc5d 	bl	8003842 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6818      	ldr	r0, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7c1a      	ldrb	r2, [r3, #16]
 8000f90:	f88d 2000 	strb.w	r2, [sp]
 8000f94:	3304      	adds	r3, #4
 8000f96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f98:	f002 fb3c 	bl	8003614 <USB_CoreInit>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d005      	beq.n	8000fae <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e0d5      	b.n	800115a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 fc55 	bl	8003864 <USB_SetCurrentMode>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d005      	beq.n	8000fcc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e0c6      	b.n	800115a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	73fb      	strb	r3, [r7, #15]
 8000fd0:	e04a      	b.n	8001068 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fd2:	7bfa      	ldrb	r2, [r7, #15]
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	4413      	add	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	440b      	add	r3, r1
 8000fe0:	3315      	adds	r3, #21
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fe6:	7bfa      	ldrb	r2, [r7, #15]
 8000fe8:	6879      	ldr	r1, [r7, #4]
 8000fea:	4613      	mov	r3, r2
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	4413      	add	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	3314      	adds	r3, #20
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ffa:	7bfa      	ldrb	r2, [r7, #15]
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	b298      	uxth	r0, r3
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	4613      	mov	r3, r2
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	4413      	add	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	440b      	add	r3, r1
 800100c:	332e      	adds	r3, #46	@ 0x2e
 800100e:	4602      	mov	r2, r0
 8001010:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001012:	7bfa      	ldrb	r2, [r7, #15]
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	4613      	mov	r3, r2
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	4413      	add	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	440b      	add	r3, r1
 8001020:	3318      	adds	r3, #24
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001026:	7bfa      	ldrb	r2, [r7, #15]
 8001028:	6879      	ldr	r1, [r7, #4]
 800102a:	4613      	mov	r3, r2
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	4413      	add	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	440b      	add	r3, r1
 8001034:	331c      	adds	r3, #28
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800103a:	7bfa      	ldrb	r2, [r7, #15]
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	4613      	mov	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	4413      	add	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	440b      	add	r3, r1
 8001048:	3320      	adds	r3, #32
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	4413      	add	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	3324      	adds	r3, #36	@ 0x24
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	3301      	adds	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	791b      	ldrb	r3, [r3, #4]
 800106c:	7bfa      	ldrb	r2, [r7, #15]
 800106e:	429a      	cmp	r2, r3
 8001070:	d3af      	bcc.n	8000fd2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]
 8001076:	e044      	b.n	8001102 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	4413      	add	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800108e:	7bfa      	ldrb	r2, [r7, #15]
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	4413      	add	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	440b      	add	r3, r1
 800109c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010a4:	7bfa      	ldrb	r2, [r7, #15]
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	4613      	mov	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	4413      	add	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010ba:	7bfa      	ldrb	r2, [r7, #15]
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4413      	add	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	440b      	add	r3, r1
 80010c8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	4413      	add	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	440b      	add	r3, r1
 80010de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010e6:	7bfa      	ldrb	r2, [r7, #15]
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	4613      	mov	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	4413      	add	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	440b      	add	r3, r1
 80010f4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	3301      	adds	r3, #1
 8001100:	73fb      	strb	r3, [r7, #15]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	791b      	ldrb	r3, [r3, #4]
 8001106:	7bfa      	ldrb	r2, [r7, #15]
 8001108:	429a      	cmp	r2, r3
 800110a:	d3b5      	bcc.n	8001078 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7c1a      	ldrb	r2, [r3, #16]
 8001114:	f88d 2000 	strb.w	r2, [sp]
 8001118:	3304      	adds	r3, #4
 800111a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800111c:	f002 fbee 	bl	80038fc <USB_DevInit>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d005      	beq.n	8001132 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2202      	movs	r2, #2
 800112a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e013      	b.n	800115a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2201      	movs	r2, #1
 800113c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7b1b      	ldrb	r3, [r3, #12]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d102      	bne.n	800114e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f001 f955 	bl	80023f8 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f003 fc25 	bl	80049a2 <USB_DevDisconnect>

  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001176:	2b01      	cmp	r3, #1
 8001178:	d101      	bne.n	800117e <HAL_PCD_Start+0x1c>
 800117a:	2302      	movs	r3, #2
 800117c:	e022      	b.n	80011c4 <HAL_PCD_Start+0x62>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800118e:	2b00      	cmp	r3, #0
 8001190:	d009      	beq.n	80011a6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001196:	2b01      	cmp	r3, #1
 8001198:	d105      	bne.n	80011a6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800119e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f002 fb38 	bl	8003820 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f003 fbd3 	bl	8004960 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011cc:	b590      	push	{r4, r7, lr}
 80011ce:	b08d      	sub	sp, #52	@ 0x34
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011da:	6a3b      	ldr	r3, [r7, #32]
 80011dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f003 fc91 	bl	8004b0a <USB_GetMode>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f040 84b9 	bne.w	8001b62 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f003 fbf5 	bl	80049e4 <USB_ReadInterrupts>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 84af 	beq.w	8001b60 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	0a1b      	lsrs	r3, r3, #8
 800120c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f003 fbe2 	bl	80049e4 <USB_ReadInterrupts>
 8001220:	4603      	mov	r3, r0
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b02      	cmp	r3, #2
 8001228:	d107      	bne.n	800123a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	695a      	ldr	r2, [r3, #20]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f002 0202 	and.w	r2, r2, #2
 8001238:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f003 fbd0 	bl	80049e4 <USB_ReadInterrupts>
 8001244:	4603      	mov	r3, r0
 8001246:	f003 0310 	and.w	r3, r3, #16
 800124a:	2b10      	cmp	r3, #16
 800124c:	d161      	bne.n	8001312 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	699a      	ldr	r2, [r3, #24]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 0210 	bic.w	r2, r2, #16
 800125c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800125e:	6a3b      	ldr	r3, [r7, #32]
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	f003 020f 	and.w	r2, r3, #15
 800126a:	4613      	mov	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	4413      	add	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	3304      	adds	r3, #4
 800127c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	0c5b      	lsrs	r3, r3, #17
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	2b02      	cmp	r3, #2
 8001288:	d124      	bne.n	80012d4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001290:	4013      	ands	r3, r2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d035      	beq.n	8001302 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	091b      	lsrs	r3, r3, #4
 800129e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	461a      	mov	r2, r3
 80012a8:	6a38      	ldr	r0, [r7, #32]
 80012aa:	f003 fa07 	bl	80046bc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	68da      	ldr	r2, [r3, #12]
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	091b      	lsrs	r3, r3, #4
 80012b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ba:	441a      	add	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	695a      	ldr	r2, [r3, #20]
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	091b      	lsrs	r3, r3, #4
 80012c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012cc:	441a      	add	r2, r3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	615a      	str	r2, [r3, #20]
 80012d2:	e016      	b.n	8001302 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	0c5b      	lsrs	r3, r3, #17
 80012d8:	f003 030f 	and.w	r3, r3, #15
 80012dc:	2b06      	cmp	r3, #6
 80012de:	d110      	bne.n	8001302 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80012e6:	2208      	movs	r2, #8
 80012e8:	4619      	mov	r1, r3
 80012ea:	6a38      	ldr	r0, [r7, #32]
 80012ec:	f003 f9e6 	bl	80046bc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	695a      	ldr	r2, [r3, #20]
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	091b      	lsrs	r3, r3, #4
 80012f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012fc:	441a      	add	r2, r3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	699a      	ldr	r2, [r3, #24]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f042 0210 	orr.w	r2, r2, #16
 8001310:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f003 fb64 	bl	80049e4 <USB_ReadInterrupts>
 800131c:	4603      	mov	r3, r0
 800131e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001322:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001326:	f040 80a7 	bne.w	8001478 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f003 fb69 	bl	8004a0a <USB_ReadDevAllOutEpInterrupt>
 8001338:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800133a:	e099      	b.n	8001470 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800133c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 808e 	beq.w	8001464 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	4611      	mov	r1, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f003 fb8d 	bl	8004a72 <USB_ReadDevOutEPInterrupt>
 8001358:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00c      	beq.n	800137e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001366:	015a      	lsls	r2, r3, #5
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	4413      	add	r3, r2
 800136c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001370:	461a      	mov	r2, r3
 8001372:	2301      	movs	r3, #1
 8001374:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001376:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 feb7 	bl	80020ec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	f003 0308 	and.w	r3, r3, #8
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00c      	beq.n	80013a2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138a:	015a      	lsls	r2, r3, #5
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	4413      	add	r3, r2
 8001390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001394:	461a      	mov	r2, r3
 8001396:	2308      	movs	r3, #8
 8001398:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800139a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 ff8d 	bl	80022bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	f003 0310 	and.w	r3, r3, #16
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d008      	beq.n	80013be <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ae:	015a      	lsls	r2, r3, #5
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	4413      	add	r3, r2
 80013b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013b8:	461a      	mov	r2, r3
 80013ba:	2310      	movs	r3, #16
 80013bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d030      	beq.n	800142a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013d0:	2b80      	cmp	r3, #128	@ 0x80
 80013d2:	d109      	bne.n	80013e8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	69fa      	ldr	r2, [r7, #28]
 80013de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80013e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013e6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80013e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013ea:	4613      	mov	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	4413      	add	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	3304      	adds	r3, #4
 80013fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	78db      	ldrb	r3, [r3, #3]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d108      	bne.n	8001418 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	2200      	movs	r2, #0
 800140a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800140c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140e:	b2db      	uxtb	r3, r3
 8001410:	4619      	mov	r1, r3
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f005 fe90 	bl	8007138 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141a:	015a      	lsls	r2, r3, #5
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	4413      	add	r3, r2
 8001420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001424:	461a      	mov	r2, r3
 8001426:	2302      	movs	r3, #2
 8001428:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	f003 0320 	and.w	r3, r3, #32
 8001430:	2b00      	cmp	r3, #0
 8001432:	d008      	beq.n	8001446 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001436:	015a      	lsls	r2, r3, #5
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	4413      	add	r3, r2
 800143c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001440:	461a      	mov	r2, r3
 8001442:	2320      	movs	r3, #32
 8001444:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d009      	beq.n	8001464 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001452:	015a      	lsls	r2, r3, #5
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	4413      	add	r3, r2
 8001458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800145c:	461a      	mov	r2, r3
 800145e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001462:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001466:	3301      	adds	r3, #1
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800146a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800146c:	085b      	lsrs	r3, r3, #1
 800146e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001472:	2b00      	cmp	r3, #0
 8001474:	f47f af62 	bne.w	800133c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f003 fab1 	bl	80049e4 <USB_ReadInterrupts>
 8001482:	4603      	mov	r3, r0
 8001484:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001488:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800148c:	f040 80db 	bne.w	8001646 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f003 fad2 	bl	8004a3e <USB_ReadDevAllInEpInterrupt>
 800149a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800149c:	2300      	movs	r3, #0
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80014a0:	e0cd      	b.n	800163e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 80c2 	beq.w	8001632 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f003 faf8 	bl	8004aae <USB_ReadDevInEPInterrupt>
 80014be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d057      	beq.n	800157a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014cc:	f003 030f 	and.w	r3, r3, #15
 80014d0:	2201      	movs	r2, #1
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80014de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69f9      	ldr	r1, [r7, #28]
 80014e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80014ea:	4013      	ands	r3, r2
 80014ec:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80014ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f0:	015a      	lsls	r2, r3, #5
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	4413      	add	r3, r2
 80014f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014fa:	461a      	mov	r2, r3
 80014fc:	2301      	movs	r3, #1
 80014fe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	799b      	ldrb	r3, [r3, #6]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d132      	bne.n	800156e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800150c:	4613      	mov	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	4413      	add	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	3320      	adds	r3, #32
 8001518:	6819      	ldr	r1, [r3, #0]
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800151e:	4613      	mov	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	4413      	add	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4403      	add	r3, r0
 8001528:	331c      	adds	r3, #28
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4419      	add	r1, r3
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001532:	4613      	mov	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4403      	add	r3, r0
 800153c:	3320      	adds	r3, #32
 800153e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001542:	2b00      	cmp	r3, #0
 8001544:	d113      	bne.n	800156e <HAL_PCD_IRQHandler+0x3a2>
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800154a:	4613      	mov	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4413      	add	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	3324      	adds	r3, #36	@ 0x24
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d108      	bne.n	800156e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6818      	ldr	r0, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001566:	461a      	mov	r2, r3
 8001568:	2101      	movs	r1, #1
 800156a:	f003 faff 	bl	8004b6c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800156e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001570:	b2db      	uxtb	r3, r3
 8001572:	4619      	mov	r1, r3
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f005 fd5a 	bl	800702e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001586:	015a      	lsls	r2, r3, #5
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	4413      	add	r3, r2
 800158c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001590:	461a      	mov	r2, r3
 8001592:	2308      	movs	r3, #8
 8001594:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	f003 0310 	and.w	r3, r3, #16
 800159c:	2b00      	cmp	r3, #0
 800159e:	d008      	beq.n	80015b2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a2:	015a      	lsls	r2, r3, #5
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	4413      	add	r3, r2
 80015a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015ac:	461a      	mov	r2, r3
 80015ae:	2310      	movs	r3, #16
 80015b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d008      	beq.n	80015ce <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015be:	015a      	lsls	r2, r3, #5
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	4413      	add	r3, r2
 80015c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015c8:	461a      	mov	r2, r3
 80015ca:	2340      	movs	r3, #64	@ 0x40
 80015cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d023      	beq.n	8001620 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80015d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015da:	6a38      	ldr	r0, [r7, #32]
 80015dc:	f002 faec 	bl	8003bb8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80015e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015e2:	4613      	mov	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	4413      	add	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	3310      	adds	r3, #16
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	3304      	adds	r3, #4
 80015f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	78db      	ldrb	r3, [r3, #3]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d108      	bne.n	800160e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	2200      	movs	r2, #0
 8001600:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001604:	b2db      	uxtb	r3, r3
 8001606:	4619      	mov	r1, r3
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f005 fda7 	bl	800715c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001610:	015a      	lsls	r2, r3, #5
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	4413      	add	r3, r2
 8001616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800161a:	461a      	mov	r2, r3
 800161c:	2302      	movs	r3, #2
 800161e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800162a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 fcd0 	bl	8001fd2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001634:	3301      	adds	r3, #1
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800163a:	085b      	lsrs	r3, r3, #1
 800163c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800163e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001640:	2b00      	cmp	r3, #0
 8001642:	f47f af2e 	bne.w	80014a2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f003 f9ca 	bl	80049e4 <USB_ReadInterrupts>
 8001650:	4603      	mov	r3, r0
 8001652:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001656:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800165a:	d122      	bne.n	80016a2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	69fa      	ldr	r2, [r7, #28]
 8001666:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800166a:	f023 0301 	bic.w	r3, r3, #1
 800166e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001676:	2b01      	cmp	r3, #1
 8001678:	d108      	bne.n	800168c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001682:	2100      	movs	r1, #0
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f005 ff0f 	bl	80074a8 <HAL_PCDEx_LPM_Callback>
 800168a:	e002      	b.n	8001692 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f005 fd45 	bl	800711c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	695a      	ldr	r2, [r3, #20]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80016a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f003 f99c 	bl	80049e4 <USB_ReadInterrupts>
 80016ac:	4603      	mov	r3, r0
 80016ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016b6:	d112      	bne.n	80016de <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d102      	bne.n	80016ce <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f005 fd01 	bl	80070d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	695a      	ldr	r2, [r3, #20]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80016dc:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 f97e 	bl	80049e4 <USB_ReadInterrupts>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80016ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80016f2:	d121      	bne.n	8001738 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8001702:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800170a:	2b00      	cmp	r3, #0
 800170c:	d111      	bne.n	8001732 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800171c:	089b      	lsrs	r3, r3, #2
 800171e:	f003 020f 	and.w	r2, r3, #15
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001728:	2101      	movs	r1, #1
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f005 febc 	bl	80074a8 <HAL_PCDEx_LPM_Callback>
 8001730:	e002      	b.n	8001738 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f005 fccc 	bl	80070d0 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f003 f951 	bl	80049e4 <USB_ReadInterrupts>
 8001742:	4603      	mov	r3, r0
 8001744:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800174c:	f040 80b7 	bne.w	80018be <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	69fa      	ldr	r2, [r7, #28]
 800175a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800175e:	f023 0301 	bic.w	r3, r3, #1
 8001762:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2110      	movs	r1, #16
 800176a:	4618      	mov	r0, r3
 800176c:	f002 fa24 	bl	8003bb8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001770:	2300      	movs	r3, #0
 8001772:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001774:	e046      	b.n	8001804 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001778:	015a      	lsls	r2, r3, #5
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	4413      	add	r3, r2
 800177e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001782:	461a      	mov	r2, r3
 8001784:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001788:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800178a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800178c:	015a      	lsls	r2, r3, #5
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	4413      	add	r3, r2
 8001792:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800179a:	0151      	lsls	r1, r2, #5
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	440a      	add	r2, r1
 80017a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80017a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80017a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ac:	015a      	lsls	r2, r3, #5
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	4413      	add	r3, r2
 80017b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017b6:	461a      	mov	r2, r3
 80017b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80017bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017c0:	015a      	lsls	r2, r3, #5
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	4413      	add	r3, r2
 80017c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017ce:	0151      	lsls	r1, r2, #5
 80017d0:	69fa      	ldr	r2, [r7, #28]
 80017d2:	440a      	add	r2, r1
 80017d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80017d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80017dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80017de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e0:	015a      	lsls	r2, r3, #5
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	4413      	add	r3, r2
 80017e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017ee:	0151      	lsls	r1, r2, #5
 80017f0:	69fa      	ldr	r2, [r7, #28]
 80017f2:	440a      	add	r2, r1
 80017f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80017f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80017fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001800:	3301      	adds	r3, #1
 8001802:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	791b      	ldrb	r3, [r3, #4]
 8001808:	461a      	mov	r2, r3
 800180a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800180c:	4293      	cmp	r3, r2
 800180e:	d3b2      	bcc.n	8001776 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	69fa      	ldr	r2, [r7, #28]
 800181a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800181e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001822:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	7bdb      	ldrb	r3, [r3, #15]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d016      	beq.n	800185a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001832:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800183c:	f043 030b 	orr.w	r3, r3, #11
 8001840:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800184a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001852:	f043 030b 	orr.w	r3, r3, #11
 8001856:	6453      	str	r3, [r2, #68]	@ 0x44
 8001858:	e015      	b.n	8001886 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001868:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800186c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001870:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	69fa      	ldr	r2, [r7, #28]
 800187c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001880:	f043 030b 	orr.w	r3, r3, #11
 8001884:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001894:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001898:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6818      	ldr	r0, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018a8:	461a      	mov	r2, r3
 80018aa:	f003 f95f 	bl	8004b6c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	695a      	ldr	r2, [r3, #20]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80018bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f003 f88e 	bl	80049e4 <USB_ReadInterrupts>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018d2:	d123      	bne.n	800191c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f003 f924 	bl	8004b26 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f002 f9e1 	bl	8003caa <USB_GetDevSpeed>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461a      	mov	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681c      	ldr	r4, [r3, #0]
 80018f4:	f000 fe8a 	bl	800260c <HAL_RCC_GetHCLKFreq>
 80018f8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018fe:	461a      	mov	r2, r3
 8001900:	4620      	mov	r0, r4
 8001902:	f001 feeb 	bl	80036dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f005 fbb9 	bl	800707e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	695a      	ldr	r2, [r3, #20]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800191a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f003 f85f 	bl	80049e4 <USB_ReadInterrupts>
 8001926:	4603      	mov	r3, r0
 8001928:	f003 0308 	and.w	r3, r3, #8
 800192c:	2b08      	cmp	r3, #8
 800192e:	d10a      	bne.n	8001946 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f005 fb96 	bl	8007062 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	695a      	ldr	r2, [r3, #20]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f002 0208 	and.w	r2, r2, #8
 8001944:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f003 f84a 	bl	80049e4 <USB_ReadInterrupts>
 8001950:	4603      	mov	r3, r0
 8001952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001956:	2b80      	cmp	r3, #128	@ 0x80
 8001958:	d123      	bne.n	80019a2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001966:	2301      	movs	r3, #1
 8001968:	627b      	str	r3, [r7, #36]	@ 0x24
 800196a:	e014      	b.n	8001996 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001970:	4613      	mov	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	4413      	add	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d105      	bne.n	8001990 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001986:	b2db      	uxtb	r3, r3
 8001988:	4619      	mov	r1, r3
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 faf0 	bl	8001f70 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001992:	3301      	adds	r3, #1
 8001994:	627b      	str	r3, [r7, #36]	@ 0x24
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	791b      	ldrb	r3, [r3, #4]
 800199a:	461a      	mov	r2, r3
 800199c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199e:	4293      	cmp	r3, r2
 80019a0:	d3e4      	bcc.n	800196c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f003 f81c 	bl	80049e4 <USB_ReadInterrupts>
 80019ac:	4603      	mov	r3, r0
 80019ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80019b6:	d13c      	bne.n	8001a32 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019b8:	2301      	movs	r3, #1
 80019ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80019bc:	e02b      	b.n	8001a16 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80019be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c0:	015a      	lsls	r2, r3, #5
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	4413      	add	r3, r2
 80019c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019d2:	4613      	mov	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	4413      	add	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	440b      	add	r3, r1
 80019dc:	3318      	adds	r3, #24
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d115      	bne.n	8001a10 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80019e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	da12      	bge.n	8001a10 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019ee:	4613      	mov	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	4413      	add	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	440b      	add	r3, r1
 80019f8:	3317      	adds	r3, #23
 80019fa:	2201      	movs	r2, #1
 80019fc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80019fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	4619      	mov	r1, r3
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 fab0 	bl	8001f70 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a12:	3301      	adds	r3, #1
 8001a14:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	791b      	ldrb	r3, [r3, #4]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d3cd      	bcc.n	80019be <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	695a      	ldr	r2, [r3, #20]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001a30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f002 ffd4 	bl	80049e4 <USB_ReadInterrupts>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a46:	d156      	bne.n	8001af6 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a48:	2301      	movs	r3, #1
 8001a4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a4c:	e045      	b.n	8001ada <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a50:	015a      	lsls	r2, r3, #5
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	4413      	add	r3, r2
 8001a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a62:	4613      	mov	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	4413      	add	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d12e      	bne.n	8001ad4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a76:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	da2b      	bge.n	8001ad4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001a88:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d121      	bne.n	8001ad4 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a94:	4613      	mov	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4413      	add	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10a      	bne.n	8001ad4 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	69fa      	ldr	r2, [r7, #28]
 8001ac8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001acc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ad0:	6053      	str	r3, [r2, #4]
            break;
 8001ad2:	e008      	b.n	8001ae6 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	791b      	ldrb	r3, [r3, #4]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d3b3      	bcc.n	8001a4e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	695a      	ldr	r2, [r3, #20]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001af4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f002 ff72 	bl	80049e4 <USB_ReadInterrupts>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b0a:	d10a      	bne.n	8001b22 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f005 fb37 	bl	8007180 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	695a      	ldr	r2, [r3, #20]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001b20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f002 ff5c 	bl	80049e4 <USB_ReadInterrupts>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d115      	bne.n	8001b62 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d002      	beq.n	8001b4e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f005 fb27 	bl	800719c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6859      	ldr	r1, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	e000      	b.n	8001b62 <HAL_PCD_IRQHandler+0x996>
      return;
 8001b60:	bf00      	nop
    }
  }
}
 8001b62:	3734      	adds	r7, #52	@ 0x34
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd90      	pop	{r4, r7, pc}

08001b68 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_PCD_SetAddress+0x1a>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e012      	b.n	8001ba8 <HAL_PCD_SetAddress+0x40>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	78fa      	ldrb	r2, [r7, #3]
 8001b8e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	78fa      	ldrb	r2, [r7, #3]
 8001b96:	4611      	mov	r1, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f002 febb 	bl	8004914 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	4608      	mov	r0, r1
 8001bba:	4611      	mov	r1, r2
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	70fb      	strb	r3, [r7, #3]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	803b      	strh	r3, [r7, #0]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	da0f      	bge.n	8001bf6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bd6:	78fb      	ldrb	r3, [r7, #3]
 8001bd8:	f003 020f 	and.w	r2, r3, #15
 8001bdc:	4613      	mov	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	3310      	adds	r3, #16
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	3304      	adds	r3, #4
 8001bec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	705a      	strb	r2, [r3, #1]
 8001bf4:	e00f      	b.n	8001c16 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	f003 020f 	and.w	r2, r3, #15
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4413      	add	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c22:	883a      	ldrh	r2, [r7, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	78ba      	ldrb	r2, [r7, #2]
 8001c2c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	785b      	ldrb	r3, [r3, #1]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d004      	beq.n	8001c40 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c40:	78bb      	ldrb	r3, [r7, #2]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d102      	bne.n	8001c4c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_PCD_EP_Open+0xaa>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e00e      	b.n	8001c78 <HAL_PCD_EP_Open+0xc8>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68f9      	ldr	r1, [r7, #12]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f002 f843 	bl	8003cf4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001c76:	7afb      	ldrb	r3, [r7, #11]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	da0f      	bge.n	8001cb4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c94:	78fb      	ldrb	r3, [r7, #3]
 8001c96:	f003 020f 	and.w	r2, r3, #15
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	3310      	adds	r3, #16
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3304      	adds	r3, #4
 8001caa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	705a      	strb	r2, [r3, #1]
 8001cb2:	e00f      	b.n	8001cd4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	f003 020f 	and.w	r2, r3, #15
 8001cba:	4613      	mov	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	3304      	adds	r3, #4
 8001ccc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cd4:	78fb      	ldrb	r3, [r7, #3]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <HAL_PCD_EP_Close+0x6e>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e00e      	b.n	8001d0c <HAL_PCD_EP_Close+0x8c>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68f9      	ldr	r1, [r7, #12]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f002 f881 	bl	8003e04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	607a      	str	r2, [r7, #4]
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	460b      	mov	r3, r1
 8001d22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d24:	7afb      	ldrb	r3, [r7, #11]
 8001d26:	f003 020f 	and.w	r2, r3, #15
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	4413      	add	r3, r2
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	2200      	movs	r2, #0
 8001d54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d56:	7afb      	ldrb	r3, [r7, #11]
 8001d58:	f003 030f 	and.w	r3, r3, #15
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	799b      	ldrb	r3, [r3, #6]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d102      	bne.n	8001d70 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	799b      	ldrb	r3, [r3, #6]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	6979      	ldr	r1, [r7, #20]
 8001d7c:	f002 f91e 	bl	8003fbc <USB_EPStartXfer>

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b086      	sub	sp, #24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	603b      	str	r3, [r7, #0]
 8001d96:	460b      	mov	r3, r1
 8001d98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d9a:	7afb      	ldrb	r3, [r7, #11]
 8001d9c:	f003 020f 	and.w	r2, r3, #15
 8001da0:	4613      	mov	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4413      	add	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	3310      	adds	r3, #16
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	4413      	add	r3, r2
 8001dae:	3304      	adds	r3, #4
 8001db0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dca:	7afb      	ldrb	r3, [r7, #11]
 8001dcc:	f003 030f 	and.w	r3, r3, #15
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	799b      	ldrb	r3, [r3, #6]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d102      	bne.n	8001de4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	799b      	ldrb	r3, [r3, #6]
 8001dec:	461a      	mov	r2, r3
 8001dee:	6979      	ldr	r1, [r7, #20]
 8001df0:	f002 f8e4 	bl	8003fbc <USB_EPStartXfer>

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b084      	sub	sp, #16
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	460b      	mov	r3, r1
 8001e08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	7912      	ldrb	r2, [r2, #4]
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d901      	bls.n	8001e1c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e04f      	b.n	8001ebc <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	da0f      	bge.n	8001e44 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	f003 020f 	and.w	r2, r3, #15
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4413      	add	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	3310      	adds	r3, #16
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	3304      	adds	r3, #4
 8001e3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	705a      	strb	r2, [r3, #1]
 8001e42:	e00d      	b.n	8001e60 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e44:	78fa      	ldrb	r2, [r7, #3]
 8001e46:	4613      	mov	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	3304      	adds	r3, #4
 8001e58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2201      	movs	r2, #1
 8001e64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e66:	78fb      	ldrb	r3, [r7, #3]
 8001e68:	f003 030f 	and.w	r3, r3, #15
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_PCD_EP_SetStall+0x82>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e01d      	b.n	8001ebc <HAL_PCD_EP_SetStall+0xbe>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68f9      	ldr	r1, [r7, #12]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f002 fc6c 	bl	800476c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d109      	bne.n	8001eb2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6818      	ldr	r0, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	7999      	ldrb	r1, [r3, #6]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001eac:	461a      	mov	r2, r3
 8001eae:	f002 fe5d 	bl	8004b6c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	7912      	ldrb	r2, [r2, #4]
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e042      	b.n	8001f68 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ee2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	da0f      	bge.n	8001f0a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	f003 020f 	and.w	r2, r3, #15
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	3310      	adds	r3, #16
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	3304      	adds	r3, #4
 8001f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2201      	movs	r2, #1
 8001f06:	705a      	strb	r2, [r3, #1]
 8001f08:	e00f      	b.n	8001f2a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f0a:	78fb      	ldrb	r3, [r7, #3]
 8001f0c:	f003 020f 	and.w	r2, r3, #15
 8001f10:	4613      	mov	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	3304      	adds	r3, #4
 8001f22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d101      	bne.n	8001f4a <HAL_PCD_EP_ClrStall+0x86>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e00e      	b.n	8001f68 <HAL_PCD_EP_ClrStall+0xa4>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68f9      	ldr	r1, [r7, #12]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f002 fc75 	bl	8004848 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001f7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	da0c      	bge.n	8001f9e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	f003 020f 	and.w	r2, r3, #15
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	3310      	adds	r3, #16
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	4413      	add	r3, r2
 8001f98:	3304      	adds	r3, #4
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	e00c      	b.n	8001fb8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f9e:	78fb      	ldrb	r3, [r7, #3]
 8001fa0:	f003 020f 	and.w	r2, r3, #15
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68f9      	ldr	r1, [r7, #12]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f002 fa94 	bl	80044ec <USB_EPStopXfer>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001fc8:	7afb      	ldrb	r3, [r7, #11]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b08a      	sub	sp, #40	@ 0x28
 8001fd6:	af02      	add	r7, sp, #8
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	3310      	adds	r3, #16
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	695a      	ldr	r2, [r3, #20]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	429a      	cmp	r2, r3
 8002004:	d901      	bls.n	800200a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e06b      	b.n	80020e2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	691a      	ldr	r2, [r3, #16]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	429a      	cmp	r2, r3
 800201e:	d902      	bls.n	8002026 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3303      	adds	r3, #3
 800202a:	089b      	lsrs	r3, r3, #2
 800202c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800202e:	e02a      	b.n	8002086 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	69fa      	ldr	r2, [r7, #28]
 8002042:	429a      	cmp	r2, r3
 8002044:	d902      	bls.n	800204c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	3303      	adds	r3, #3
 8002050:	089b      	lsrs	r3, r3, #2
 8002052:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	68d9      	ldr	r1, [r3, #12]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	4603      	mov	r3, r0
 8002068:	6978      	ldr	r0, [r7, #20]
 800206a:	f002 fae9 	bl	8004640 <USB_WritePacket>

    ep->xfer_buff  += len;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	441a      	add	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	695a      	ldr	r2, [r3, #20]
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	441a      	add	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4413      	add	r3, r2
 800208e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	429a      	cmp	r2, r3
 800209a:	d809      	bhi.n	80020b0 <PCD_WriteEmptyTxFifo+0xde>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	695a      	ldr	r2, [r3, #20]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d203      	bcs.n	80020b0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1bf      	bne.n	8002030 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d811      	bhi.n	80020e0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	2201      	movs	r2, #1
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	6939      	ldr	r1, [r7, #16]
 80020d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80020dc:	4013      	ands	r3, r2
 80020de:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3720      	adds	r7, #32
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	333c      	adds	r3, #60	@ 0x3c
 8002104:	3304      	adds	r3, #4
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	015a      	lsls	r2, r3, #5
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	4413      	add	r3, r2
 8002112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	799b      	ldrb	r3, [r3, #6]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d17b      	bne.n	800221a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d015      	beq.n	8002158 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	4a61      	ldr	r2, [pc, #388]	@ (80022b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	f240 80b9 	bls.w	80022a8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 80b3 	beq.w	80022a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	4413      	add	r3, r2
 800214a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800214e:	461a      	mov	r2, r3
 8002150:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002154:	6093      	str	r3, [r2, #8]
 8002156:	e0a7      	b.n	80022a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	f003 0320 	and.w	r3, r3, #32
 800215e:	2b00      	cmp	r3, #0
 8002160:	d009      	beq.n	8002176 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	4413      	add	r3, r2
 800216a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800216e:	461a      	mov	r2, r3
 8002170:	2320      	movs	r3, #32
 8002172:	6093      	str	r3, [r2, #8]
 8002174:	e098      	b.n	80022a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800217c:	2b00      	cmp	r3, #0
 800217e:	f040 8093 	bne.w	80022a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	4a4b      	ldr	r2, [pc, #300]	@ (80022b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d90f      	bls.n	80021aa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	015a      	lsls	r2, r3, #5
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	4413      	add	r3, r2
 800219c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021a0:	461a      	mov	r2, r3
 80021a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021a6:	6093      	str	r3, [r2, #8]
 80021a8:	e07e      	b.n	80022a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	4413      	add	r3, r2
 80021bc:	3304      	adds	r3, #4
 80021be:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a1a      	ldr	r2, [r3, #32]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	0159      	lsls	r1, r3, #5
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	440b      	add	r3, r1
 80021cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d6:	1ad2      	subs	r2, r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d114      	bne.n	800220c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d109      	bne.n	80021fe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80021f4:	461a      	mov	r2, r3
 80021f6:	2101      	movs	r1, #1
 80021f8:	f002 fcb8 	bl	8004b6c <USB_EP0_OutStart>
 80021fc:	e006      	b.n	800220c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	441a      	add	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	b2db      	uxtb	r3, r3
 8002210:	4619      	mov	r1, r3
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f004 fef0 	bl	8006ff8 <HAL_PCD_DataOutStageCallback>
 8002218:	e046      	b.n	80022a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	4a26      	ldr	r2, [pc, #152]	@ (80022b8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d124      	bne.n	800226c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00a      	beq.n	8002242 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	015a      	lsls	r2, r3, #5
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	4413      	add	r3, r2
 8002234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002238:	461a      	mov	r2, r3
 800223a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800223e:	6093      	str	r3, [r2, #8]
 8002240:	e032      	b.n	80022a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	f003 0320 	and.w	r3, r3, #32
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	015a      	lsls	r2, r3, #5
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	4413      	add	r3, r2
 8002254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002258:	461a      	mov	r2, r3
 800225a:	2320      	movs	r3, #32
 800225c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	4619      	mov	r1, r3
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f004 fec7 	bl	8006ff8 <HAL_PCD_DataOutStageCallback>
 800226a:	e01d      	b.n	80022a8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d114      	bne.n	800229c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	4613      	mov	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4413      	add	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	440b      	add	r3, r1
 8002280:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d108      	bne.n	800229c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002294:	461a      	mov	r2, r3
 8002296:	2100      	movs	r1, #0
 8002298:	f002 fc68 	bl	8004b6c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	4619      	mov	r1, r3
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f004 fea8 	bl	8006ff8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3720      	adds	r7, #32
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	4f54300a 	.word	0x4f54300a
 80022b8:	4f54310a 	.word	0x4f54310a

080022bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	333c      	adds	r3, #60	@ 0x3c
 80022d4:	3304      	adds	r3, #4
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4a15      	ldr	r2, [pc, #84]	@ (8002344 <PCD_EP_OutSetupPacket_int+0x88>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d90e      	bls.n	8002310 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d009      	beq.n	8002310 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	015a      	lsls	r2, r3, #5
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	4413      	add	r3, r2
 8002304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002308:	461a      	mov	r2, r3
 800230a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800230e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f004 fe5f 	bl	8006fd4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4a0a      	ldr	r2, [pc, #40]	@ (8002344 <PCD_EP_OutSetupPacket_int+0x88>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d90c      	bls.n	8002338 <PCD_EP_OutSetupPacket_int+0x7c>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	799b      	ldrb	r3, [r3, #6]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d108      	bne.n	8002338 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6818      	ldr	r0, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002330:	461a      	mov	r2, r3
 8002332:	2101      	movs	r1, #1
 8002334:	f002 fc1a 	bl	8004b6c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	4f54300a 	.word	0x4f54300a

08002348 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	70fb      	strb	r3, [r7, #3]
 8002354:	4613      	mov	r3, r2
 8002356:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d107      	bne.n	8002376 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002366:	883b      	ldrh	r3, [r7, #0]
 8002368:	0419      	lsls	r1, r3, #16
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	430a      	orrs	r2, r1
 8002372:	629a      	str	r2, [r3, #40]	@ 0x28
 8002374:	e028      	b.n	80023c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237c:	0c1b      	lsrs	r3, r3, #16
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	4413      	add	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002384:	2300      	movs	r3, #0
 8002386:	73fb      	strb	r3, [r7, #15]
 8002388:	e00d      	b.n	80023a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	3340      	adds	r3, #64	@ 0x40
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	0c1b      	lsrs	r3, r3, #16
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	4413      	add	r3, r2
 800239e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	3301      	adds	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
 80023a6:	7bfa      	ldrb	r2, [r7, #15]
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d3ec      	bcc.n	800238a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023b0:	883b      	ldrh	r3, [r7, #0]
 80023b2:	0418      	lsls	r0, r3, #16
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6819      	ldr	r1, [r3, #0]
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	4302      	orrs	r2, r0
 80023c0:	3340      	adds	r3, #64	@ 0x40
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	460b      	mov	r3, r1
 80023e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	887a      	ldrh	r2, [r7, #2]
 80023e8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002426:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800242a:	f043 0303 	orr.w	r3, r3, #3
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0cc      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002454:	4b68      	ldr	r3, [pc, #416]	@ (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 030f 	and.w	r3, r3, #15
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d90c      	bls.n	800247c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b65      	ldr	r3, [pc, #404]	@ (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800246a:	4b63      	ldr	r3, [pc, #396]	@ (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d001      	beq.n	800247c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0b8      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d020      	beq.n	80024ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002494:	4b59      	ldr	r3, [pc, #356]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4a58      	ldr	r2, [pc, #352]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800249e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024ac:	4b53      	ldr	r3, [pc, #332]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4a52      	ldr	r2, [pc, #328]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b8:	4b50      	ldr	r3, [pc, #320]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	494d      	ldr	r1, [pc, #308]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d044      	beq.n	8002560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d107      	bne.n	80024ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024de:	4b47      	ldr	r3, [pc, #284]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d119      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e07f      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d003      	beq.n	80024fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d107      	bne.n	800250e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fe:	4b3f      	ldr	r3, [pc, #252]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e06f      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250e:	4b3b      	ldr	r3, [pc, #236]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e067      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800251e:	4b37      	ldr	r3, [pc, #220]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f023 0203 	bic.w	r2, r3, #3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4934      	ldr	r1, [pc, #208]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 800252c:	4313      	orrs	r3, r2
 800252e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002530:	f7fe f9fa 	bl	8000928 <HAL_GetTick>
 8002534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002536:	e00a      	b.n	800254e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002538:	f7fe f9f6 	bl	8000928 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e04f      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254e:	4b2b      	ldr	r3, [pc, #172]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 020c 	and.w	r2, r3, #12
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	429a      	cmp	r2, r3
 800255e:	d1eb      	bne.n	8002538 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002560:	4b25      	ldr	r3, [pc, #148]	@ (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 030f 	and.w	r3, r3, #15
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d20c      	bcs.n	8002588 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b22      	ldr	r3, [pc, #136]	@ (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002576:	4b20      	ldr	r3, [pc, #128]	@ (80025f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d001      	beq.n	8002588 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e032      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002594:	4b19      	ldr	r3, [pc, #100]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4916      	ldr	r1, [pc, #88]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d009      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025b2:	4b12      	ldr	r3, [pc, #72]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	490e      	ldr	r1, [pc, #56]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025c6:	f000 fb57 	bl	8002c78 <HAL_RCC_GetSysClockFreq>
 80025ca:	4602      	mov	r2, r0
 80025cc:	4b0b      	ldr	r3, [pc, #44]	@ (80025fc <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	490a      	ldr	r1, [pc, #40]	@ (8002600 <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	5ccb      	ldrb	r3, [r1, r3]
 80025da:	fa22 f303 	lsr.w	r3, r2, r3
 80025de:	4a09      	ldr	r2, [pc, #36]	@ (8002604 <HAL_RCC_ClockConfig+0x1c4>)
 80025e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025e2:	4b09      	ldr	r3, [pc, #36]	@ (8002608 <HAL_RCC_ClockConfig+0x1c8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe f95a 	bl	80008a0 <HAL_InitTick>

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023c00 	.word	0x40023c00
 80025fc:	40023800 	.word	0x40023800
 8002600:	0800769c 	.word	0x0800769c
 8002604:	20000000 	.word	0x20000000
 8002608:	20000004 	.word	0x20000004

0800260c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002610:	4b03      	ldr	r3, [pc, #12]	@ (8002620 <HAL_RCC_GetHCLKFreq+0x14>)
 8002612:	681b      	ldr	r3, [r3, #0]
}
 8002614:	4618      	mov	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	20000000 	.word	0x20000000

08002624 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08c      	sub	sp, #48	@ 0x30
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d010      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800265c:	4b6f      	ldr	r3, [pc, #444]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800265e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002662:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800266a:	496c      	ldr	r1, [pc, #432]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800267a:	2301      	movs	r3, #1
 800267c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d010      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800268a:	4b64      	ldr	r3, [pc, #400]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800268c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002690:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002698:	4960      	ldr	r1, [pc, #384]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80026a8:	2301      	movs	r3, #1
 80026aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d017      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026b8:	4b58      	ldr	r3, [pc, #352]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c6:	4955      	ldr	r1, [pc, #340]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026d6:	d101      	bne.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80026d8:	2301      	movs	r3, #1
 80026da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80026e4:	2301      	movs	r3, #1
 80026e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d017      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026f4:	4b49      	ldr	r3, [pc, #292]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002702:	4946      	ldr	r1, [pc, #280]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800270e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002712:	d101      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002714:	2301      	movs	r3, #1
 8002716:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002720:	2301      	movs	r3, #1
 8002722:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0320 	and.w	r3, r3, #32
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 808a 	beq.w	8002846 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	4b39      	ldr	r3, [pc, #228]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273a:	4a38      	ldr	r2, [pc, #224]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800273c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002740:	6413      	str	r3, [r2, #64]	@ 0x40
 8002742:	4b36      	ldr	r3, [pc, #216]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800274e:	4b34      	ldr	r3, [pc, #208]	@ (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a33      	ldr	r2, [pc, #204]	@ (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002758:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800275a:	f7fe f8e5 	bl	8000928 <HAL_GetTick>
 800275e:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002760:	e008      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002762:	f7fe f8e1 	bl	8000928 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e278      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002774:	4b2a      	ldr	r3, [pc, #168]	@ (8002820 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002780:	4b26      	ldr	r3, [pc, #152]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002784:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002788:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d02f      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002794:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002798:	6a3a      	ldr	r2, [r7, #32]
 800279a:	429a      	cmp	r2, r3
 800279c:	d028      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800279e:	4b1f      	ldr	r3, [pc, #124]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027a6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80027b4:	4a19      	ldr	r2, [pc, #100]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027ba:	4b18      	ldr	r3, [pc, #96]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d114      	bne.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80027c6:	f7fe f8af 	bl	8000928 <HAL_GetTick>
 80027ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027cc:	e00a      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ce:	f7fe f8ab 	bl	8000928 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027dc:	4293      	cmp	r3, r2
 80027de:	d901      	bls.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e240      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e4:	4b0d      	ldr	r3, [pc, #52]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0ee      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027fc:	d114      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80027fe:	4b07      	ldr	r3, [pc, #28]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800280e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002812:	4902      	ldr	r1, [pc, #8]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002814:	4313      	orrs	r3, r2
 8002816:	608b      	str	r3, [r1, #8]
 8002818:	e00c      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800281a:	bf00      	nop
 800281c:	40023800 	.word	0x40023800
 8002820:	40007000 	.word	0x40007000
 8002824:	42470e40 	.word	0x42470e40
 8002828:	4b4a      	ldr	r3, [pc, #296]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a49      	ldr	r2, [pc, #292]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800282e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002832:	6093      	str	r3, [r2, #8]
 8002834:	4b47      	ldr	r3, [pc, #284]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002836:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002840:	4944      	ldr	r1, [pc, #272]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002842:	4313      	orrs	r3, r2
 8002844:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0310 	and.w	r3, r3, #16
 800284e:	2b00      	cmp	r3, #0
 8002850:	d004      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002858:	4b3f      	ldr	r3, [pc, #252]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800285a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00a      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002868:	4b3a      	ldr	r3, [pc, #232]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800286a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800286e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002876:	4937      	ldr	r1, [pc, #220]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00a      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800288a:	4b32      	ldr	r3, [pc, #200]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800288c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002890:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002898:	492e      	ldr	r1, [pc, #184]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d011      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80028ac:	4b29      	ldr	r3, [pc, #164]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028b2:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ba:	4926      	ldr	r1, [pc, #152]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028ca:	d101      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80028cc:	2301      	movs	r3, #1
 80028ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00a      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80028dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028e2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ea:	491a      	ldr	r1, [pc, #104]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d011      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80028fe:	4b15      	ldr	r3, [pc, #84]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002900:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002904:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800290c:	4911      	ldr	r1, [pc, #68]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002918:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800291c:	d101      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800291e:	2301      	movs	r3, #1
 8002920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002924:	2b01      	cmp	r3, #1
 8002926:	d005      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002930:	f040 80ff 	bne.w	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002934:	4b09      	ldr	r3, [pc, #36]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800293a:	f7fd fff5 	bl	8000928 <HAL_GetTick>
 800293e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002940:	e00e      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002942:	f7fd fff1 	bl	8000928 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d907      	bls.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e188      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002954:	40023800 	.word	0x40023800
 8002958:	424711e0 	.word	0x424711e0
 800295c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002960:	4b7e      	ldr	r3, [pc, #504]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1ea      	bne.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800297c:	2b00      	cmp	r3, #0
 800297e:	d009      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002988:	2b00      	cmp	r3, #0
 800298a:	d028      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002990:	2b00      	cmp	r3, #0
 8002992:	d124      	bne.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002994:	4b71      	ldr	r3, [pc, #452]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002996:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800299a:	0c1b      	lsrs	r3, r3, #16
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	3301      	adds	r3, #1
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029a6:	4b6d      	ldr	r3, [pc, #436]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029ac:	0e1b      	lsrs	r3, r3, #24
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	019b      	lsls	r3, r3, #6
 80029be:	431a      	orrs	r2, r3
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	085b      	lsrs	r3, r3, #1
 80029c4:	3b01      	subs	r3, #1
 80029c6:	041b      	lsls	r3, r3, #16
 80029c8:	431a      	orrs	r2, r3
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	061b      	lsls	r3, r3, #24
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	071b      	lsls	r3, r3, #28
 80029d6:	4961      	ldr	r1, [pc, #388]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d004      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029f2:	d00a      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d035      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a08:	d130      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a0a:	4b54      	ldr	r3, [pc, #336]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a10:	0c1b      	lsrs	r3, r3, #16
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	3301      	adds	r3, #1
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a1c:	4b4f      	ldr	r3, [pc, #316]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a22:	0f1b      	lsrs	r3, r3, #28
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	019b      	lsls	r3, r3, #6
 8002a34:	431a      	orrs	r2, r3
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	085b      	lsrs	r3, r3, #1
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	041b      	lsls	r3, r3, #16
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	061b      	lsls	r3, r3, #24
 8002a46:	431a      	orrs	r2, r3
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	071b      	lsls	r3, r3, #28
 8002a4c:	4943      	ldr	r1, [pc, #268]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a54:	4b41      	ldr	r3, [pc, #260]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a5a:	f023 021f 	bic.w	r2, r3, #31
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a62:	3b01      	subs	r3, #1
 8002a64:	493d      	ldr	r1, [pc, #244]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d029      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a80:	d124      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a82:	4b36      	ldr	r3, [pc, #216]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a88:	0c1b      	lsrs	r3, r3, #16
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	3301      	adds	r3, #1
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a94:	4b31      	ldr	r3, [pc, #196]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a9a:	0f1b      	lsrs	r3, r3, #28
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	019b      	lsls	r3, r3, #6
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	085b      	lsrs	r3, r3, #1
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	041b      	lsls	r3, r3, #16
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	061b      	lsls	r3, r3, #24
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	071b      	lsls	r3, r3, #28
 8002ac4:	4925      	ldr	r1, [pc, #148]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d016      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	019b      	lsls	r3, r3, #6
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	085b      	lsrs	r3, r3, #1
 8002aea:	3b01      	subs	r3, #1
 8002aec:	041b      	lsls	r3, r3, #16
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	061b      	lsls	r3, r3, #24
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	071b      	lsls	r3, r3, #28
 8002afe:	4917      	ldr	r1, [pc, #92]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b06:	4b16      	ldr	r3, [pc, #88]	@ (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b0c:	f7fd ff0c 	bl	8000928 <HAL_GetTick>
 8002b10:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b14:	f7fd ff08 	bl	8000928 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e09f      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b26:	4b0d      	ldr	r3, [pc, #52]	@ (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	f040 8095 	bne.w	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b40:	f7fd fef2 	bl	8000928 <HAL_GetTick>
 8002b44:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b46:	e00f      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002b48:	f7fd feee 	bl	8000928 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d908      	bls.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e085      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	42470068 	.word	0x42470068
 8002b64:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b68:	4b41      	ldr	r3, [pc, #260]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b74:	d0e8      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d009      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d02b      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d127      	bne.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002b9e:	4b34      	ldr	r3, [pc, #208]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba4:	0c1b      	lsrs	r3, r3, #16
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	3301      	adds	r3, #1
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	699a      	ldr	r2, [r3, #24]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	019b      	lsls	r3, r3, #6
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	085b      	lsrs	r3, r3, #1
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	041b      	lsls	r3, r3, #16
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bca:	061b      	lsls	r3, r3, #24
 8002bcc:	4928      	ldr	r1, [pc, #160]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002bd4:	4b26      	ldr	r3, [pc, #152]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bda:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be2:	3b01      	subs	r3, #1
 8002be4:	021b      	lsls	r3, r3, #8
 8002be6:	4922      	ldr	r1, [pc, #136]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d01d      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c02:	d118      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c04:	4b1a      	ldr	r3, [pc, #104]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c0a:	0e1b      	lsrs	r3, r3, #24
 8002c0c:	f003 030f 	and.w	r3, r3, #15
 8002c10:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	019b      	lsls	r3, r3, #6
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	085b      	lsrs	r3, r3, #1
 8002c24:	3b01      	subs	r3, #1
 8002c26:	041b      	lsls	r3, r3, #16
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	061b      	lsls	r3, r3, #24
 8002c2e:	4910      	ldr	r1, [pc, #64]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c36:	4b0f      	ldr	r3, [pc, #60]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c3c:	f7fd fe74 	bl	8000928 <HAL_GetTick>
 8002c40:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002c44:	f7fd fe70 	bl	8000928 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e007      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c56:	4b06      	ldr	r3, [pc, #24]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c62:	d1ef      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3730      	adds	r7, #48	@ 0x30
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800
 8002c74:	42470070 	.word	0x42470070

08002c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c7c:	b0ae      	sub	sp, #184	@ 0xb8
 8002c7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c9e:	4bcb      	ldr	r3, [pc, #812]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x354>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	2b0c      	cmp	r3, #12
 8002ca8:	f200 8206 	bhi.w	80030b8 <HAL_RCC_GetSysClockFreq+0x440>
 8002cac:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb2:	bf00      	nop
 8002cb4:	08002ce9 	.word	0x08002ce9
 8002cb8:	080030b9 	.word	0x080030b9
 8002cbc:	080030b9 	.word	0x080030b9
 8002cc0:	080030b9 	.word	0x080030b9
 8002cc4:	08002cf1 	.word	0x08002cf1
 8002cc8:	080030b9 	.word	0x080030b9
 8002ccc:	080030b9 	.word	0x080030b9
 8002cd0:	080030b9 	.word	0x080030b9
 8002cd4:	08002cf9 	.word	0x08002cf9
 8002cd8:	080030b9 	.word	0x080030b9
 8002cdc:	080030b9 	.word	0x080030b9
 8002ce0:	080030b9 	.word	0x080030b9
 8002ce4:	08002ee9 	.word	0x08002ee9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4bb9      	ldr	r3, [pc, #740]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002cea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002cee:	e1e7      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cf0:	4bb8      	ldr	r3, [pc, #736]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002cf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002cf6:	e1e3      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf8:	4bb4      	ldr	r3, [pc, #720]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x354>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d04:	4bb1      	ldr	r3, [pc, #708]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x354>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d071      	beq.n	8002df4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d10:	4bae      	ldr	r3, [pc, #696]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x354>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	099b      	lsrs	r3, r3, #6
 8002d16:	2200      	movs	r2, #0
 8002d18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d1c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002d20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002d32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d36:	4622      	mov	r2, r4
 8002d38:	462b      	mov	r3, r5
 8002d3a:	f04f 0000 	mov.w	r0, #0
 8002d3e:	f04f 0100 	mov.w	r1, #0
 8002d42:	0159      	lsls	r1, r3, #5
 8002d44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d48:	0150      	lsls	r0, r2, #5
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4621      	mov	r1, r4
 8002d50:	1a51      	subs	r1, r2, r1
 8002d52:	6439      	str	r1, [r7, #64]	@ 0x40
 8002d54:	4629      	mov	r1, r5
 8002d56:	eb63 0301 	sbc.w	r3, r3, r1
 8002d5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002d68:	4649      	mov	r1, r9
 8002d6a:	018b      	lsls	r3, r1, #6
 8002d6c:	4641      	mov	r1, r8
 8002d6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d72:	4641      	mov	r1, r8
 8002d74:	018a      	lsls	r2, r1, #6
 8002d76:	4641      	mov	r1, r8
 8002d78:	1a51      	subs	r1, r2, r1
 8002d7a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002d7c:	4649      	mov	r1, r9
 8002d7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002d90:	4649      	mov	r1, r9
 8002d92:	00cb      	lsls	r3, r1, #3
 8002d94:	4641      	mov	r1, r8
 8002d96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d9a:	4641      	mov	r1, r8
 8002d9c:	00ca      	lsls	r2, r1, #3
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4619      	mov	r1, r3
 8002da2:	4603      	mov	r3, r0
 8002da4:	4622      	mov	r2, r4
 8002da6:	189b      	adds	r3, r3, r2
 8002da8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002daa:	462b      	mov	r3, r5
 8002dac:	460a      	mov	r2, r1
 8002dae:	eb42 0303 	adc.w	r3, r2, r3
 8002db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	024b      	lsls	r3, r1, #9
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dca:	4621      	mov	r1, r4
 8002dcc:	024a      	lsls	r2, r1, #9
 8002dce:	4610      	mov	r0, r2
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ddc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002de0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002de4:	f7fd fa0e 	bl	8000204 <__aeabi_uldivmod>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4613      	mov	r3, r2
 8002dee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002df2:	e067      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df4:	4b75      	ldr	r3, [pc, #468]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x354>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	099b      	lsrs	r3, r3, #6
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e00:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002e04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e0e:	2300      	movs	r3, #0
 8002e10:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002e12:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002e16:	4622      	mov	r2, r4
 8002e18:	462b      	mov	r3, r5
 8002e1a:	f04f 0000 	mov.w	r0, #0
 8002e1e:	f04f 0100 	mov.w	r1, #0
 8002e22:	0159      	lsls	r1, r3, #5
 8002e24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e28:	0150      	lsls	r0, r2, #5
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4621      	mov	r1, r4
 8002e30:	1a51      	subs	r1, r2, r1
 8002e32:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002e34:	4629      	mov	r1, r5
 8002e36:	eb63 0301 	sbc.w	r3, r3, r1
 8002e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002e48:	4649      	mov	r1, r9
 8002e4a:	018b      	lsls	r3, r1, #6
 8002e4c:	4641      	mov	r1, r8
 8002e4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e52:	4641      	mov	r1, r8
 8002e54:	018a      	lsls	r2, r1, #6
 8002e56:	4641      	mov	r1, r8
 8002e58:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e5c:	4649      	mov	r1, r9
 8002e5e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e6e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e76:	4692      	mov	sl, r2
 8002e78:	469b      	mov	fp, r3
 8002e7a:	4623      	mov	r3, r4
 8002e7c:	eb1a 0303 	adds.w	r3, sl, r3
 8002e80:	623b      	str	r3, [r7, #32]
 8002e82:	462b      	mov	r3, r5
 8002e84:	eb4b 0303 	adc.w	r3, fp, r3
 8002e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	f04f 0300 	mov.w	r3, #0
 8002e92:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e96:	4629      	mov	r1, r5
 8002e98:	028b      	lsls	r3, r1, #10
 8002e9a:	4621      	mov	r1, r4
 8002e9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ea0:	4621      	mov	r1, r4
 8002ea2:	028a      	lsls	r2, r1, #10
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002eac:	2200      	movs	r2, #0
 8002eae:	673b      	str	r3, [r7, #112]	@ 0x70
 8002eb0:	677a      	str	r2, [r7, #116]	@ 0x74
 8002eb2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002eb6:	f7fd f9a5 	bl	8000204 <__aeabi_uldivmod>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ec4:	4b41      	ldr	r3, [pc, #260]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x354>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	0c1b      	lsrs	r3, r3, #16
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	3301      	adds	r3, #1
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002ed6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002eda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ee6:	e0eb      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ee8:	4b38      	ldr	r3, [pc, #224]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x354>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ef0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ef4:	4b35      	ldr	r3, [pc, #212]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x354>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d06b      	beq.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f00:	4b32      	ldr	r3, [pc, #200]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x354>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	099b      	lsrs	r3, r3, #6
 8002f06:	2200      	movs	r2, #0
 8002f08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f12:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f14:	2300      	movs	r3, #0
 8002f16:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f18:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002f1c:	4622      	mov	r2, r4
 8002f1e:	462b      	mov	r3, r5
 8002f20:	f04f 0000 	mov.w	r0, #0
 8002f24:	f04f 0100 	mov.w	r1, #0
 8002f28:	0159      	lsls	r1, r3, #5
 8002f2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f2e:	0150      	lsls	r0, r2, #5
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4621      	mov	r1, r4
 8002f36:	1a51      	subs	r1, r2, r1
 8002f38:	61b9      	str	r1, [r7, #24]
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	eb63 0301 	sbc.w	r3, r3, r1
 8002f40:	61fb      	str	r3, [r7, #28]
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002f4e:	4659      	mov	r1, fp
 8002f50:	018b      	lsls	r3, r1, #6
 8002f52:	4651      	mov	r1, sl
 8002f54:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f58:	4651      	mov	r1, sl
 8002f5a:	018a      	lsls	r2, r1, #6
 8002f5c:	4651      	mov	r1, sl
 8002f5e:	ebb2 0801 	subs.w	r8, r2, r1
 8002f62:	4659      	mov	r1, fp
 8002f64:	eb63 0901 	sbc.w	r9, r3, r1
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f7c:	4690      	mov	r8, r2
 8002f7e:	4699      	mov	r9, r3
 8002f80:	4623      	mov	r3, r4
 8002f82:	eb18 0303 	adds.w	r3, r8, r3
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	462b      	mov	r3, r5
 8002f8a:	eb49 0303 	adc.w	r3, r9, r3
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f9c:	4629      	mov	r1, r5
 8002f9e:	024b      	lsls	r3, r1, #9
 8002fa0:	4621      	mov	r1, r4
 8002fa2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fa6:	4621      	mov	r1, r4
 8002fa8:	024a      	lsls	r2, r1, #9
 8002faa:	4610      	mov	r0, r2
 8002fac:	4619      	mov	r1, r3
 8002fae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002fb6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002fb8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002fbc:	f7fd f922 	bl	8000204 <__aeabi_uldivmod>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fca:	e065      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x420>
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	00f42400 	.word	0x00f42400
 8002fd4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fd8:	4b3d      	ldr	r3, [pc, #244]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	099b      	lsrs	r3, r3, #6
 8002fde:	2200      	movs	r2, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fe8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fea:	2300      	movs	r3, #0
 8002fec:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002ff2:	4642      	mov	r2, r8
 8002ff4:	464b      	mov	r3, r9
 8002ff6:	f04f 0000 	mov.w	r0, #0
 8002ffa:	f04f 0100 	mov.w	r1, #0
 8002ffe:	0159      	lsls	r1, r3, #5
 8003000:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003004:	0150      	lsls	r0, r2, #5
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4641      	mov	r1, r8
 800300c:	1a51      	subs	r1, r2, r1
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	4649      	mov	r1, r9
 8003012:	eb63 0301 	sbc.w	r3, r3, r1
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003024:	4659      	mov	r1, fp
 8003026:	018b      	lsls	r3, r1, #6
 8003028:	4651      	mov	r1, sl
 800302a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800302e:	4651      	mov	r1, sl
 8003030:	018a      	lsls	r2, r1, #6
 8003032:	4651      	mov	r1, sl
 8003034:	1a54      	subs	r4, r2, r1
 8003036:	4659      	mov	r1, fp
 8003038:	eb63 0501 	sbc.w	r5, r3, r1
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	00eb      	lsls	r3, r5, #3
 8003046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800304a:	00e2      	lsls	r2, r4, #3
 800304c:	4614      	mov	r4, r2
 800304e:	461d      	mov	r5, r3
 8003050:	4643      	mov	r3, r8
 8003052:	18e3      	adds	r3, r4, r3
 8003054:	603b      	str	r3, [r7, #0]
 8003056:	464b      	mov	r3, r9
 8003058:	eb45 0303 	adc.w	r3, r5, r3
 800305c:	607b      	str	r3, [r7, #4]
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	e9d7 4500 	ldrd	r4, r5, [r7]
 800306a:	4629      	mov	r1, r5
 800306c:	028b      	lsls	r3, r1, #10
 800306e:	4621      	mov	r1, r4
 8003070:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003074:	4621      	mov	r1, r4
 8003076:	028a      	lsls	r2, r1, #10
 8003078:	4610      	mov	r0, r2
 800307a:	4619      	mov	r1, r3
 800307c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003080:	2200      	movs	r2, #0
 8003082:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003084:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003086:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800308a:	f7fd f8bb 	bl	8000204 <__aeabi_uldivmod>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4613      	mov	r3, r2
 8003094:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003098:	4b0d      	ldr	r3, [pc, #52]	@ (80030d0 <HAL_RCC_GetSysClockFreq+0x458>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	0f1b      	lsrs	r3, r3, #28
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80030a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80030aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80030b6:	e003      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030b8:	4b06      	ldr	r3, [pc, #24]	@ (80030d4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80030ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80030be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	37b8      	adds	r7, #184	@ 0xb8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ce:	bf00      	nop
 80030d0:	40023800 	.word	0x40023800
 80030d4:	00f42400 	.word	0x00f42400

080030d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e28d      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 8083 	beq.w	80031fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030f8:	4b94      	ldr	r3, [pc, #592]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 030c 	and.w	r3, r3, #12
 8003100:	2b04      	cmp	r3, #4
 8003102:	d019      	beq.n	8003138 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003104:	4b91      	ldr	r3, [pc, #580]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800310c:	2b08      	cmp	r3, #8
 800310e:	d106      	bne.n	800311e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003110:	4b8e      	ldr	r3, [pc, #568]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003118:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800311c:	d00c      	beq.n	8003138 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800311e:	4b8b      	ldr	r3, [pc, #556]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003126:	2b0c      	cmp	r3, #12
 8003128:	d112      	bne.n	8003150 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800312a:	4b88      	ldr	r3, [pc, #544]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003132:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003136:	d10b      	bne.n	8003150 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003138:	4b84      	ldr	r3, [pc, #528]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d05b      	beq.n	80031fc <HAL_RCC_OscConfig+0x124>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d157      	bne.n	80031fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e25a      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003158:	d106      	bne.n	8003168 <HAL_RCC_OscConfig+0x90>
 800315a:	4b7c      	ldr	r3, [pc, #496]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a7b      	ldr	r2, [pc, #492]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	e01d      	b.n	80031a4 <HAL_RCC_OscConfig+0xcc>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003170:	d10c      	bne.n	800318c <HAL_RCC_OscConfig+0xb4>
 8003172:	4b76      	ldr	r3, [pc, #472]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a75      	ldr	r2, [pc, #468]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 8003178:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	4b73      	ldr	r3, [pc, #460]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a72      	ldr	r2, [pc, #456]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 8003184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	e00b      	b.n	80031a4 <HAL_RCC_OscConfig+0xcc>
 800318c:	4b6f      	ldr	r3, [pc, #444]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a6e      	ldr	r2, [pc, #440]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 8003192:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003196:	6013      	str	r3, [r2, #0]
 8003198:	4b6c      	ldr	r3, [pc, #432]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a6b      	ldr	r2, [pc, #428]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 800319e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d013      	beq.n	80031d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fd fbbc 	bl	8000928 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b4:	f7fd fbb8 	bl	8000928 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	@ 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e21f      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c6:	4b61      	ldr	r3, [pc, #388]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCC_OscConfig+0xdc>
 80031d2:	e014      	b.n	80031fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d4:	f7fd fba8 	bl	8000928 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031dc:	f7fd fba4 	bl	8000928 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b64      	cmp	r3, #100	@ 0x64
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e20b      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ee:	4b57      	ldr	r3, [pc, #348]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x104>
 80031fa:	e000      	b.n	80031fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d06f      	beq.n	80032ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800320a:	4b50      	ldr	r3, [pc, #320]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
 8003212:	2b00      	cmp	r3, #0
 8003214:	d017      	beq.n	8003246 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003216:	4b4d      	ldr	r3, [pc, #308]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800321e:	2b08      	cmp	r3, #8
 8003220:	d105      	bne.n	800322e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003222:	4b4a      	ldr	r3, [pc, #296]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00b      	beq.n	8003246 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800322e:	4b47      	ldr	r3, [pc, #284]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003236:	2b0c      	cmp	r3, #12
 8003238:	d11c      	bne.n	8003274 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800323a:	4b44      	ldr	r3, [pc, #272]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d116      	bne.n	8003274 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003246:	4b41      	ldr	r3, [pc, #260]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d005      	beq.n	800325e <HAL_RCC_OscConfig+0x186>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d001      	beq.n	800325e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e1d3      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800325e:	4b3b      	ldr	r3, [pc, #236]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4937      	ldr	r1, [pc, #220]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 800326e:	4313      	orrs	r3, r2
 8003270:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003272:	e03a      	b.n	80032ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d020      	beq.n	80032be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800327c:	4b34      	ldr	r3, [pc, #208]	@ (8003350 <HAL_RCC_OscConfig+0x278>)
 800327e:	2201      	movs	r2, #1
 8003280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003282:	f7fd fb51 	bl	8000928 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800328a:	f7fd fb4d 	bl	8000928 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e1b4      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329c:	4b2b      	ldr	r3, [pc, #172]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f0      	beq.n	800328a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a8:	4b28      	ldr	r3, [pc, #160]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4925      	ldr	r1, [pc, #148]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	600b      	str	r3, [r1, #0]
 80032bc:	e015      	b.n	80032ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032be:	4b24      	ldr	r3, [pc, #144]	@ (8003350 <HAL_RCC_OscConfig+0x278>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fd fb30 	bl	8000928 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032cc:	f7fd fb2c 	bl	8000928 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e193      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032de:	4b1b      	ldr	r3, [pc, #108]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d036      	beq.n	8003364 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d016      	beq.n	800332c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032fe:	4b15      	ldr	r3, [pc, #84]	@ (8003354 <HAL_RCC_OscConfig+0x27c>)
 8003300:	2201      	movs	r2, #1
 8003302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003304:	f7fd fb10 	bl	8000928 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800330c:	f7fd fb0c 	bl	8000928 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e173      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331e:	4b0b      	ldr	r3, [pc, #44]	@ (800334c <HAL_RCC_OscConfig+0x274>)
 8003320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCC_OscConfig+0x234>
 800332a:	e01b      	b.n	8003364 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800332c:	4b09      	ldr	r3, [pc, #36]	@ (8003354 <HAL_RCC_OscConfig+0x27c>)
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003332:	f7fd faf9 	bl	8000928 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003338:	e00e      	b.n	8003358 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800333a:	f7fd faf5 	bl	8000928 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d907      	bls.n	8003358 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e15c      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
 800334c:	40023800 	.word	0x40023800
 8003350:	42470000 	.word	0x42470000
 8003354:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003358:	4b8a      	ldr	r3, [pc, #552]	@ (8003584 <HAL_RCC_OscConfig+0x4ac>)
 800335a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1ea      	bne.n	800333a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 8097 	beq.w	80034a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003372:	2300      	movs	r3, #0
 8003374:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003376:	4b83      	ldr	r3, [pc, #524]	@ (8003584 <HAL_RCC_OscConfig+0x4ac>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10f      	bne.n	80033a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	4b7f      	ldr	r3, [pc, #508]	@ (8003584 <HAL_RCC_OscConfig+0x4ac>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	4a7e      	ldr	r2, [pc, #504]	@ (8003584 <HAL_RCC_OscConfig+0x4ac>)
 800338c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003390:	6413      	str	r3, [r2, #64]	@ 0x40
 8003392:	4b7c      	ldr	r3, [pc, #496]	@ (8003584 <HAL_RCC_OscConfig+0x4ac>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800339a:	60bb      	str	r3, [r7, #8]
 800339c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800339e:	2301      	movs	r3, #1
 80033a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a2:	4b79      	ldr	r3, [pc, #484]	@ (8003588 <HAL_RCC_OscConfig+0x4b0>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d118      	bne.n	80033e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ae:	4b76      	ldr	r3, [pc, #472]	@ (8003588 <HAL_RCC_OscConfig+0x4b0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a75      	ldr	r2, [pc, #468]	@ (8003588 <HAL_RCC_OscConfig+0x4b0>)
 80033b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ba:	f7fd fab5 	bl	8000928 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c2:	f7fd fab1 	bl	8000928 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e118      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d4:	4b6c      	ldr	r3, [pc, #432]	@ (8003588 <HAL_RCC_OscConfig+0x4b0>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d106      	bne.n	80033f6 <HAL_RCC_OscConfig+0x31e>
 80033e8:	4b66      	ldr	r3, [pc, #408]	@ (8003584 <HAL_RCC_OscConfig+0x4ac>)
 80033ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ec:	4a65      	ldr	r2, [pc, #404]	@ (8003584 <HAL_RCC_OscConfig+0x4ac>)
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80033f4:	e01c      	b.n	8003430 <HAL_RCC_OscConfig+0x358>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	2b05      	cmp	r3, #5
 80033fc:	d10c      	bne.n	8003418 <HAL_RCC_OscConfig+0x340>
 80033fe:	4b61      	ldr	r3, [pc, #388]	@ (8003584 <HAL_RCC_OscConfig+0x4ac>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003402:	4a60      	ldr	r2, [pc, #384]	@ (8003584 <HAL_RCC_OscConfig+0x4ac>)
 8003404:	f043 0304 	orr.w	r3, r3, #4
 8003408:	6713      	str	r3, [r2, #112]	@ 0x70
 800340a:	4b5e      	ldr	r3, [pc, #376]	@ (8003584 <HAL_RCC_OscConfig+0x4ac>)
 800340c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800340e:	4a5d      	ldr	r2, [pc, #372]	@ (8003584 <HAL_RCC_OscConfig+0x4ac>)
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	6713      	str	r3, [r2, #112]	@ 0x70
 8003416:	e00b      	b.n	8003430 <HAL_RCC_OscConfig+0x358>
 8003418:	4b5a      	ldr	r3, [pc, #360]	@ (8003584 <HAL_RCC_OscConfig+0x4ac>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800341c:	4a59      	ldr	r2, [pc, #356]	@ (8003584 <HAL_RCC_OscConfig+0x4ac>)
 800341e:	f023 0301 	bic.w	r3, r3, #1
 8003422:	6713      	str	r3, [r2, #112]	@ 0x70
 8003424:	4b57      	ldr	r3, [pc, #348]	@ (8003584 <HAL_RCC_OscConfig+0x4ac>)
 8003426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003428:	4a56      	ldr	r2, [pc, #344]	@ (8003584 <HAL_RCC_OscConfig+0x4ac>)
 800342a:	f023 0304 	bic.w	r3, r3, #4
 800342e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d015      	beq.n	8003464 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003438:	f7fd fa76 	bl	8000928 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800343e:	e00a      	b.n	8003456 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003440:	f7fd fa72 	bl	8000928 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800344e:	4293      	cmp	r3, r2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e0d7      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003456:	4b4b      	ldr	r3, [pc, #300]	@ (8003584 <HAL_RCC_OscConfig+0x4ac>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0ee      	beq.n	8003440 <HAL_RCC_OscConfig+0x368>
 8003462:	e014      	b.n	800348e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003464:	f7fd fa60 	bl	8000928 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800346a:	e00a      	b.n	8003482 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800346c:	f7fd fa5c 	bl	8000928 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e0c1      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003482:	4b40      	ldr	r3, [pc, #256]	@ (8003584 <HAL_RCC_OscConfig+0x4ac>)
 8003484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1ee      	bne.n	800346c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800348e:	7dfb      	ldrb	r3, [r7, #23]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d105      	bne.n	80034a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003494:	4b3b      	ldr	r3, [pc, #236]	@ (8003584 <HAL_RCC_OscConfig+0x4ac>)
 8003496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003498:	4a3a      	ldr	r2, [pc, #232]	@ (8003584 <HAL_RCC_OscConfig+0x4ac>)
 800349a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800349e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80ad 	beq.w	8003604 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034aa:	4b36      	ldr	r3, [pc, #216]	@ (8003584 <HAL_RCC_OscConfig+0x4ac>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d060      	beq.n	8003578 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d145      	bne.n	800354a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034be:	4b33      	ldr	r3, [pc, #204]	@ (800358c <HAL_RCC_OscConfig+0x4b4>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fd fa30 	bl	8000928 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034cc:	f7fd fa2c 	bl	8000928 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e093      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034de:	4b29      	ldr	r3, [pc, #164]	@ (8003584 <HAL_RCC_OscConfig+0x4ac>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69da      	ldr	r2, [r3, #28]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f8:	019b      	lsls	r3, r3, #6
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003500:	085b      	lsrs	r3, r3, #1
 8003502:	3b01      	subs	r3, #1
 8003504:	041b      	lsls	r3, r3, #16
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350c:	061b      	lsls	r3, r3, #24
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003514:	071b      	lsls	r3, r3, #28
 8003516:	491b      	ldr	r1, [pc, #108]	@ (8003584 <HAL_RCC_OscConfig+0x4ac>)
 8003518:	4313      	orrs	r3, r2
 800351a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800351c:	4b1b      	ldr	r3, [pc, #108]	@ (800358c <HAL_RCC_OscConfig+0x4b4>)
 800351e:	2201      	movs	r2, #1
 8003520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003522:	f7fd fa01 	bl	8000928 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800352a:	f7fd f9fd 	bl	8000928 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e064      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800353c:	4b11      	ldr	r3, [pc, #68]	@ (8003584 <HAL_RCC_OscConfig+0x4ac>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f0      	beq.n	800352a <HAL_RCC_OscConfig+0x452>
 8003548:	e05c      	b.n	8003604 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800354a:	4b10      	ldr	r3, [pc, #64]	@ (800358c <HAL_RCC_OscConfig+0x4b4>)
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003550:	f7fd f9ea 	bl	8000928 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003558:	f7fd f9e6 	bl	8000928 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e04d      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356a:	4b06      	ldr	r3, [pc, #24]	@ (8003584 <HAL_RCC_OscConfig+0x4ac>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0x480>
 8003576:	e045      	b.n	8003604 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d107      	bne.n	8003590 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e040      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
 8003584:	40023800 	.word	0x40023800
 8003588:	40007000 	.word	0x40007000
 800358c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003590:	4b1f      	ldr	r3, [pc, #124]	@ (8003610 <HAL_RCC_OscConfig+0x538>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d030      	beq.n	8003600 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d129      	bne.n	8003600 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d122      	bne.n	8003600 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035c0:	4013      	ands	r3, r2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d119      	bne.n	8003600 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d6:	085b      	lsrs	r3, r3, #1
 80035d8:	3b01      	subs	r3, #1
 80035da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035dc:	429a      	cmp	r2, r3
 80035de:	d10f      	bne.n	8003600 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d107      	bne.n	8003600 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d001      	beq.n	8003604 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e000      	b.n	8003606 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40023800 	.word	0x40023800

08003614 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003614:	b084      	sub	sp, #16
 8003616:	b580      	push	{r7, lr}
 8003618:	b084      	sub	sp, #16
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	f107 001c 	add.w	r0, r7, #28
 8003622:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003626:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800362a:	2b01      	cmp	r3, #1
 800362c:	d123      	bne.n	8003676 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003632:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003642:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003656:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800365a:	2b01      	cmp	r3, #1
 800365c:	d105      	bne.n	800366a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f001 fadc 	bl	8004c28 <USB_CoreReset>
 8003670:	4603      	mov	r3, r0
 8003672:	73fb      	strb	r3, [r7, #15]
 8003674:	e01b      	b.n	80036ae <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f001 fad0 	bl	8004c28 <USB_CoreReset>
 8003688:	4603      	mov	r3, r0
 800368a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800368c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003690:	2b00      	cmp	r3, #0
 8003692:	d106      	bne.n	80036a2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003698:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	639a      	str	r2, [r3, #56]	@ 0x38
 80036a0:	e005      	b.n	80036ae <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80036ae:	7fbb      	ldrb	r3, [r7, #30]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d10b      	bne.n	80036cc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f043 0206 	orr.w	r2, r3, #6
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f043 0220 	orr.w	r2, r3, #32
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036d8:	b004      	add	sp, #16
 80036da:	4770      	bx	lr

080036dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	4613      	mov	r3, r2
 80036e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80036ea:	79fb      	ldrb	r3, [r7, #7]
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d165      	bne.n	80037bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4a41      	ldr	r2, [pc, #260]	@ (80037f8 <USB_SetTurnaroundTime+0x11c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d906      	bls.n	8003706 <USB_SetTurnaroundTime+0x2a>
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4a40      	ldr	r2, [pc, #256]	@ (80037fc <USB_SetTurnaroundTime+0x120>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d202      	bcs.n	8003706 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003700:	230f      	movs	r3, #15
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	e062      	b.n	80037cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	4a3c      	ldr	r2, [pc, #240]	@ (80037fc <USB_SetTurnaroundTime+0x120>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d306      	bcc.n	800371c <USB_SetTurnaroundTime+0x40>
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4a3b      	ldr	r2, [pc, #236]	@ (8003800 <USB_SetTurnaroundTime+0x124>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d202      	bcs.n	800371c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003716:	230e      	movs	r3, #14
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	e057      	b.n	80037cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	4a38      	ldr	r2, [pc, #224]	@ (8003800 <USB_SetTurnaroundTime+0x124>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d306      	bcc.n	8003732 <USB_SetTurnaroundTime+0x56>
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	4a37      	ldr	r2, [pc, #220]	@ (8003804 <USB_SetTurnaroundTime+0x128>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d202      	bcs.n	8003732 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800372c:	230d      	movs	r3, #13
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	e04c      	b.n	80037cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	4a33      	ldr	r2, [pc, #204]	@ (8003804 <USB_SetTurnaroundTime+0x128>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d306      	bcc.n	8003748 <USB_SetTurnaroundTime+0x6c>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	4a32      	ldr	r2, [pc, #200]	@ (8003808 <USB_SetTurnaroundTime+0x12c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d802      	bhi.n	8003748 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003742:	230c      	movs	r3, #12
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	e041      	b.n	80037cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4a2f      	ldr	r2, [pc, #188]	@ (8003808 <USB_SetTurnaroundTime+0x12c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d906      	bls.n	800375e <USB_SetTurnaroundTime+0x82>
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4a2e      	ldr	r2, [pc, #184]	@ (800380c <USB_SetTurnaroundTime+0x130>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d802      	bhi.n	800375e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003758:	230b      	movs	r3, #11
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	e036      	b.n	80037cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	4a2a      	ldr	r2, [pc, #168]	@ (800380c <USB_SetTurnaroundTime+0x130>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d906      	bls.n	8003774 <USB_SetTurnaroundTime+0x98>
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	4a29      	ldr	r2, [pc, #164]	@ (8003810 <USB_SetTurnaroundTime+0x134>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d802      	bhi.n	8003774 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800376e:	230a      	movs	r3, #10
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	e02b      	b.n	80037cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4a26      	ldr	r2, [pc, #152]	@ (8003810 <USB_SetTurnaroundTime+0x134>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d906      	bls.n	800378a <USB_SetTurnaroundTime+0xae>
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4a25      	ldr	r2, [pc, #148]	@ (8003814 <USB_SetTurnaroundTime+0x138>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d202      	bcs.n	800378a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003784:	2309      	movs	r3, #9
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	e020      	b.n	80037cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	4a21      	ldr	r2, [pc, #132]	@ (8003814 <USB_SetTurnaroundTime+0x138>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d306      	bcc.n	80037a0 <USB_SetTurnaroundTime+0xc4>
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	4a20      	ldr	r2, [pc, #128]	@ (8003818 <USB_SetTurnaroundTime+0x13c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d802      	bhi.n	80037a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800379a:	2308      	movs	r3, #8
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	e015      	b.n	80037cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003818 <USB_SetTurnaroundTime+0x13c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d906      	bls.n	80037b6 <USB_SetTurnaroundTime+0xda>
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	4a1c      	ldr	r2, [pc, #112]	@ (800381c <USB_SetTurnaroundTime+0x140>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d202      	bcs.n	80037b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80037b0:	2307      	movs	r3, #7
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	e00a      	b.n	80037cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80037b6:	2306      	movs	r3, #6
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	e007      	b.n	80037cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d102      	bne.n	80037c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80037c2:	2309      	movs	r3, #9
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	e001      	b.n	80037cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80037c8:	2309      	movs	r3, #9
 80037ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	029b      	lsls	r3, r3, #10
 80037e0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80037e4:	431a      	orrs	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	371c      	adds	r7, #28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	00d8acbf 	.word	0x00d8acbf
 80037fc:	00e4e1c0 	.word	0x00e4e1c0
 8003800:	00f42400 	.word	0x00f42400
 8003804:	01067380 	.word	0x01067380
 8003808:	011a499f 	.word	0x011a499f
 800380c:	01312cff 	.word	0x01312cff
 8003810:	014ca43f 	.word	0x014ca43f
 8003814:	016e3600 	.word	0x016e3600
 8003818:	01a6ab1f 	.word	0x01a6ab1f
 800381c:	01e84800 	.word	0x01e84800

08003820 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f043 0201 	orr.w	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f023 0201 	bic.w	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003880:	78fb      	ldrb	r3, [r7, #3]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d115      	bne.n	80038b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003892:	200a      	movs	r0, #10
 8003894:	f7fd f854 	bl	8000940 <HAL_Delay>
      ms += 10U;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	330a      	adds	r3, #10
 800389c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f001 f933 	bl	8004b0a <USB_GetMode>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d01e      	beq.n	80038e8 <USB_SetCurrentMode+0x84>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2bc7      	cmp	r3, #199	@ 0xc7
 80038ae:	d9f0      	bls.n	8003892 <USB_SetCurrentMode+0x2e>
 80038b0:	e01a      	b.n	80038e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80038b2:	78fb      	ldrb	r3, [r7, #3]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d115      	bne.n	80038e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80038c4:	200a      	movs	r0, #10
 80038c6:	f7fd f83b 	bl	8000940 <HAL_Delay>
      ms += 10U;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	330a      	adds	r3, #10
 80038ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f001 f91a 	bl	8004b0a <USB_GetMode>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <USB_SetCurrentMode+0x84>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2bc7      	cmp	r3, #199	@ 0xc7
 80038e0:	d9f0      	bls.n	80038c4 <USB_SetCurrentMode+0x60>
 80038e2:	e001      	b.n	80038e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e005      	b.n	80038f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2bc8      	cmp	r3, #200	@ 0xc8
 80038ec:	d101      	bne.n	80038f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038fc:	b084      	sub	sp, #16
 80038fe:	b580      	push	{r7, lr}
 8003900:	b086      	sub	sp, #24
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800390a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003916:	2300      	movs	r3, #0
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	e009      	b.n	8003930 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	3340      	adds	r3, #64	@ 0x40
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	2200      	movs	r2, #0
 8003928:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	3301      	adds	r3, #1
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	2b0e      	cmp	r3, #14
 8003934:	d9f2      	bls.n	800391c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003936:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800393a:	2b00      	cmp	r3, #0
 800393c:	d11c      	bne.n	8003978 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800394c:	f043 0302 	orr.w	r3, r3, #2
 8003950:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003956:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	e005      	b.n	8003984 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800397c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800398a:	461a      	mov	r2, r3
 800398c:	2300      	movs	r3, #0
 800398e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003990:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003994:	2b01      	cmp	r3, #1
 8003996:	d10d      	bne.n	80039b4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003998:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800399c:	2b00      	cmp	r3, #0
 800399e:	d104      	bne.n	80039aa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80039a0:	2100      	movs	r1, #0
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f968 	bl	8003c78 <USB_SetDevSpeed>
 80039a8:	e008      	b.n	80039bc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80039aa:	2101      	movs	r1, #1
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f963 	bl	8003c78 <USB_SetDevSpeed>
 80039b2:	e003      	b.n	80039bc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80039b4:	2103      	movs	r1, #3
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f95e 	bl	8003c78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80039bc:	2110      	movs	r1, #16
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f8fa 	bl	8003bb8 <USB_FlushTxFifo>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f924 	bl	8003c1c <USB_FlushRxFifo>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039e4:	461a      	mov	r2, r3
 80039e6:	2300      	movs	r3, #0
 80039e8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039f0:	461a      	mov	r2, r3
 80039f2:	2300      	movs	r3, #0
 80039f4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039fc:	461a      	mov	r2, r3
 80039fe:	2300      	movs	r3, #0
 8003a00:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a02:	2300      	movs	r3, #0
 8003a04:	613b      	str	r3, [r7, #16]
 8003a06:	e043      	b.n	8003a90 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a1e:	d118      	bne.n	8003a52 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10a      	bne.n	8003a3c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a32:	461a      	mov	r2, r3
 8003a34:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	e013      	b.n	8003a64 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a48:	461a      	mov	r2, r3
 8003a4a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	e008      	b.n	8003a64 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a5e:	461a      	mov	r2, r3
 8003a60:	2300      	movs	r3, #0
 8003a62:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a70:	461a      	mov	r2, r3
 8003a72:	2300      	movs	r3, #0
 8003a74:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	015a      	lsls	r2, r3, #5
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a82:	461a      	mov	r2, r3
 8003a84:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	613b      	str	r3, [r7, #16]
 8003a90:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003a94:	461a      	mov	r2, r3
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d3b5      	bcc.n	8003a08 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	e043      	b.n	8003b2a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ab8:	d118      	bne.n	8003aec <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10a      	bne.n	8003ad6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003acc:	461a      	mov	r2, r3
 8003ace:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	e013      	b.n	8003afe <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	e008      	b.n	8003afe <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003af8:	461a      	mov	r2, r3
 8003afa:	2300      	movs	r3, #0
 8003afc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	3301      	adds	r3, #1
 8003b28:	613b      	str	r3, [r7, #16]
 8003b2a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003b2e:	461a      	mov	r2, r3
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d3b5      	bcc.n	8003aa2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b48:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003b56:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d105      	bne.n	8003b6c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	f043 0210 	orr.w	r2, r3, #16
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	699a      	ldr	r2, [r3, #24]
 8003b70:	4b10      	ldr	r3, [pc, #64]	@ (8003bb4 <USB_DevInit+0x2b8>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b78:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	f043 0208 	orr.w	r2, r3, #8
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b8c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d107      	bne.n	8003ba4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b9c:	f043 0304 	orr.w	r3, r3, #4
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bb0:	b004      	add	sp, #16
 8003bb2:	4770      	bx	lr
 8003bb4:	803c3800 	.word	0x803c3800

08003bb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003bd2:	d901      	bls.n	8003bd8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e01b      	b.n	8003c10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	daf2      	bge.n	8003bc6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	019b      	lsls	r3, r3, #6
 8003be8:	f043 0220 	orr.w	r2, r3, #32
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003bfc:	d901      	bls.n	8003c02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e006      	b.n	8003c10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0320 	and.w	r3, r3, #32
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	d0f0      	beq.n	8003bf0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c34:	d901      	bls.n	8003c3a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e018      	b.n	8003c6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	daf2      	bge.n	8003c28 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2210      	movs	r2, #16
 8003c4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c58:	d901      	bls.n	8003c5e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e006      	b.n	8003c6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0310 	and.w	r3, r3, #16
 8003c66:	2b10      	cmp	r3, #16
 8003c68:	d0f0      	beq.n	8003c4c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	68f9      	ldr	r1, [r7, #12]
 8003c94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b087      	sub	sp, #28
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 0306 	and.w	r3, r3, #6
 8003cc2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d102      	bne.n	8003cd0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	75fb      	strb	r3, [r7, #23]
 8003cce:	e00a      	b.n	8003ce6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d002      	beq.n	8003cdc <USB_GetDevSpeed+0x32>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b06      	cmp	r3, #6
 8003cda:	d102      	bne.n	8003ce2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003cdc:	2302      	movs	r3, #2
 8003cde:	75fb      	strb	r3, [r7, #23]
 8003ce0:	e001      	b.n	8003ce6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003ce2:	230f      	movs	r3, #15
 8003ce4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	371c      	adds	r7, #28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	785b      	ldrb	r3, [r3, #1]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d13a      	bne.n	8003d86 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d16:	69da      	ldr	r2, [r3, #28]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	f003 030f 	and.w	r3, r3, #15
 8003d20:	2101      	movs	r1, #1
 8003d22:	fa01 f303 	lsl.w	r3, r1, r3
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	68f9      	ldr	r1, [r7, #12]
 8003d2a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d155      	bne.n	8003df4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	791b      	ldrb	r3, [r3, #4]
 8003d62:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d64:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	059b      	lsls	r3, r3, #22
 8003d6a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	0151      	lsls	r1, r2, #5
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	440a      	add	r2, r1
 8003d76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d82:	6013      	str	r3, [r2, #0]
 8003d84:	e036      	b.n	8003df4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d8c:	69da      	ldr	r2, [r3, #28]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	2101      	movs	r1, #1
 8003d98:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9c:	041b      	lsls	r3, r3, #16
 8003d9e:	68f9      	ldr	r1, [r7, #12]
 8003da0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003da4:	4313      	orrs	r3, r2
 8003da6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d11a      	bne.n	8003df4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	015a      	lsls	r2, r3, #5
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	791b      	ldrb	r3, [r3, #4]
 8003dd8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003dda:	430b      	orrs	r3, r1
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	0151      	lsls	r1, r2, #5
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	440a      	add	r2, r1
 8003de6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003dea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003df2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
	...

08003e04 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	785b      	ldrb	r3, [r3, #1]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d161      	bne.n	8003ee4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e36:	d11f      	bne.n	8003e78 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	0151      	lsls	r1, r2, #5
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	440a      	add	r2, r1
 8003e4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e52:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e56:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	0151      	lsls	r1, r2, #5
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	440a      	add	r2, r1
 8003e6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e72:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	f003 030f 	and.w	r3, r3, #15
 8003e88:	2101      	movs	r1, #1
 8003e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	43db      	mvns	r3, r3
 8003e92:	68f9      	ldr	r1, [r7, #12]
 8003e94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e98:	4013      	ands	r3, r2
 8003e9a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ea2:	69da      	ldr	r2, [r3, #28]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	f003 030f 	and.w	r3, r3, #15
 8003eac:	2101      	movs	r1, #1
 8003eae:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	68f9      	ldr	r1, [r7, #12]
 8003eb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	0159      	lsls	r1, r3, #5
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	440b      	add	r3, r1
 8003ed6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eda:	4619      	mov	r1, r3
 8003edc:	4b35      	ldr	r3, [pc, #212]	@ (8003fb4 <USB_DeactivateEndpoint+0x1b0>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	600b      	str	r3, [r1, #0]
 8003ee2:	e060      	b.n	8003fa6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003efa:	d11f      	bne.n	8003f3c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	0151      	lsls	r1, r2, #5
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	440a      	add	r2, r1
 8003f12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f16:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003f1a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	0151      	lsls	r1, r2, #5
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	440a      	add	r2, r1
 8003f32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f36:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003f3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	f003 030f 	and.w	r3, r3, #15
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f52:	041b      	lsls	r3, r3, #16
 8003f54:	43db      	mvns	r3, r3
 8003f56:	68f9      	ldr	r1, [r7, #12]
 8003f58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f66:	69da      	ldr	r2, [r3, #28]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	f003 030f 	and.w	r3, r3, #15
 8003f70:	2101      	movs	r1, #1
 8003f72:	fa01 f303 	lsl.w	r3, r1, r3
 8003f76:	041b      	lsls	r3, r3, #16
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	68f9      	ldr	r1, [r7, #12]
 8003f7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f80:	4013      	ands	r3, r2
 8003f82:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	0159      	lsls	r1, r3, #5
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	440b      	add	r3, r1
 8003f9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4b05      	ldr	r3, [pc, #20]	@ (8003fb8 <USB_DeactivateEndpoint+0x1b4>)
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	ec337800 	.word	0xec337800
 8003fb8:	eff37800 	.word	0xeff37800

08003fbc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08a      	sub	sp, #40	@ 0x28
 8003fc0:	af02      	add	r7, sp, #8
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	785b      	ldrb	r3, [r3, #1]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	f040 817a 	bne.w	80042d2 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d132      	bne.n	800404c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	0151      	lsls	r1, r2, #5
 8003ff8:	69fa      	ldr	r2, [r7, #28]
 8003ffa:	440a      	add	r2, r1
 8003ffc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004000:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004004:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004008:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	4413      	add	r3, r2
 8004012:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	0151      	lsls	r1, r2, #5
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	440a      	add	r2, r1
 8004020:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004024:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004028:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	4413      	add	r3, r2
 8004032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	0151      	lsls	r1, r2, #5
 800403c:	69fa      	ldr	r2, [r7, #28]
 800403e:	440a      	add	r2, r1
 8004040:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004044:	0cdb      	lsrs	r3, r3, #19
 8004046:	04db      	lsls	r3, r3, #19
 8004048:	6113      	str	r3, [r2, #16]
 800404a:	e092      	b.n	8004172 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	4413      	add	r3, r2
 8004054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	0151      	lsls	r1, r2, #5
 800405e:	69fa      	ldr	r2, [r7, #28]
 8004060:	440a      	add	r2, r1
 8004062:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004066:	0cdb      	lsrs	r3, r3, #19
 8004068:	04db      	lsls	r3, r3, #19
 800406a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	4413      	add	r3, r2
 8004074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	0151      	lsls	r1, r2, #5
 800407e:	69fa      	ldr	r2, [r7, #28]
 8004080:	440a      	add	r2, r1
 8004082:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004086:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800408a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800408e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d11a      	bne.n	80040cc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	691a      	ldr	r2, [r3, #16]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d903      	bls.n	80040aa <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	0151      	lsls	r1, r2, #5
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	440a      	add	r2, r1
 80040c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80040c8:	6113      	str	r3, [r2, #16]
 80040ca:	e01b      	b.n	8004104 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040d8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	6919      	ldr	r1, [r3, #16]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	440b      	add	r3, r1
 80040e4:	1e59      	subs	r1, r3, #1
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80040ee:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80040f0:	4ba2      	ldr	r3, [pc, #648]	@ (800437c <USB_EPStartXfer+0x3c0>)
 80040f2:	400b      	ands	r3, r1
 80040f4:	69b9      	ldr	r1, [r7, #24]
 80040f6:	0148      	lsls	r0, r1, #5
 80040f8:	69f9      	ldr	r1, [r7, #28]
 80040fa:	4401      	add	r1, r0
 80040fc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004100:	4313      	orrs	r3, r2
 8004102:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004110:	691a      	ldr	r2, [r3, #16]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800411a:	69b9      	ldr	r1, [r7, #24]
 800411c:	0148      	lsls	r0, r1, #5
 800411e:	69f9      	ldr	r1, [r7, #28]
 8004120:	4401      	add	r1, r0
 8004122:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004126:	4313      	orrs	r3, r2
 8004128:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	791b      	ldrb	r3, [r3, #4]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d11f      	bne.n	8004172 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	4413      	add	r3, r2
 800413a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	0151      	lsls	r1, r2, #5
 8004144:	69fa      	ldr	r2, [r7, #28]
 8004146:	440a      	add	r2, r1
 8004148:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800414c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004150:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	0151      	lsls	r1, r2, #5
 8004164:	69fa      	ldr	r2, [r7, #28]
 8004166:	440a      	add	r2, r1
 8004168:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800416c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004170:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d14b      	bne.n	8004210 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d009      	beq.n	8004194 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800418c:	461a      	mov	r2, r3
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	791b      	ldrb	r3, [r3, #4]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d128      	bne.n	80041ee <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d110      	bne.n	80041ce <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	0151      	lsls	r1, r2, #5
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	440a      	add	r2, r1
 80041c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041c6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80041ca:	6013      	str	r3, [r2, #0]
 80041cc:	e00f      	b.n	80041ee <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	0151      	lsls	r1, r2, #5
 80041e0:	69fa      	ldr	r2, [r7, #28]
 80041e2:	440a      	add	r2, r1
 80041e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041ec:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	0151      	lsls	r1, r2, #5
 8004200:	69fa      	ldr	r2, [r7, #28]
 8004202:	440a      	add	r2, r1
 8004204:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004208:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	e165      	b.n	80044dc <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	4413      	add	r3, r2
 8004218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	0151      	lsls	r1, r2, #5
 8004222:	69fa      	ldr	r2, [r7, #28]
 8004224:	440a      	add	r2, r1
 8004226:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800422a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800422e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	791b      	ldrb	r3, [r3, #4]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d015      	beq.n	8004264 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 814d 	beq.w	80044dc <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004248:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	2101      	movs	r1, #1
 8004254:	fa01 f303 	lsl.w	r3, r1, r3
 8004258:	69f9      	ldr	r1, [r7, #28]
 800425a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800425e:	4313      	orrs	r3, r2
 8004260:	634b      	str	r3, [r1, #52]	@ 0x34
 8004262:	e13b      	b.n	80044dc <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004270:	2b00      	cmp	r3, #0
 8004272:	d110      	bne.n	8004296 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	4413      	add	r3, r2
 800427c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	0151      	lsls	r1, r2, #5
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	440a      	add	r2, r1
 800428a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800428e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004292:	6013      	str	r3, [r2, #0]
 8004294:	e00f      	b.n	80042b6 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	4413      	add	r3, r2
 800429e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	0151      	lsls	r1, r2, #5
 80042a8:	69fa      	ldr	r2, [r7, #28]
 80042aa:	440a      	add	r2, r1
 80042ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042b4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	68d9      	ldr	r1, [r3, #12]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	781a      	ldrb	r2, [r3, #0]
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	b298      	uxth	r0, r3
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	4603      	mov	r3, r0
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 f9b8 	bl	8004640 <USB_WritePacket>
 80042d0:	e104      	b.n	80044dc <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	015a      	lsls	r2, r3, #5
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	4413      	add	r3, r2
 80042da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	0151      	lsls	r1, r2, #5
 80042e4:	69fa      	ldr	r2, [r7, #28]
 80042e6:	440a      	add	r2, r1
 80042e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042ec:	0cdb      	lsrs	r3, r3, #19
 80042ee:	04db      	lsls	r3, r3, #19
 80042f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	0151      	lsls	r1, r2, #5
 8004304:	69fa      	ldr	r2, [r7, #28]
 8004306:	440a      	add	r2, r1
 8004308:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800430c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004310:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004314:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d131      	bne.n	8004380 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004340:	691a      	ldr	r2, [r3, #16]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800434a:	69b9      	ldr	r1, [r7, #24]
 800434c:	0148      	lsls	r0, r1, #5
 800434e:	69f9      	ldr	r1, [r7, #28]
 8004350:	4401      	add	r1, r0
 8004352:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004356:	4313      	orrs	r3, r2
 8004358:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	4413      	add	r3, r2
 8004362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	0151      	lsls	r1, r2, #5
 800436c:	69fa      	ldr	r2, [r7, #28]
 800436e:	440a      	add	r2, r1
 8004370:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004374:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004378:	6113      	str	r3, [r2, #16]
 800437a:	e061      	b.n	8004440 <USB_EPStartXfer+0x484>
 800437c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d123      	bne.n	80043d0 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	4413      	add	r3, r2
 8004390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004394:	691a      	ldr	r2, [r3, #16]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800439e:	69b9      	ldr	r1, [r7, #24]
 80043a0:	0148      	lsls	r0, r1, #5
 80043a2:	69f9      	ldr	r1, [r7, #28]
 80043a4:	4401      	add	r1, r0
 80043a6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80043aa:	4313      	orrs	r3, r2
 80043ac:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	0151      	lsls	r1, r2, #5
 80043c0:	69fa      	ldr	r2, [r7, #28]
 80043c2:	440a      	add	r2, r1
 80043c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80043cc:	6113      	str	r3, [r2, #16]
 80043ce:	e037      	b.n	8004440 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	4413      	add	r3, r2
 80043da:	1e5a      	subs	r2, r3, #1
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	8afa      	ldrh	r2, [r7, #22]
 80043ec:	fb03 f202 	mul.w	r2, r3, r2
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004400:	691a      	ldr	r2, [r3, #16]
 8004402:	8afb      	ldrh	r3, [r7, #22]
 8004404:	04d9      	lsls	r1, r3, #19
 8004406:	4b38      	ldr	r3, [pc, #224]	@ (80044e8 <USB_EPStartXfer+0x52c>)
 8004408:	400b      	ands	r3, r1
 800440a:	69b9      	ldr	r1, [r7, #24]
 800440c:	0148      	lsls	r0, r1, #5
 800440e:	69f9      	ldr	r1, [r7, #28]
 8004410:	4401      	add	r1, r0
 8004412:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004416:	4313      	orrs	r3, r2
 8004418:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	4413      	add	r3, r2
 8004422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004426:	691a      	ldr	r2, [r3, #16]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004430:	69b9      	ldr	r1, [r7, #24]
 8004432:	0148      	lsls	r0, r1, #5
 8004434:	69f9      	ldr	r1, [r7, #28]
 8004436:	4401      	add	r1, r0
 8004438:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800443c:	4313      	orrs	r3, r2
 800443e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004440:	79fb      	ldrb	r3, [r7, #7]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d10d      	bne.n	8004462 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d009      	beq.n	8004462 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	68d9      	ldr	r1, [r3, #12]
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	4413      	add	r3, r2
 800445a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800445e:	460a      	mov	r2, r1
 8004460:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	791b      	ldrb	r3, [r3, #4]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d128      	bne.n	80044bc <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004476:	2b00      	cmp	r3, #0
 8004478:	d110      	bne.n	800449c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	4413      	add	r3, r2
 8004482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	0151      	lsls	r1, r2, #5
 800448c:	69fa      	ldr	r2, [r7, #28]
 800448e:	440a      	add	r2, r1
 8004490:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004494:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	e00f      	b.n	80044bc <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	0151      	lsls	r1, r2, #5
 80044ae:	69fa      	ldr	r2, [r7, #28]
 80044b0:	440a      	add	r2, r1
 80044b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	0151      	lsls	r1, r2, #5
 80044ce:	69fa      	ldr	r2, [r7, #28]
 80044d0:	440a      	add	r2, r1
 80044d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044d6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80044da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3720      	adds	r7, #32
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	1ff80000 	.word	0x1ff80000

080044ec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	785b      	ldrb	r3, [r3, #1]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d14a      	bne.n	80045a0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800451e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004522:	f040 8086 	bne.w	8004632 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	4413      	add	r3, r2
 8004530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	7812      	ldrb	r2, [r2, #0]
 800453a:	0151      	lsls	r1, r2, #5
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	440a      	add	r2, r1
 8004540:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004544:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004548:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	7812      	ldrb	r2, [r2, #0]
 800455e:	0151      	lsls	r1, r2, #5
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	440a      	add	r2, r1
 8004564:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004568:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800456c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	3301      	adds	r3, #1
 8004572:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f242 7210 	movw	r2, #10000	@ 0x2710
 800457a:	4293      	cmp	r3, r2
 800457c:	d902      	bls.n	8004584 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	75fb      	strb	r3, [r7, #23]
          break;
 8004582:	e056      	b.n	8004632 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	4413      	add	r3, r2
 800458e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004598:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800459c:	d0e7      	beq.n	800456e <USB_EPStopXfer+0x82>
 800459e:	e048      	b.n	8004632 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045b8:	d13b      	bne.n	8004632 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	7812      	ldrb	r2, [r2, #0]
 80045ce:	0151      	lsls	r1, r2, #5
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	440a      	add	r2, r1
 80045d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80045dc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	7812      	ldrb	r2, [r2, #0]
 80045f2:	0151      	lsls	r1, r2, #5
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	440a      	add	r2, r1
 80045f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004600:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3301      	adds	r3, #1
 8004606:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800460e:	4293      	cmp	r3, r2
 8004610:	d902      	bls.n	8004618 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	75fb      	strb	r3, [r7, #23]
          break;
 8004616:	e00c      	b.n	8004632 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	4413      	add	r3, r2
 8004622:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800462c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004630:	d0e7      	beq.n	8004602 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004632:	7dfb      	ldrb	r3, [r7, #23]
}
 8004634:	4618      	mov	r0, r3
 8004636:	371c      	adds	r7, #28
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004640:	b480      	push	{r7}
 8004642:	b089      	sub	sp, #36	@ 0x24
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	4611      	mov	r1, r2
 800464c:	461a      	mov	r2, r3
 800464e:	460b      	mov	r3, r1
 8004650:	71fb      	strb	r3, [r7, #7]
 8004652:	4613      	mov	r3, r2
 8004654:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800465e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004662:	2b00      	cmp	r3, #0
 8004664:	d123      	bne.n	80046ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004666:	88bb      	ldrh	r3, [r7, #4]
 8004668:	3303      	adds	r3, #3
 800466a:	089b      	lsrs	r3, r3, #2
 800466c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800466e:	2300      	movs	r3, #0
 8004670:	61bb      	str	r3, [r7, #24]
 8004672:	e018      	b.n	80046a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004674:	79fb      	ldrb	r3, [r7, #7]
 8004676:	031a      	lsls	r2, r3, #12
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	4413      	add	r3, r2
 800467c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004680:	461a      	mov	r2, r3
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	3301      	adds	r3, #1
 800468c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	3301      	adds	r3, #1
 8004692:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	3301      	adds	r3, #1
 8004698:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	3301      	adds	r3, #1
 800469e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	3301      	adds	r3, #1
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d3e2      	bcc.n	8004674 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3724      	adds	r7, #36	@ 0x24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80046bc:	b480      	push	{r7}
 80046be:	b08b      	sub	sp, #44	@ 0x2c
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	4613      	mov	r3, r2
 80046c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	089b      	lsrs	r3, r3, #2
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80046da:	88fb      	ldrh	r3, [r7, #6]
 80046dc:	f003 0303 	and.w	r3, r3, #3
 80046e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80046e2:	2300      	movs	r3, #0
 80046e4:	623b      	str	r3, [r7, #32]
 80046e6:	e014      	b.n	8004712 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80046f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f6:	3301      	adds	r3, #1
 80046f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80046fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fc:	3301      	adds	r3, #1
 80046fe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004702:	3301      	adds	r3, #1
 8004704:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004708:	3301      	adds	r3, #1
 800470a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	3301      	adds	r3, #1
 8004710:	623b      	str	r3, [r7, #32]
 8004712:	6a3a      	ldr	r2, [r7, #32]
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	429a      	cmp	r2, r3
 8004718:	d3e6      	bcc.n	80046e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800471a:	8bfb      	ldrh	r3, [r7, #30]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01e      	beq.n	800475e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800472a:	461a      	mov	r2, r3
 800472c:	f107 0310 	add.w	r3, r7, #16
 8004730:	6812      	ldr	r2, [r2, #0]
 8004732:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	b2db      	uxtb	r3, r3
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	fa22 f303 	lsr.w	r3, r2, r3
 8004740:	b2da      	uxtb	r2, r3
 8004742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004744:	701a      	strb	r2, [r3, #0]
      i++;
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	3301      	adds	r3, #1
 800474a:	623b      	str	r3, [r7, #32]
      pDest++;
 800474c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474e:	3301      	adds	r3, #1
 8004750:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004752:	8bfb      	ldrh	r3, [r7, #30]
 8004754:	3b01      	subs	r3, #1
 8004756:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004758:	8bfb      	ldrh	r3, [r7, #30]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1ea      	bne.n	8004734 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800475e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004760:	4618      	mov	r0, r3
 8004762:	372c      	adds	r7, #44	@ 0x2c
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	785b      	ldrb	r3, [r3, #1]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d12c      	bne.n	80047e2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4413      	add	r3, r2
 8004790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	db12      	blt.n	80047c0 <USB_EPSetStall+0x54>
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00f      	beq.n	80047c0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	0151      	lsls	r1, r2, #5
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	440a      	add	r2, r1
 80047b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047ba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80047be:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	0151      	lsls	r1, r2, #5
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	440a      	add	r2, r1
 80047d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	e02b      	b.n	800483a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	db12      	blt.n	800481a <USB_EPSetStall+0xae>
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00f      	beq.n	800481a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4413      	add	r3, r2
 8004802:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	0151      	lsls	r1, r2, #5
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	440a      	add	r2, r1
 8004810:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004814:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004818:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4413      	add	r3, r2
 8004822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	0151      	lsls	r1, r2, #5
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	440a      	add	r2, r1
 8004830:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004834:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004838:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	785b      	ldrb	r3, [r3, #1]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d128      	bne.n	80048b6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	0151      	lsls	r1, r2, #5
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	440a      	add	r2, r1
 800487a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800487e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004882:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	791b      	ldrb	r3, [r3, #4]
 8004888:	2b03      	cmp	r3, #3
 800488a:	d003      	beq.n	8004894 <USB_EPClearStall+0x4c>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	791b      	ldrb	r3, [r3, #4]
 8004890:	2b02      	cmp	r3, #2
 8004892:	d138      	bne.n	8004906 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	0151      	lsls	r1, r2, #5
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	440a      	add	r2, r1
 80048aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048b2:	6013      	str	r3, [r2, #0]
 80048b4:	e027      	b.n	8004906 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	0151      	lsls	r1, r2, #5
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	440a      	add	r2, r1
 80048cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048d0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80048d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	791b      	ldrb	r3, [r3, #4]
 80048da:	2b03      	cmp	r3, #3
 80048dc:	d003      	beq.n	80048e6 <USB_EPClearStall+0x9e>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	791b      	ldrb	r3, [r3, #4]
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d10f      	bne.n	8004906 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	015a      	lsls	r2, r3, #5
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	0151      	lsls	r1, r2, #5
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	440a      	add	r2, r1
 80048fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004904:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004932:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004936:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	78fb      	ldrb	r3, [r7, #3]
 8004942:	011b      	lsls	r3, r3, #4
 8004944:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004948:	68f9      	ldr	r1, [r7, #12]
 800494a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800494e:	4313      	orrs	r3, r2
 8004950:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800497a:	f023 0303 	bic.w	r3, r3, #3
 800497e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800498e:	f023 0302 	bic.w	r3, r3, #2
 8004992:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b085      	sub	sp, #20
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80049bc:	f023 0303 	bic.w	r3, r3, #3
 80049c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049d0:	f043 0302 	orr.w	r3, r3, #2
 80049d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	4013      	ands	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80049fc:	68fb      	ldr	r3, [r7, #12]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b085      	sub	sp, #20
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	0c1b      	lsrs	r3, r3, #16
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b085      	sub	sp, #20
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	b29b      	uxth	r3, r3
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b085      	sub	sp, #20
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004a82:	78fb      	ldrb	r3, [r7, #3]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004aa0:	68bb      	ldr	r3, [r7, #8]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b087      	sub	sp, #28
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004ad2:	78fb      	ldrb	r3, [r7, #3]
 8004ad4:	f003 030f 	and.w	r3, r3, #15
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	fa22 f303 	lsr.w	r3, r2, r3
 8004ade:	01db      	lsls	r3, r3, #7
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	4013      	ands	r3, r2
 8004afa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004afc:	68bb      	ldr	r3, [r7, #8]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	371c      	adds	r7, #28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	f003 0301 	and.w	r3, r3, #1
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b085      	sub	sp, #20
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b40:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004b44:	f023 0307 	bic.w	r3, r3, #7
 8004b48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	460b      	mov	r3, r1
 8004b76:	607a      	str	r2, [r7, #4]
 8004b78:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	333c      	adds	r3, #60	@ 0x3c
 8004b82:	3304      	adds	r3, #4
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	4a26      	ldr	r2, [pc, #152]	@ (8004c24 <USB_EP0_OutStart+0xb8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d90a      	bls.n	8004ba6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ba0:	d101      	bne.n	8004ba6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	e037      	b.n	8004c16 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bac:	461a      	mov	r2, r3
 8004bae:	2300      	movs	r3, #0
 8004bb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bc0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004bc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bd4:	f043 0318 	orr.w	r3, r3, #24
 8004bd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004be8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004bec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004bee:	7afb      	ldrb	r3, [r7, #11]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d10f      	bne.n	8004c14 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c0e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004c12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	371c      	adds	r7, #28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	4f54300a 	.word	0x4f54300a

08004c28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	3301      	adds	r3, #1
 8004c38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c40:	d901      	bls.n	8004c46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e01b      	b.n	8004c7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	daf2      	bge.n	8004c34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	f043 0201 	orr.w	r2, r3, #1
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	3301      	adds	r3, #1
 8004c62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c6a:	d901      	bls.n	8004c70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e006      	b.n	8004c7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d0f0      	beq.n	8004c5e <USB_CoreReset+0x36>

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
	...

08004c8c <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8004c98:	2018      	movs	r0, #24
 8004c9a:	f002 fc53 	bl	8007544 <USBD_static_malloc>
 8004c9e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d109      	bne.n	8004cba <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	32b0      	adds	r2, #176	@ 0xb0
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e08a      	b.n	8004dd0 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	32b0      	adds	r2, #176	@ 0xb0
 8004cc4:	68f9      	ldr	r1, [r7, #12]
 8004cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	32b0      	adds	r2, #176	@ 0xb0
 8004cd4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	7c1b      	ldrb	r3, [r3, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d11b      	bne.n	8004d1e <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004ce6:	4b3c      	ldr	r3, [pc, #240]	@ (8004dd8 <USBD_CUSTOM_HID_Init+0x14c>)
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	f003 020f 	and.w	r2, r3, #15
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	3326      	adds	r3, #38	@ 0x26
 8004cfc:	2205      	movs	r2, #5
 8004cfe:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004d00:	4b36      	ldr	r3, [pc, #216]	@ (8004ddc <USBD_CUSTOM_HID_Init+0x150>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	f003 020f 	and.w	r2, r3, #15
 8004d08:	6879      	ldr	r1, [r7, #4]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	440b      	add	r3, r1
 8004d14:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004d18:	2205      	movs	r2, #5
 8004d1a:	801a      	strh	r2, [r3, #0]
 8004d1c:	e01a      	b.n	8004d54 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004d1e:	4b2e      	ldr	r3, [pc, #184]	@ (8004dd8 <USBD_CUSTOM_HID_Init+0x14c>)
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	f003 020f 	and.w	r2, r3, #15
 8004d26:	6879      	ldr	r1, [r7, #4]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	440b      	add	r3, r1
 8004d32:	3326      	adds	r3, #38	@ 0x26
 8004d34:	2205      	movs	r2, #5
 8004d36:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004d38:	4b28      	ldr	r3, [pc, #160]	@ (8004ddc <USBD_CUSTOM_HID_Init+0x150>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	f003 020f 	and.w	r2, r3, #15
 8004d40:	6879      	ldr	r1, [r7, #4]
 8004d42:	4613      	mov	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004d50:	2205      	movs	r2, #5
 8004d52:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8004d54:	4b20      	ldr	r3, [pc, #128]	@ (8004dd8 <USBD_CUSTOM_HID_Init+0x14c>)
 8004d56:	7819      	ldrb	r1, [r3, #0]
 8004d58:	2310      	movs	r3, #16
 8004d5a:	2203      	movs	r2, #3
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f002 fa92 	bl	8007286 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8004d62:	4b1d      	ldr	r3, [pc, #116]	@ (8004dd8 <USBD_CUSTOM_HID_Init+0x14c>)
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	f003 020f 	and.w	r2, r3, #15
 8004d6a:	6879      	ldr	r1, [r7, #4]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	440b      	add	r3, r1
 8004d76:	3324      	adds	r3, #36	@ 0x24
 8004d78:	2201      	movs	r2, #1
 8004d7a:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8004d7c:	4b17      	ldr	r3, [pc, #92]	@ (8004ddc <USBD_CUSTOM_HID_Init+0x150>)
 8004d7e:	7819      	ldrb	r1, [r3, #0]
 8004d80:	2302      	movs	r3, #2
 8004d82:	2203      	movs	r2, #3
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f002 fa7e 	bl	8007286 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8004d8a:	4b14      	ldr	r3, [pc, #80]	@ (8004ddc <USBD_CUSTOM_HID_Init+0x150>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	f003 020f 	and.w	r2, r3, #15
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	4613      	mov	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004da2:	2201      	movs	r2, #1
 8004da4:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	33b0      	adds	r3, #176	@ 0xb0
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8004dc0:	4b06      	ldr	r3, [pc, #24]	@ (8004ddc <USBD_CUSTOM_HID_Init+0x150>)
 8004dc2:	7819      	ldrb	r1, [r3, #0]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f002 fb4b 	bl	8007464 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	2000018e 	.word	0x2000018e
 8004ddc:	2000018f 	.word	0x2000018f

08004de0 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8004dec:	4b37      	ldr	r3, [pc, #220]	@ (8004ecc <USBD_CUSTOM_HID_DeInit+0xec>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	4619      	mov	r1, r3
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f002 fa6d 	bl	80072d2 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8004df8:	4b34      	ldr	r3, [pc, #208]	@ (8004ecc <USBD_CUSTOM_HID_DeInit+0xec>)
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	f003 020f 	and.w	r2, r3, #15
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	4613      	mov	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	3324      	adds	r3, #36	@ 0x24
 8004e0e:	2200      	movs	r2, #0
 8004e10:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8004e12:	4b2e      	ldr	r3, [pc, #184]	@ (8004ecc <USBD_CUSTOM_HID_DeInit+0xec>)
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	f003 020f 	and.w	r2, r3, #15
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	3326      	adds	r3, #38	@ 0x26
 8004e28:	2200      	movs	r2, #0
 8004e2a:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8004e2c:	4b28      	ldr	r3, [pc, #160]	@ (8004ed0 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	4619      	mov	r1, r3
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f002 fa4d 	bl	80072d2 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8004e38:	4b25      	ldr	r3, [pc, #148]	@ (8004ed0 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	f003 020f 	and.w	r2, r3, #15
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	4613      	mov	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004e50:	2200      	movs	r2, #0
 8004e52:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8004e54:	4b1e      	ldr	r3, [pc, #120]	@ (8004ed0 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	f003 020f 	and.w	r2, r3, #15
 8004e5c:	6879      	ldr	r1, [r7, #4]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	440b      	add	r3, r1
 8004e68:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	32b0      	adds	r2, #176	@ 0xb0
 8004e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d01f      	beq.n	8004ec2 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	33b0      	adds	r3, #176	@ 0xb0
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	32b0      	adds	r2, #176	@ 0xb0
 8004ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f002 fb5b 	bl	8007560 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	32b0      	adds	r2, #176	@ 0xb0
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	2000018e 	.word	0x2000018e
 8004ed0:	2000018f 	.word	0x2000018f

08004ed4 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b088      	sub	sp, #32
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	32b0      	adds	r2, #176	@ 0xb0
 8004ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eec:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	83fb      	strh	r3, [r7, #30]
#warning "USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED not implemented; See original library code"
#endif
#ifdef USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED
#warning "USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED not implemented; See original library code"
#endif
  uint8_t  *pbuf = NULL;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004efa:	2300      	movs	r3, #0
 8004efc:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e118      	b.n	800513a <USBD_CUSTOM_HID_Setup+0x266>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d077      	beq.n	8005004 <USBD_CUSTOM_HID_Setup+0x130>
 8004f14:	2b20      	cmp	r3, #32
 8004f16:	f040 8108 	bne.w	800512a <USBD_CUSTOM_HID_Setup+0x256>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	785b      	ldrb	r3, [r3, #1]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	2b0a      	cmp	r3, #10
 8004f22:	d866      	bhi.n	8004ff2 <USBD_CUSTOM_HID_Setup+0x11e>
 8004f24:	a201      	add	r2, pc, #4	@ (adr r2, 8004f2c <USBD_CUSTOM_HID_Setup+0x58>)
 8004f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2a:	bf00      	nop
 8004f2c:	08004fb7 	.word	0x08004fb7
 8004f30:	08004f89 	.word	0x08004f89
 8004f34:	08004f67 	.word	0x08004f67
 8004f38:	08004ff3 	.word	0x08004ff3
 8004f3c:	08004ff3 	.word	0x08004ff3
 8004f40:	08004ff3 	.word	0x08004ff3
 8004f44:	08004ff3 	.word	0x08004ff3
 8004f48:	08004ff3 	.word	0x08004ff3
 8004f4c:	08004f99 	.word	0x08004f99
 8004f50:	08004f77 	.word	0x08004f77
 8004f54:	08004f59 	.word	0x08004f59
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	885b      	ldrh	r3, [r3, #2]
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	461a      	mov	r2, r3
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	605a      	str	r2, [r3, #4]
          break;
 8004f64:	e04d      	b.n	8005002 <USBD_CUSTOM_HID_Setup+0x12e>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	3304      	adds	r3, #4
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f001 fd16 	bl	80069a0 <USBD_CtlSendData>
          break;
 8004f74:	e045      	b.n	8005002 <USBD_CUSTOM_HID_Setup+0x12e>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	885b      	ldrh	r3, [r3, #2]
 8004f7a:	0a1b      	lsrs	r3, r3, #8
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	461a      	mov	r2, r3
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	609a      	str	r2, [r3, #8]
          break;
 8004f86:	e03c      	b.n	8005002 <USBD_CUSTOM_HID_Setup+0x12e>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	3308      	adds	r3, #8
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	4619      	mov	r1, r3
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f001 fd05 	bl	80069a0 <USBD_CtlSendData>
          break;
 8004f96:	e034      	b.n	8005002 <USBD_CUSTOM_HID_Setup+0x12e>

        case CUSTOM_HID_REQ_SET_REPORT:
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8004f9e:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	88db      	ldrh	r3, [r3, #6]
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	bf28      	it	cs
 8004fa8:	2302      	movcs	r3, #2
 8004faa:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8004fac:	461a      	mov	r2, r3
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f001 fd22 	bl	80069f8 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8004fb4:	e025      	b.n	8005002 <USBD_CUSTOM_HID_Setup+0x12e>
        /*
         * Implementation of Contact Count Maximum and Device Certification Status feature reports as required by Windows
         * For more information, see https://learn.microsoft.com/en-us/windows-hardware/design/component-guidelines/touchscreen-required-hid-top-level-collections
         */
        case CUSTOM_HID_REQ_GET_REPORT:
        	int FEATURE_REPORT_WVALUE_OFFSET = 0x300;		// High Byte of wValue is report type, Low Byte is report ID (HID 1.11, Section 7.2)
 8004fb6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004fba:	60fb      	str	r3, [r7, #12]



        	if (req->wValue == (FEATURE_REPORT_WVALUE_OFFSET + REPORTID_MAX_COUNT))
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	885b      	ldrh	r3, [r3, #2]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	3302      	adds	r3, #2
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d105      	bne.n	8004fd6 <USBD_CUSTOM_HID_Setup+0x102>
        	{
//        		MaxCountFeatureReport maxCountFeatureReport;
//        		maxCountFeatureReport.report_ID = REPORTID_MAX_COUNT;
//        		maxCountFeatureReport.max_contact_count = MAX_CONTACT_COUNT;
        		USBD_CtlSendData(pdev, (uint8_t*)&maxCountFeatureReport_2, sizeof (maxCountFeatureReport_2));
 8004fca:	2202      	movs	r2, #2
 8004fcc:	495d      	ldr	r1, [pc, #372]	@ (8005144 <USBD_CUSTOM_HID_Setup+0x270>)
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f001 fce6 	bl	80069a0 <USBD_CtlSendData>
//        				0xcf, 0x17, 0xb7, 0xb8, 0xf4, 0xe1, 0x33, 0x08, 0x24, 0x8b, 0xc4, 0x43, 0xa5, 0xe5, 0x24, 0xc2
//        		};
//        		memcpy(certificationFeatureReport.blob, blob, sizeof(blob));
        		USBD_CtlSendData(pdev, (uint8_t*)&certificationFeatureReport_2, sizeof (certificationFeatureReport_2));
					}
        	break;
 8004fd4:	e014      	b.n	8005000 <USBD_CUSTOM_HID_Setup+0x12c>
        	else if (req->wValue == (FEATURE_REPORT_WVALUE_OFFSET + REPORTID_CERTIFICATION))
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	885b      	ldrh	r3, [r3, #2]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	3344      	adds	r3, #68	@ 0x44
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d10d      	bne.n	8005000 <USBD_CUSTOM_HID_Setup+0x12c>
        		USBD_CtlSendData(pdev, (uint8_t*)&certificationFeatureReport_2, sizeof (certificationFeatureReport_2));
 8004fe4:	f240 1201 	movw	r2, #257	@ 0x101
 8004fe8:	4957      	ldr	r1, [pc, #348]	@ (8005148 <USBD_CUSTOM_HID_Setup+0x274>)
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f001 fcd8 	bl	80069a0 <USBD_CtlSendData>
        	break;
 8004ff0:	e006      	b.n	8005000 <USBD_CUSTOM_HID_Setup+0x12c>
        default:
          USBD_CtlError(pdev, req);
 8004ff2:	6839      	ldr	r1, [r7, #0]
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f001 fc62 	bl	80068be <USBD_CtlError>
          ret = USBD_FAIL;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	75fb      	strb	r3, [r7, #23]
          break;
 8004ffe:	e000      	b.n	8005002 <USBD_CUSTOM_HID_Setup+0x12e>
        	break;
 8005000:	bf00      	nop
      }
      break;
 8005002:	e099      	b.n	8005138 <USBD_CUSTOM_HID_Setup+0x264>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	785b      	ldrb	r3, [r3, #1]
 8005008:	2b0b      	cmp	r3, #11
 800500a:	f200 8085 	bhi.w	8005118 <USBD_CUSTOM_HID_Setup+0x244>
 800500e:	a201      	add	r2, pc, #4	@ (adr r2, 8005014 <USBD_CUSTOM_HID_Setup+0x140>)
 8005010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005014:	08005045 	.word	0x08005045
 8005018:	08005127 	.word	0x08005127
 800501c:	08005119 	.word	0x08005119
 8005020:	08005119 	.word	0x08005119
 8005024:	08005119 	.word	0x08005119
 8005028:	08005119 	.word	0x08005119
 800502c:	0800506f 	.word	0x0800506f
 8005030:	08005119 	.word	0x08005119
 8005034:	08005119 	.word	0x08005119
 8005038:	08005119 	.word	0x08005119
 800503c:	080050c7 	.word	0x080050c7
 8005040:	080050f1 	.word	0x080050f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b03      	cmp	r3, #3
 800504e:	d107      	bne.n	8005060 <USBD_CUSTOM_HID_Setup+0x18c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005050:	f107 030a 	add.w	r3, r7, #10
 8005054:	2202      	movs	r2, #2
 8005056:	4619      	mov	r1, r3
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f001 fca1 	bl	80069a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800505e:	e063      	b.n	8005128 <USBD_CUSTOM_HID_Setup+0x254>
            USBD_CtlError(pdev, req);
 8005060:	6839      	ldr	r1, [r7, #0]
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f001 fc2b 	bl	80068be <USBD_CtlError>
            ret = USBD_FAIL;
 8005068:	2303      	movs	r3, #3
 800506a:	75fb      	strb	r3, [r7, #23]
          break;
 800506c:	e05c      	b.n	8005128 <USBD_CUSTOM_HID_Setup+0x254>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	885b      	ldrh	r3, [r3, #2]
 8005072:	0a1b      	lsrs	r3, r3, #8
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b22      	cmp	r3, #34	@ 0x22
 8005078:	d110      	bne.n	800509c <USBD_CUSTOM_HID_Setup+0x1c8>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	88db      	ldrh	r3, [r3, #6]
 800507e:	2bbd      	cmp	r3, #189	@ 0xbd
 8005080:	bf28      	it	cs
 8005082:	23bd      	movcs	r3, #189	@ 0xbd
 8005084:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	33b0      	adds	r3, #176	@ 0xb0
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	61bb      	str	r3, [r7, #24]
 800509a:	e00d      	b.n	80050b8 <USBD_CUSTOM_HID_Setup+0x1e4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	885b      	ldrh	r3, [r3, #2]
 80050a0:	0a1b      	lsrs	r3, r3, #8
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	2b21      	cmp	r3, #33	@ 0x21
 80050a6:	d107      	bne.n	80050b8 <USBD_CUSTOM_HID_Setup+0x1e4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80050a8:	4b28      	ldr	r3, [pc, #160]	@ (800514c <USBD_CUSTOM_HID_Setup+0x278>)
 80050aa:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	88db      	ldrh	r3, [r3, #6]
 80050b0:	2b09      	cmp	r3, #9
 80050b2:	bf28      	it	cs
 80050b4:	2309      	movcs	r3, #9
 80050b6:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80050b8:	8bfb      	ldrh	r3, [r7, #30]
 80050ba:	461a      	mov	r2, r3
 80050bc:	69b9      	ldr	r1, [r7, #24]
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f001 fc6e 	bl	80069a0 <USBD_CtlSendData>
          break;
 80050c4:	e030      	b.n	8005128 <USBD_CUSTOM_HID_Setup+0x254>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b03      	cmp	r3, #3
 80050d0:	d107      	bne.n	80050e2 <USBD_CUSTOM_HID_Setup+0x20e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	330c      	adds	r3, #12
 80050d6:	2201      	movs	r2, #1
 80050d8:	4619      	mov	r1, r3
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f001 fc60 	bl	80069a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80050e0:	e022      	b.n	8005128 <USBD_CUSTOM_HID_Setup+0x254>
            USBD_CtlError(pdev, req);
 80050e2:	6839      	ldr	r1, [r7, #0]
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f001 fbea 	bl	80068be <USBD_CtlError>
            ret = USBD_FAIL;
 80050ea:	2303      	movs	r3, #3
 80050ec:	75fb      	strb	r3, [r7, #23]
          break;
 80050ee:	e01b      	b.n	8005128 <USBD_CUSTOM_HID_Setup+0x254>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b03      	cmp	r3, #3
 80050fa:	d106      	bne.n	800510a <USBD_CUSTOM_HID_Setup+0x236>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	885b      	ldrh	r3, [r3, #2]
 8005100:	b2db      	uxtb	r3, r3
 8005102:	461a      	mov	r2, r3
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005108:	e00e      	b.n	8005128 <USBD_CUSTOM_HID_Setup+0x254>
            USBD_CtlError(pdev, req);
 800510a:	6839      	ldr	r1, [r7, #0]
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f001 fbd6 	bl	80068be <USBD_CtlError>
            ret = USBD_FAIL;
 8005112:	2303      	movs	r3, #3
 8005114:	75fb      	strb	r3, [r7, #23]
          break;
 8005116:	e007      	b.n	8005128 <USBD_CUSTOM_HID_Setup+0x254>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005118:	6839      	ldr	r1, [r7, #0]
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f001 fbcf 	bl	80068be <USBD_CtlError>
          ret = USBD_FAIL;
 8005120:	2303      	movs	r3, #3
 8005122:	75fb      	strb	r3, [r7, #23]
          break;
 8005124:	e000      	b.n	8005128 <USBD_CUSTOM_HID_Setup+0x254>
          break;
 8005126:	bf00      	nop
      }
      break;
 8005128:	e006      	b.n	8005138 <USBD_CUSTOM_HID_Setup+0x264>

    default:
      USBD_CtlError(pdev, req);
 800512a:	6839      	ldr	r1, [r7, #0]
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f001 fbc6 	bl	80068be <USBD_CtlError>
      ret = USBD_FAIL;
 8005132:	2303      	movs	r3, #3
 8005134:	75fb      	strb	r3, [r7, #23]
      break;
 8005136:	bf00      	nop
  }
  return (uint8_t)ret;
 8005138:	7dfb      	ldrb	r3, [r7, #23]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3720      	adds	r7, #32
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	2000000c 	.word	0x2000000c
 8005148:	20000010 	.word	0x20000010
 800514c:	20000178 	.word	0x20000178

08005150 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	4613      	mov	r3, r2
 800515c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	32b0      	adds	r2, #176	@ 0xb0
 8005168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800516c:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005174:	2303      	movs	r3, #3
 8005176:	e017      	b.n	80051a8 <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b03      	cmp	r3, #3
 8005182:	d110      	bne.n	80051a6 <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	7d1b      	ldrb	r3, [r3, #20]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10a      	bne.n	80051a2 <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	2201      	movs	r2, #1
 8005190:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8005192:	4b07      	ldr	r3, [pc, #28]	@ (80051b0 <USBD_CUSTOM_HID_SendReport+0x60>)
 8005194:	7819      	ldrb	r1, [r3, #0]
 8005196:	88fb      	ldrh	r3, [r7, #6]
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f002 f941 	bl	8007422 <USBD_LL_Transmit>
 80051a0:	e001      	b.n	80051a6 <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e000      	b.n	80051a8 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	2000018e 	.word	0x2000018e

080051b4 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80051bc:	2181      	movs	r1, #129	@ 0x81
 80051be:	4815      	ldr	r0, [pc, #84]	@ (8005214 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80051c0:	f000 fd1d 	bl	8005bfe <USBD_GetEpDesc>
 80051c4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80051c6:	2101      	movs	r1, #1
 80051c8:	4812      	ldr	r0, [pc, #72]	@ (8005214 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80051ca:	f000 fd18 	bl	8005bfe <USBD_GetEpDesc>
 80051ce:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d009      	beq.n	80051ea <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f042 0210 	orr.w	r2, r2, #16
 80051de:	711a      	strb	r2, [r3, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2205      	movs	r2, #5
 80051e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d009      	beq.n	8005204 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f042 0202 	orr.w	r2, r2, #2
 80051f8:	711a      	strb	r2, [r3, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2205      	movs	r2, #5
 8005202:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2229      	movs	r2, #41	@ 0x29
 8005208:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800520a:	4b02      	ldr	r3, [pc, #8]	@ (8005214 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	2000014c 	.word	0x2000014c

08005218 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005220:	2181      	movs	r1, #129	@ 0x81
 8005222:	4815      	ldr	r0, [pc, #84]	@ (8005278 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8005224:	f000 fceb 	bl	8005bfe <USBD_GetEpDesc>
 8005228:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800522a:	2101      	movs	r1, #1
 800522c:	4812      	ldr	r0, [pc, #72]	@ (8005278 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800522e:	f000 fce6 	bl	8005bfe <USBD_GetEpDesc>
 8005232:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d009      	beq.n	800524e <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f042 0210 	orr.w	r2, r2, #16
 8005242:	711a      	strb	r2, [r3, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2205      	movs	r2, #5
 800524c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d009      	beq.n	8005268 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2200      	movs	r2, #0
 8005258:	f042 0202 	orr.w	r2, r2, #2
 800525c:	711a      	strb	r2, [r3, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2205      	movs	r2, #5
 8005266:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2229      	movs	r2, #41	@ 0x29
 800526c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800526e:	4b02      	ldr	r3, [pc, #8]	@ (8005278 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	2000014c 	.word	0x2000014c

0800527c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005284:	2181      	movs	r1, #129	@ 0x81
 8005286:	4815      	ldr	r0, [pc, #84]	@ (80052dc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005288:	f000 fcb9 	bl	8005bfe <USBD_GetEpDesc>
 800528c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800528e:	2101      	movs	r1, #1
 8005290:	4812      	ldr	r0, [pc, #72]	@ (80052dc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005292:	f000 fcb4 	bl	8005bfe <USBD_GetEpDesc>
 8005296:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d009      	beq.n	80052b2 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f042 0210 	orr.w	r2, r2, #16
 80052a6:	711a      	strb	r2, [r3, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2205      	movs	r2, #5
 80052b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d009      	beq.n	80052cc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f042 0202 	orr.w	r2, r2, #2
 80052c0:	711a      	strb	r2, [r3, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	2205      	movs	r2, #5
 80052ca:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2229      	movs	r2, #41	@ 0x29
 80052d0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80052d2:	4b02      	ldr	r3, [pc, #8]	@ (80052dc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	2000014c 	.word	0x2000014c

080052e0 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	32b0      	adds	r2, #176	@ 0xb0
 80052f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052fa:	2200      	movs	r2, #0
 80052fc:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	460b      	mov	r3, r1
 8005316:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	32b0      	adds	r2, #176	@ 0xb0
 8005322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800532a:	2303      	movs	r3, #3
 800532c:	e017      	b.n	800535e <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	32b0      	adds	r2, #176	@ 0xb0
 8005338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800533c:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	33b0      	adds	r3, #176	@ 0xb0
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	7810      	ldrb	r0, [r2, #0]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	7852      	ldrb	r2, [r2, #1]
 8005358:	4611      	mov	r1, r2
 800535a:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
	...

08005368 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	32b0      	adds	r2, #176	@ 0xb0
 800537a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005382:	2303      	movs	r3, #3
 8005384:	e00f      	b.n	80053a6 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	32b0      	adds	r2, #176	@ 0xb0
 8005390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005394:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8005396:	4b06      	ldr	r3, [pc, #24]	@ (80053b0 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8005398:	7819      	ldrb	r1, [r3, #0]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	2302      	movs	r3, #2
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f002 f860 	bl	8007464 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	2000018f 	.word	0x2000018f

080053b4 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	32b0      	adds	r2, #176	@ 0xb0
 80053c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ca:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e016      	b.n	8005404 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d111      	bne.n	8005402 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	33b0      	adds	r3, #176	@ 0xb0
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	7810      	ldrb	r0, [r2, #0]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	7852      	ldrb	r2, [r2, #1]
 80053f8:	4611      	mov	r1, r2
 80053fa:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	220a      	movs	r2, #10
 8005418:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800541a:	4b03      	ldr	r3, [pc, #12]	@ (8005428 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800541c:	4618      	mov	r0, r3
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	20000184 	.word	0x20000184

0800542c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800543c:	2303      	movs	r3, #3
 800543e:	e009      	b.n	8005454 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	33b0      	adds	r3, #176	@ 0xb0
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	4613      	mov	r3, r2
 800546c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005474:	2303      	movs	r3, #3
 8005476:	e01f      	b.n	80054b8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	79fa      	ldrb	r2, [r7, #7]
 80054aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f001 fe83 	bl	80071b8 <USBD_LL_Init>
 80054b2:	4603      	mov	r3, r0
 80054b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80054b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e025      	b.n	8005524 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	32ae      	adds	r2, #174	@ 0xae
 80054ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00f      	beq.n	8005514 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	32ae      	adds	r2, #174	@ 0xae
 80054fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005504:	f107 020e 	add.w	r2, r7, #14
 8005508:	4610      	mov	r0, r2
 800550a:	4798      	blx	r3
 800550c:	4602      	mov	r2, r0
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f001 fe8b 	bl	8007250 <USBD_LL_Start>
 800553a:	4603      	mov	r3, r0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800554c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800554e:	4618      	mov	r0, r3
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b084      	sub	sp, #16
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	460b      	mov	r3, r1
 8005564:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005566:	2300      	movs	r3, #0
 8005568:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005570:	2b00      	cmp	r3, #0
 8005572:	d009      	beq.n	8005588 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	78fa      	ldrb	r2, [r7, #3]
 800557e:	4611      	mov	r1, r2
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	4798      	blx	r3
 8005584:	4603      	mov	r3, r0
 8005586:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005588:	7bfb      	ldrb	r3, [r7, #15]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b084      	sub	sp, #16
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	460b      	mov	r3, r1
 800559c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	78fa      	ldrb	r2, [r7, #3]
 80055ac:	4611      	mov	r1, r2
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	4798      	blx	r3
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80055b8:	2303      	movs	r3, #3
 80055ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b084      	sub	sp, #16
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80055d6:	6839      	ldr	r1, [r7, #0]
 80055d8:	4618      	mov	r0, r3
 80055da:	f001 f936 	bl	800684a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80055ec:	461a      	mov	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80055fa:	f003 031f 	and.w	r3, r3, #31
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d01a      	beq.n	8005638 <USBD_LL_SetupStage+0x72>
 8005602:	2b02      	cmp	r3, #2
 8005604:	d822      	bhi.n	800564c <USBD_LL_SetupStage+0x86>
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <USBD_LL_SetupStage+0x4a>
 800560a:	2b01      	cmp	r3, #1
 800560c:	d00a      	beq.n	8005624 <USBD_LL_SetupStage+0x5e>
 800560e:	e01d      	b.n	800564c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005616:	4619      	mov	r1, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fb63 	bl	8005ce4 <USBD_StdDevReq>
 800561e:	4603      	mov	r3, r0
 8005620:	73fb      	strb	r3, [r7, #15]
      break;
 8005622:	e020      	b.n	8005666 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800562a:	4619      	mov	r1, r3
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 fbcb 	bl	8005dc8 <USBD_StdItfReq>
 8005632:	4603      	mov	r3, r0
 8005634:	73fb      	strb	r3, [r7, #15]
      break;
 8005636:	e016      	b.n	8005666 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800563e:	4619      	mov	r1, r3
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 fc2d 	bl	8005ea0 <USBD_StdEPReq>
 8005646:	4603      	mov	r3, r0
 8005648:	73fb      	strb	r3, [r7, #15]
      break;
 800564a:	e00c      	b.n	8005666 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005652:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005656:	b2db      	uxtb	r3, r3
 8005658:	4619      	mov	r1, r3
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f001 fe58 	bl	8007310 <USBD_LL_StallEP>
 8005660:	4603      	mov	r3, r0
 8005662:	73fb      	strb	r3, [r7, #15]
      break;
 8005664:	bf00      	nop
  }

  return ret;
 8005666:	7bfb      	ldrb	r3, [r7, #15]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	460b      	mov	r3, r1
 800567a:	607a      	str	r2, [r7, #4]
 800567c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005682:	7afb      	ldrb	r3, [r7, #11]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d16e      	bne.n	8005766 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800568e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005696:	2b03      	cmp	r3, #3
 8005698:	f040 8098 	bne.w	80057cc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d913      	bls.n	80056d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	1ad2      	subs	r2, r2, r3
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	68da      	ldr	r2, [r3, #12]
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	4293      	cmp	r3, r2
 80056c0:	bf28      	it	cs
 80056c2:	4613      	movcs	r3, r2
 80056c4:	461a      	mov	r2, r3
 80056c6:	6879      	ldr	r1, [r7, #4]
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f001 f9b2 	bl	8006a32 <USBD_CtlContinueRx>
 80056ce:	e07d      	b.n	80057cc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80056d6:	f003 031f 	and.w	r3, r3, #31
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d014      	beq.n	8005708 <USBD_LL_DataOutStage+0x98>
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d81d      	bhi.n	800571e <USBD_LL_DataOutStage+0xae>
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <USBD_LL_DataOutStage+0x7c>
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d003      	beq.n	80056f2 <USBD_LL_DataOutStage+0x82>
 80056ea:	e018      	b.n	800571e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	75bb      	strb	r3, [r7, #22]
            break;
 80056f0:	e018      	b.n	8005724 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	4619      	mov	r1, r3
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f000 fa64 	bl	8005bca <USBD_CoreFindIF>
 8005702:	4603      	mov	r3, r0
 8005704:	75bb      	strb	r3, [r7, #22]
            break;
 8005706:	e00d      	b.n	8005724 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800570e:	b2db      	uxtb	r3, r3
 8005710:	4619      	mov	r1, r3
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 fa66 	bl	8005be4 <USBD_CoreFindEP>
 8005718:	4603      	mov	r3, r0
 800571a:	75bb      	strb	r3, [r7, #22]
            break;
 800571c:	e002      	b.n	8005724 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	75bb      	strb	r3, [r7, #22]
            break;
 8005722:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005724:	7dbb      	ldrb	r3, [r7, #22]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d119      	bne.n	800575e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b03      	cmp	r3, #3
 8005734:	d113      	bne.n	800575e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005736:	7dba      	ldrb	r2, [r7, #22]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	32ae      	adds	r2, #174	@ 0xae
 800573c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00b      	beq.n	800575e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005746:	7dba      	ldrb	r2, [r7, #22]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800574e:	7dba      	ldrb	r2, [r7, #22]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	32ae      	adds	r2, #174	@ 0xae
 8005754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f001 f978 	bl	8006a54 <USBD_CtlSendStatus>
 8005764:	e032      	b.n	80057cc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005766:	7afb      	ldrb	r3, [r7, #11]
 8005768:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800576c:	b2db      	uxtb	r3, r3
 800576e:	4619      	mov	r1, r3
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 fa37 	bl	8005be4 <USBD_CoreFindEP>
 8005776:	4603      	mov	r3, r0
 8005778:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800577a:	7dbb      	ldrb	r3, [r7, #22]
 800577c:	2bff      	cmp	r3, #255	@ 0xff
 800577e:	d025      	beq.n	80057cc <USBD_LL_DataOutStage+0x15c>
 8005780:	7dbb      	ldrb	r3, [r7, #22]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d122      	bne.n	80057cc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b03      	cmp	r3, #3
 8005790:	d117      	bne.n	80057c2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005792:	7dba      	ldrb	r2, [r7, #22]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	32ae      	adds	r2, #174	@ 0xae
 8005798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00f      	beq.n	80057c2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80057a2:	7dba      	ldrb	r2, [r7, #22]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80057aa:	7dba      	ldrb	r2, [r7, #22]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	32ae      	adds	r2, #174	@ 0xae
 80057b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	7afa      	ldrb	r2, [r7, #11]
 80057b8:	4611      	mov	r1, r2
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	4798      	blx	r3
 80057be:	4603      	mov	r3, r0
 80057c0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80057c2:	7dfb      	ldrb	r3, [r7, #23]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80057c8:	7dfb      	ldrb	r3, [r7, #23]
 80057ca:	e000      	b.n	80057ce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3718      	adds	r7, #24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b086      	sub	sp, #24
 80057da:	af00      	add	r7, sp, #0
 80057dc:	60f8      	str	r0, [r7, #12]
 80057de:	460b      	mov	r3, r1
 80057e0:	607a      	str	r2, [r7, #4]
 80057e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80057e4:	7afb      	ldrb	r3, [r7, #11]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d16f      	bne.n	80058ca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	3314      	adds	r3, #20
 80057ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d15a      	bne.n	80058b0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	429a      	cmp	r2, r3
 8005804:	d914      	bls.n	8005830 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	689a      	ldr	r2, [r3, #8]
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	1ad2      	subs	r2, r2, r3
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	461a      	mov	r2, r3
 800581a:	6879      	ldr	r1, [r7, #4]
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f001 f8da 	bl	80069d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005822:	2300      	movs	r3, #0
 8005824:	2200      	movs	r2, #0
 8005826:	2100      	movs	r1, #0
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f001 fe1b 	bl	8007464 <USBD_LL_PrepareReceive>
 800582e:	e03f      	b.n	80058b0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	429a      	cmp	r2, r3
 800583a:	d11c      	bne.n	8005876 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005844:	429a      	cmp	r2, r3
 8005846:	d316      	bcc.n	8005876 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005852:	429a      	cmp	r2, r3
 8005854:	d20f      	bcs.n	8005876 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005856:	2200      	movs	r2, #0
 8005858:	2100      	movs	r1, #0
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f001 f8bb 	bl	80069d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005868:	2300      	movs	r3, #0
 800586a:	2200      	movs	r2, #0
 800586c:	2100      	movs	r1, #0
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f001 fdf8 	bl	8007464 <USBD_LL_PrepareReceive>
 8005874:	e01c      	b.n	80058b0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b03      	cmp	r3, #3
 8005880:	d10f      	bne.n	80058a2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d009      	beq.n	80058a2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80058a2:	2180      	movs	r1, #128	@ 0x80
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f001 fd33 	bl	8007310 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f001 f8e5 	bl	8006a7a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d03a      	beq.n	8005930 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f7ff fe42 	bl	8005544 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80058c8:	e032      	b.n	8005930 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80058ca:	7afb      	ldrb	r3, [r7, #11]
 80058cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	4619      	mov	r1, r3
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 f985 	bl	8005be4 <USBD_CoreFindEP>
 80058da:	4603      	mov	r3, r0
 80058dc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80058de:	7dfb      	ldrb	r3, [r7, #23]
 80058e0:	2bff      	cmp	r3, #255	@ 0xff
 80058e2:	d025      	beq.n	8005930 <USBD_LL_DataInStage+0x15a>
 80058e4:	7dfb      	ldrb	r3, [r7, #23]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d122      	bne.n	8005930 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b03      	cmp	r3, #3
 80058f4:	d11c      	bne.n	8005930 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80058f6:	7dfa      	ldrb	r2, [r7, #23]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	32ae      	adds	r2, #174	@ 0xae
 80058fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d014      	beq.n	8005930 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005906:	7dfa      	ldrb	r2, [r7, #23]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800590e:	7dfa      	ldrb	r2, [r7, #23]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	32ae      	adds	r2, #174	@ 0xae
 8005914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	7afa      	ldrb	r2, [r7, #11]
 800591c:	4611      	mov	r1, r2
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	4798      	blx	r3
 8005922:	4603      	mov	r3, r0
 8005924:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005926:	7dbb      	ldrb	r3, [r7, #22]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800592c:	7dbb      	ldrb	r3, [r7, #22]
 800592e:	e000      	b.n	8005932 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b084      	sub	sp, #16
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005972:	2b00      	cmp	r3, #0
 8005974:	d014      	beq.n	80059a0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00e      	beq.n	80059a0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	6852      	ldr	r2, [r2, #4]
 800598e:	b2d2      	uxtb	r2, r2
 8005990:	4611      	mov	r1, r2
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	4798      	blx	r3
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800599c:	2303      	movs	r3, #3
 800599e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059a0:	2340      	movs	r3, #64	@ 0x40
 80059a2:	2200      	movs	r2, #0
 80059a4:	2100      	movs	r1, #0
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f001 fc6d 	bl	8007286 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2240      	movs	r2, #64	@ 0x40
 80059b8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059bc:	2340      	movs	r3, #64	@ 0x40
 80059be:	2200      	movs	r2, #0
 80059c0:	2180      	movs	r1, #128	@ 0x80
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f001 fc5f 	bl	8007286 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2240      	movs	r2, #64	@ 0x40
 80059d2:	621a      	str	r2, [r3, #32]

  return ret;
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	460b      	mov	r3, r1
 80059e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	78fa      	ldrb	r2, [r7, #3]
 80059ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b083      	sub	sp, #12
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	d006      	beq.n	8005a20 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2204      	movs	r2, #4
 8005a24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d106      	bne.n	8005a58 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b082      	sub	sp, #8
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	d110      	bne.n	8005a9c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00b      	beq.n	8005a9c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d005      	beq.n	8005a9c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b082      	sub	sp, #8
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
 8005aae:	460b      	mov	r3, r1
 8005ab0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	32ae      	adds	r2, #174	@ 0xae
 8005abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e01c      	b.n	8005b02 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d115      	bne.n	8005b00 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	32ae      	adds	r2, #174	@ 0xae
 8005ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00b      	beq.n	8005b00 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	32ae      	adds	r2, #174	@ 0xae
 8005af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af6:	6a1b      	ldr	r3, [r3, #32]
 8005af8:	78fa      	ldrb	r2, [r7, #3]
 8005afa:	4611      	mov	r1, r2
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b082      	sub	sp, #8
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	460b      	mov	r3, r1
 8005b14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	32ae      	adds	r2, #174	@ 0xae
 8005b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e01c      	b.n	8005b66 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b03      	cmp	r3, #3
 8005b36:	d115      	bne.n	8005b64 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	32ae      	adds	r2, #174	@ 0xae
 8005b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00b      	beq.n	8005b64 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	32ae      	adds	r2, #174	@ 0xae
 8005b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5c:	78fa      	ldrb	r2, [r7, #3]
 8005b5e:	4611      	mov	r1, r2
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00e      	beq.n	8005bc0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	6852      	ldr	r2, [r2, #4]
 8005bae:	b2d2      	uxtb	r2, r2
 8005bb0:	4611      	mov	r1, r2
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	4798      	blx	r3
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b083      	sub	sp, #12
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005bd6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	460b      	mov	r3, r1
 8005bee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005bf0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b086      	sub	sp, #24
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	460b      	mov	r3, r1
 8005c08:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005c12:	2300      	movs	r3, #0
 8005c14:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	885b      	ldrh	r3, [r3, #2]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	7812      	ldrb	r2, [r2, #0]
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d91f      	bls.n	8005c64 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005c2a:	e013      	b.n	8005c54 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005c2c:	f107 030a 	add.w	r3, r7, #10
 8005c30:	4619      	mov	r1, r3
 8005c32:	6978      	ldr	r0, [r7, #20]
 8005c34:	f000 f81b 	bl	8005c6e <USBD_GetNextDesc>
 8005c38:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	785b      	ldrb	r3, [r3, #1]
 8005c3e:	2b05      	cmp	r3, #5
 8005c40:	d108      	bne.n	8005c54 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	789b      	ldrb	r3, [r3, #2]
 8005c4a:	78fa      	ldrb	r2, [r7, #3]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d008      	beq.n	8005c62 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005c50:	2300      	movs	r3, #0
 8005c52:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	885b      	ldrh	r3, [r3, #2]
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	897b      	ldrh	r3, [r7, #10]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d8e5      	bhi.n	8005c2c <USBD_GetEpDesc+0x2e>
 8005c60:	e000      	b.n	8005c64 <USBD_GetEpDesc+0x66>
          break;
 8005c62:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005c64:	693b      	ldr	r3, [r7, #16]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b085      	sub	sp, #20
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	7812      	ldrb	r2, [r2, #0]
 8005c84:	4413      	add	r3, r2
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	461a      	mov	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4413      	add	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005c98:	68fb      	ldr	r3, [r7, #12]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b087      	sub	sp, #28
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005cc4:	8a3b      	ldrh	r3, [r7, #16]
 8005cc6:	021b      	lsls	r3, r3, #8
 8005cc8:	b21a      	sxth	r2, r3
 8005cca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	b21b      	sxth	r3, r3
 8005cd2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005cd4:	89fb      	ldrh	r3, [r7, #14]
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
	...

08005ce4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005cfa:	2b40      	cmp	r3, #64	@ 0x40
 8005cfc:	d005      	beq.n	8005d0a <USBD_StdDevReq+0x26>
 8005cfe:	2b40      	cmp	r3, #64	@ 0x40
 8005d00:	d857      	bhi.n	8005db2 <USBD_StdDevReq+0xce>
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00f      	beq.n	8005d26 <USBD_StdDevReq+0x42>
 8005d06:	2b20      	cmp	r3, #32
 8005d08:	d153      	bne.n	8005db2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	32ae      	adds	r2, #174	@ 0xae
 8005d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	6839      	ldr	r1, [r7, #0]
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	4798      	blx	r3
 8005d20:	4603      	mov	r3, r0
 8005d22:	73fb      	strb	r3, [r7, #15]
      break;
 8005d24:	e04a      	b.n	8005dbc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	785b      	ldrb	r3, [r3, #1]
 8005d2a:	2b09      	cmp	r3, #9
 8005d2c:	d83b      	bhi.n	8005da6 <USBD_StdDevReq+0xc2>
 8005d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d34 <USBD_StdDevReq+0x50>)
 8005d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d34:	08005d89 	.word	0x08005d89
 8005d38:	08005d9d 	.word	0x08005d9d
 8005d3c:	08005da7 	.word	0x08005da7
 8005d40:	08005d93 	.word	0x08005d93
 8005d44:	08005da7 	.word	0x08005da7
 8005d48:	08005d67 	.word	0x08005d67
 8005d4c:	08005d5d 	.word	0x08005d5d
 8005d50:	08005da7 	.word	0x08005da7
 8005d54:	08005d7f 	.word	0x08005d7f
 8005d58:	08005d71 	.word	0x08005d71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005d5c:	6839      	ldr	r1, [r7, #0]
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fa3c 	bl	80061dc <USBD_GetDescriptor>
          break;
 8005d64:	e024      	b.n	8005db0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005d66:	6839      	ldr	r1, [r7, #0]
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 fbcb 	bl	8006504 <USBD_SetAddress>
          break;
 8005d6e:	e01f      	b.n	8005db0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005d70:	6839      	ldr	r1, [r7, #0]
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fc0a 	bl	800658c <USBD_SetConfig>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	73fb      	strb	r3, [r7, #15]
          break;
 8005d7c:	e018      	b.n	8005db0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005d7e:	6839      	ldr	r1, [r7, #0]
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fcad 	bl	80066e0 <USBD_GetConfig>
          break;
 8005d86:	e013      	b.n	8005db0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005d88:	6839      	ldr	r1, [r7, #0]
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fcde 	bl	800674c <USBD_GetStatus>
          break;
 8005d90:	e00e      	b.n	8005db0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005d92:	6839      	ldr	r1, [r7, #0]
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 fd0d 	bl	80067b4 <USBD_SetFeature>
          break;
 8005d9a:	e009      	b.n	8005db0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fd31 	bl	8006806 <USBD_ClrFeature>
          break;
 8005da4:	e004      	b.n	8005db0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005da6:	6839      	ldr	r1, [r7, #0]
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fd88 	bl	80068be <USBD_CtlError>
          break;
 8005dae:	bf00      	nop
      }
      break;
 8005db0:	e004      	b.n	8005dbc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005db2:	6839      	ldr	r1, [r7, #0]
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 fd82 	bl	80068be <USBD_CtlError>
      break;
 8005dba:	bf00      	nop
  }

  return ret;
 8005dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop

08005dc8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005dde:	2b40      	cmp	r3, #64	@ 0x40
 8005de0:	d005      	beq.n	8005dee <USBD_StdItfReq+0x26>
 8005de2:	2b40      	cmp	r3, #64	@ 0x40
 8005de4:	d852      	bhi.n	8005e8c <USBD_StdItfReq+0xc4>
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <USBD_StdItfReq+0x26>
 8005dea:	2b20      	cmp	r3, #32
 8005dec:	d14e      	bne.n	8005e8c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	3b01      	subs	r3, #1
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d840      	bhi.n	8005e7e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	889b      	ldrh	r3, [r3, #4]
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d836      	bhi.n	8005e74 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	889b      	ldrh	r3, [r3, #4]
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7ff fedb 	bl	8005bca <USBD_CoreFindIF>
 8005e14:	4603      	mov	r3, r0
 8005e16:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e18:	7bbb      	ldrb	r3, [r7, #14]
 8005e1a:	2bff      	cmp	r3, #255	@ 0xff
 8005e1c:	d01d      	beq.n	8005e5a <USBD_StdItfReq+0x92>
 8005e1e:	7bbb      	ldrb	r3, [r7, #14]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d11a      	bne.n	8005e5a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005e24:	7bba      	ldrb	r2, [r7, #14]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	32ae      	adds	r2, #174	@ 0xae
 8005e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00f      	beq.n	8005e54 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005e34:	7bba      	ldrb	r2, [r7, #14]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005e3c:	7bba      	ldrb	r2, [r7, #14]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	32ae      	adds	r2, #174	@ 0xae
 8005e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	6839      	ldr	r1, [r7, #0]
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	4798      	blx	r3
 8005e4e:	4603      	mov	r3, r0
 8005e50:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005e52:	e004      	b.n	8005e5e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005e54:	2303      	movs	r3, #3
 8005e56:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005e58:	e001      	b.n	8005e5e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	88db      	ldrh	r3, [r3, #6]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d110      	bne.n	8005e88 <USBD_StdItfReq+0xc0>
 8005e66:	7bfb      	ldrb	r3, [r7, #15]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10d      	bne.n	8005e88 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fdf1 	bl	8006a54 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005e72:	e009      	b.n	8005e88 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005e74:	6839      	ldr	r1, [r7, #0]
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fd21 	bl	80068be <USBD_CtlError>
          break;
 8005e7c:	e004      	b.n	8005e88 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fd1c 	bl	80068be <USBD_CtlError>
          break;
 8005e86:	e000      	b.n	8005e8a <USBD_StdItfReq+0xc2>
          break;
 8005e88:	bf00      	nop
      }
      break;
 8005e8a:	e004      	b.n	8005e96 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005e8c:	6839      	ldr	r1, [r7, #0]
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fd15 	bl	80068be <USBD_CtlError>
      break;
 8005e94:	bf00      	nop
  }

  return ret;
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	889b      	ldrh	r3, [r3, #4]
 8005eb2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005ebc:	2b40      	cmp	r3, #64	@ 0x40
 8005ebe:	d007      	beq.n	8005ed0 <USBD_StdEPReq+0x30>
 8005ec0:	2b40      	cmp	r3, #64	@ 0x40
 8005ec2:	f200 817f 	bhi.w	80061c4 <USBD_StdEPReq+0x324>
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d02a      	beq.n	8005f20 <USBD_StdEPReq+0x80>
 8005eca:	2b20      	cmp	r3, #32
 8005ecc:	f040 817a 	bne.w	80061c4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005ed0:	7bbb      	ldrb	r3, [r7, #14]
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f7ff fe85 	bl	8005be4 <USBD_CoreFindEP>
 8005eda:	4603      	mov	r3, r0
 8005edc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ede:	7b7b      	ldrb	r3, [r7, #13]
 8005ee0:	2bff      	cmp	r3, #255	@ 0xff
 8005ee2:	f000 8174 	beq.w	80061ce <USBD_StdEPReq+0x32e>
 8005ee6:	7b7b      	ldrb	r3, [r7, #13]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f040 8170 	bne.w	80061ce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005eee:	7b7a      	ldrb	r2, [r7, #13]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005ef6:	7b7a      	ldrb	r2, [r7, #13]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	32ae      	adds	r2, #174	@ 0xae
 8005efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 8163 	beq.w	80061ce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005f08:	7b7a      	ldrb	r2, [r7, #13]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	32ae      	adds	r2, #174	@ 0xae
 8005f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	6839      	ldr	r1, [r7, #0]
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	4798      	blx	r3
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f1e:	e156      	b.n	80061ce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	785b      	ldrb	r3, [r3, #1]
 8005f24:	2b03      	cmp	r3, #3
 8005f26:	d008      	beq.n	8005f3a <USBD_StdEPReq+0x9a>
 8005f28:	2b03      	cmp	r3, #3
 8005f2a:	f300 8145 	bgt.w	80061b8 <USBD_StdEPReq+0x318>
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f000 809b 	beq.w	800606a <USBD_StdEPReq+0x1ca>
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d03c      	beq.n	8005fb2 <USBD_StdEPReq+0x112>
 8005f38:	e13e      	b.n	80061b8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d002      	beq.n	8005f4c <USBD_StdEPReq+0xac>
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	d016      	beq.n	8005f78 <USBD_StdEPReq+0xd8>
 8005f4a:	e02c      	b.n	8005fa6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f4c:	7bbb      	ldrb	r3, [r7, #14]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00d      	beq.n	8005f6e <USBD_StdEPReq+0xce>
 8005f52:	7bbb      	ldrb	r3, [r7, #14]
 8005f54:	2b80      	cmp	r3, #128	@ 0x80
 8005f56:	d00a      	beq.n	8005f6e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f58:	7bbb      	ldrb	r3, [r7, #14]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f001 f9d7 	bl	8007310 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f62:	2180      	movs	r1, #128	@ 0x80
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f001 f9d3 	bl	8007310 <USBD_LL_StallEP>
 8005f6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f6c:	e020      	b.n	8005fb0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005f6e:	6839      	ldr	r1, [r7, #0]
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 fca4 	bl	80068be <USBD_CtlError>
              break;
 8005f76:	e01b      	b.n	8005fb0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	885b      	ldrh	r3, [r3, #2]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10e      	bne.n	8005f9e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f80:	7bbb      	ldrb	r3, [r7, #14]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00b      	beq.n	8005f9e <USBD_StdEPReq+0xfe>
 8005f86:	7bbb      	ldrb	r3, [r7, #14]
 8005f88:	2b80      	cmp	r3, #128	@ 0x80
 8005f8a:	d008      	beq.n	8005f9e <USBD_StdEPReq+0xfe>
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	88db      	ldrh	r3, [r3, #6]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d104      	bne.n	8005f9e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f94:	7bbb      	ldrb	r3, [r7, #14]
 8005f96:	4619      	mov	r1, r3
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f001 f9b9 	bl	8007310 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 fd58 	bl	8006a54 <USBD_CtlSendStatus>

              break;
 8005fa4:	e004      	b.n	8005fb0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005fa6:	6839      	ldr	r1, [r7, #0]
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fc88 	bl	80068be <USBD_CtlError>
              break;
 8005fae:	bf00      	nop
          }
          break;
 8005fb0:	e107      	b.n	80061c2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d002      	beq.n	8005fc4 <USBD_StdEPReq+0x124>
 8005fbe:	2b03      	cmp	r3, #3
 8005fc0:	d016      	beq.n	8005ff0 <USBD_StdEPReq+0x150>
 8005fc2:	e04b      	b.n	800605c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fc4:	7bbb      	ldrb	r3, [r7, #14]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00d      	beq.n	8005fe6 <USBD_StdEPReq+0x146>
 8005fca:	7bbb      	ldrb	r3, [r7, #14]
 8005fcc:	2b80      	cmp	r3, #128	@ 0x80
 8005fce:	d00a      	beq.n	8005fe6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005fd0:	7bbb      	ldrb	r3, [r7, #14]
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f001 f99b 	bl	8007310 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fda:	2180      	movs	r1, #128	@ 0x80
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f001 f997 	bl	8007310 <USBD_LL_StallEP>
 8005fe2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005fe4:	e040      	b.n	8006068 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005fe6:	6839      	ldr	r1, [r7, #0]
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 fc68 	bl	80068be <USBD_CtlError>
              break;
 8005fee:	e03b      	b.n	8006068 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	885b      	ldrh	r3, [r3, #2]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d136      	bne.n	8006066 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005ff8:	7bbb      	ldrb	r3, [r7, #14]
 8005ffa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d004      	beq.n	800600c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006002:	7bbb      	ldrb	r3, [r7, #14]
 8006004:	4619      	mov	r1, r3
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f001 f9a1 	bl	800734e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fd21 	bl	8006a54 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006012:	7bbb      	ldrb	r3, [r7, #14]
 8006014:	4619      	mov	r1, r3
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7ff fde4 	bl	8005be4 <USBD_CoreFindEP>
 800601c:	4603      	mov	r3, r0
 800601e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006020:	7b7b      	ldrb	r3, [r7, #13]
 8006022:	2bff      	cmp	r3, #255	@ 0xff
 8006024:	d01f      	beq.n	8006066 <USBD_StdEPReq+0x1c6>
 8006026:	7b7b      	ldrb	r3, [r7, #13]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d11c      	bne.n	8006066 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800602c:	7b7a      	ldrb	r2, [r7, #13]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006034:	7b7a      	ldrb	r2, [r7, #13]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	32ae      	adds	r2, #174	@ 0xae
 800603a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d010      	beq.n	8006066 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006044:	7b7a      	ldrb	r2, [r7, #13]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	32ae      	adds	r2, #174	@ 0xae
 800604a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	6839      	ldr	r1, [r7, #0]
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	4798      	blx	r3
 8006056:	4603      	mov	r3, r0
 8006058:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800605a:	e004      	b.n	8006066 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800605c:	6839      	ldr	r1, [r7, #0]
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fc2d 	bl	80068be <USBD_CtlError>
              break;
 8006064:	e000      	b.n	8006068 <USBD_StdEPReq+0x1c8>
              break;
 8006066:	bf00      	nop
          }
          break;
 8006068:	e0ab      	b.n	80061c2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b02      	cmp	r3, #2
 8006074:	d002      	beq.n	800607c <USBD_StdEPReq+0x1dc>
 8006076:	2b03      	cmp	r3, #3
 8006078:	d032      	beq.n	80060e0 <USBD_StdEPReq+0x240>
 800607a:	e097      	b.n	80061ac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800607c:	7bbb      	ldrb	r3, [r7, #14]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d007      	beq.n	8006092 <USBD_StdEPReq+0x1f2>
 8006082:	7bbb      	ldrb	r3, [r7, #14]
 8006084:	2b80      	cmp	r3, #128	@ 0x80
 8006086:	d004      	beq.n	8006092 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006088:	6839      	ldr	r1, [r7, #0]
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fc17 	bl	80068be <USBD_CtlError>
                break;
 8006090:	e091      	b.n	80061b6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006092:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006096:	2b00      	cmp	r3, #0
 8006098:	da0b      	bge.n	80060b2 <USBD_StdEPReq+0x212>
 800609a:	7bbb      	ldrb	r3, [r7, #14]
 800609c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80060a0:	4613      	mov	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	3310      	adds	r3, #16
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	4413      	add	r3, r2
 80060ae:	3304      	adds	r3, #4
 80060b0:	e00b      	b.n	80060ca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80060b2:	7bbb      	ldrb	r3, [r7, #14]
 80060b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060b8:	4613      	mov	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	4413      	add	r3, r2
 80060c8:	3304      	adds	r3, #4
 80060ca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	2200      	movs	r2, #0
 80060d0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2202      	movs	r2, #2
 80060d6:	4619      	mov	r1, r3
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fc61 	bl	80069a0 <USBD_CtlSendData>
              break;
 80060de:	e06a      	b.n	80061b6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80060e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	da11      	bge.n	800610c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80060e8:	7bbb      	ldrb	r3, [r7, #14]
 80060ea:	f003 020f 	and.w	r2, r3, #15
 80060ee:	6879      	ldr	r1, [r7, #4]
 80060f0:	4613      	mov	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	440b      	add	r3, r1
 80060fa:	3324      	adds	r3, #36	@ 0x24
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d117      	bne.n	8006132 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006102:	6839      	ldr	r1, [r7, #0]
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fbda 	bl	80068be <USBD_CtlError>
                  break;
 800610a:	e054      	b.n	80061b6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800610c:	7bbb      	ldrb	r3, [r7, #14]
 800610e:	f003 020f 	and.w	r2, r3, #15
 8006112:	6879      	ldr	r1, [r7, #4]
 8006114:	4613      	mov	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	440b      	add	r3, r1
 800611e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d104      	bne.n	8006132 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006128:	6839      	ldr	r1, [r7, #0]
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 fbc7 	bl	80068be <USBD_CtlError>
                  break;
 8006130:	e041      	b.n	80061b6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006132:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006136:	2b00      	cmp	r3, #0
 8006138:	da0b      	bge.n	8006152 <USBD_StdEPReq+0x2b2>
 800613a:	7bbb      	ldrb	r3, [r7, #14]
 800613c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006140:	4613      	mov	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	3310      	adds	r3, #16
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	4413      	add	r3, r2
 800614e:	3304      	adds	r3, #4
 8006150:	e00b      	b.n	800616a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006152:	7bbb      	ldrb	r3, [r7, #14]
 8006154:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006158:	4613      	mov	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	4413      	add	r3, r2
 8006168:	3304      	adds	r3, #4
 800616a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800616c:	7bbb      	ldrb	r3, [r7, #14]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d002      	beq.n	8006178 <USBD_StdEPReq+0x2d8>
 8006172:	7bbb      	ldrb	r3, [r7, #14]
 8006174:	2b80      	cmp	r3, #128	@ 0x80
 8006176:	d103      	bne.n	8006180 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	2200      	movs	r2, #0
 800617c:	601a      	str	r2, [r3, #0]
 800617e:	e00e      	b.n	800619e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006180:	7bbb      	ldrb	r3, [r7, #14]
 8006182:	4619      	mov	r1, r3
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f001 f901 	bl	800738c <USBD_LL_IsStallEP>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	2201      	movs	r2, #1
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	e002      	b.n	800619e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2200      	movs	r2, #0
 800619c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	2202      	movs	r2, #2
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fbfb 	bl	80069a0 <USBD_CtlSendData>
              break;
 80061aa:	e004      	b.n	80061b6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80061ac:	6839      	ldr	r1, [r7, #0]
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fb85 	bl	80068be <USBD_CtlError>
              break;
 80061b4:	bf00      	nop
          }
          break;
 80061b6:	e004      	b.n	80061c2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80061b8:	6839      	ldr	r1, [r7, #0]
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 fb7f 	bl	80068be <USBD_CtlError>
          break;
 80061c0:	bf00      	nop
      }
      break;
 80061c2:	e005      	b.n	80061d0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80061c4:	6839      	ldr	r1, [r7, #0]
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fb79 	bl	80068be <USBD_CtlError>
      break;
 80061cc:	e000      	b.n	80061d0 <USBD_StdEPReq+0x330>
      break;
 80061ce:	bf00      	nop
  }

  return ret;
 80061d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
	...

080061dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80061ea:	2300      	movs	r3, #0
 80061ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	885b      	ldrh	r3, [r3, #2]
 80061f6:	0a1b      	lsrs	r3, r3, #8
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	3b01      	subs	r3, #1
 80061fc:	2b0e      	cmp	r3, #14
 80061fe:	f200 8152 	bhi.w	80064a6 <USBD_GetDescriptor+0x2ca>
 8006202:	a201      	add	r2, pc, #4	@ (adr r2, 8006208 <USBD_GetDescriptor+0x2c>)
 8006204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006208:	08006279 	.word	0x08006279
 800620c:	08006291 	.word	0x08006291
 8006210:	080062d1 	.word	0x080062d1
 8006214:	080064a7 	.word	0x080064a7
 8006218:	080064a7 	.word	0x080064a7
 800621c:	08006447 	.word	0x08006447
 8006220:	08006473 	.word	0x08006473
 8006224:	080064a7 	.word	0x080064a7
 8006228:	080064a7 	.word	0x080064a7
 800622c:	080064a7 	.word	0x080064a7
 8006230:	080064a7 	.word	0x080064a7
 8006234:	080064a7 	.word	0x080064a7
 8006238:	080064a7 	.word	0x080064a7
 800623c:	080064a7 	.word	0x080064a7
 8006240:	08006245 	.word	0x08006245
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00b      	beq.n	8006268 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	7c12      	ldrb	r2, [r2, #16]
 800625c:	f107 0108 	add.w	r1, r7, #8
 8006260:	4610      	mov	r0, r2
 8006262:	4798      	blx	r3
 8006264:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006266:	e126      	b.n	80064b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fb27 	bl	80068be <USBD_CtlError>
        err++;
 8006270:	7afb      	ldrb	r3, [r7, #11]
 8006272:	3301      	adds	r3, #1
 8006274:	72fb      	strb	r3, [r7, #11]
      break;
 8006276:	e11e      	b.n	80064b6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	7c12      	ldrb	r2, [r2, #16]
 8006284:	f107 0108 	add.w	r1, r7, #8
 8006288:	4610      	mov	r0, r2
 800628a:	4798      	blx	r3
 800628c:	60f8      	str	r0, [r7, #12]
      break;
 800628e:	e112      	b.n	80064b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	7c1b      	ldrb	r3, [r3, #16]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10d      	bne.n	80062b4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800629e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a0:	f107 0208 	add.w	r2, r7, #8
 80062a4:	4610      	mov	r0, r2
 80062a6:	4798      	blx	r3
 80062a8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3301      	adds	r3, #1
 80062ae:	2202      	movs	r2, #2
 80062b0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80062b2:	e100      	b.n	80064b6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062bc:	f107 0208 	add.w	r2, r7, #8
 80062c0:	4610      	mov	r0, r2
 80062c2:	4798      	blx	r3
 80062c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3301      	adds	r3, #1
 80062ca:	2202      	movs	r2, #2
 80062cc:	701a      	strb	r2, [r3, #0]
      break;
 80062ce:	e0f2      	b.n	80064b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	885b      	ldrh	r3, [r3, #2]
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b05      	cmp	r3, #5
 80062d8:	f200 80ac 	bhi.w	8006434 <USBD_GetDescriptor+0x258>
 80062dc:	a201      	add	r2, pc, #4	@ (adr r2, 80062e4 <USBD_GetDescriptor+0x108>)
 80062de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e2:	bf00      	nop
 80062e4:	080062fd 	.word	0x080062fd
 80062e8:	08006331 	.word	0x08006331
 80062ec:	08006365 	.word	0x08006365
 80062f0:	08006399 	.word	0x08006399
 80062f4:	080063cd 	.word	0x080063cd
 80062f8:	08006401 	.word	0x08006401
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00b      	beq.n	8006320 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	7c12      	ldrb	r2, [r2, #16]
 8006314:	f107 0108 	add.w	r1, r7, #8
 8006318:	4610      	mov	r0, r2
 800631a:	4798      	blx	r3
 800631c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800631e:	e091      	b.n	8006444 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006320:	6839      	ldr	r1, [r7, #0]
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 facb 	bl	80068be <USBD_CtlError>
            err++;
 8006328:	7afb      	ldrb	r3, [r7, #11]
 800632a:	3301      	adds	r3, #1
 800632c:	72fb      	strb	r3, [r7, #11]
          break;
 800632e:	e089      	b.n	8006444 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00b      	beq.n	8006354 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	7c12      	ldrb	r2, [r2, #16]
 8006348:	f107 0108 	add.w	r1, r7, #8
 800634c:	4610      	mov	r0, r2
 800634e:	4798      	blx	r3
 8006350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006352:	e077      	b.n	8006444 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006354:	6839      	ldr	r1, [r7, #0]
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 fab1 	bl	80068be <USBD_CtlError>
            err++;
 800635c:	7afb      	ldrb	r3, [r7, #11]
 800635e:	3301      	adds	r3, #1
 8006360:	72fb      	strb	r3, [r7, #11]
          break;
 8006362:	e06f      	b.n	8006444 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00b      	beq.n	8006388 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	7c12      	ldrb	r2, [r2, #16]
 800637c:	f107 0108 	add.w	r1, r7, #8
 8006380:	4610      	mov	r0, r2
 8006382:	4798      	blx	r3
 8006384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006386:	e05d      	b.n	8006444 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006388:	6839      	ldr	r1, [r7, #0]
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fa97 	bl	80068be <USBD_CtlError>
            err++;
 8006390:	7afb      	ldrb	r3, [r7, #11]
 8006392:	3301      	adds	r3, #1
 8006394:	72fb      	strb	r3, [r7, #11]
          break;
 8006396:	e055      	b.n	8006444 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00b      	beq.n	80063bc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	7c12      	ldrb	r2, [r2, #16]
 80063b0:	f107 0108 	add.w	r1, r7, #8
 80063b4:	4610      	mov	r0, r2
 80063b6:	4798      	blx	r3
 80063b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063ba:	e043      	b.n	8006444 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80063bc:	6839      	ldr	r1, [r7, #0]
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fa7d 	bl	80068be <USBD_CtlError>
            err++;
 80063c4:	7afb      	ldrb	r3, [r7, #11]
 80063c6:	3301      	adds	r3, #1
 80063c8:	72fb      	strb	r3, [r7, #11]
          break;
 80063ca:	e03b      	b.n	8006444 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00b      	beq.n	80063f0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	7c12      	ldrb	r2, [r2, #16]
 80063e4:	f107 0108 	add.w	r1, r7, #8
 80063e8:	4610      	mov	r0, r2
 80063ea:	4798      	blx	r3
 80063ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063ee:	e029      	b.n	8006444 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80063f0:	6839      	ldr	r1, [r7, #0]
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fa63 	bl	80068be <USBD_CtlError>
            err++;
 80063f8:	7afb      	ldrb	r3, [r7, #11]
 80063fa:	3301      	adds	r3, #1
 80063fc:	72fb      	strb	r3, [r7, #11]
          break;
 80063fe:	e021      	b.n	8006444 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00b      	beq.n	8006424 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	7c12      	ldrb	r2, [r2, #16]
 8006418:	f107 0108 	add.w	r1, r7, #8
 800641c:	4610      	mov	r0, r2
 800641e:	4798      	blx	r3
 8006420:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006422:	e00f      	b.n	8006444 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fa49 	bl	80068be <USBD_CtlError>
            err++;
 800642c:	7afb      	ldrb	r3, [r7, #11]
 800642e:	3301      	adds	r3, #1
 8006430:	72fb      	strb	r3, [r7, #11]
          break;
 8006432:	e007      	b.n	8006444 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006434:	6839      	ldr	r1, [r7, #0]
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fa41 	bl	80068be <USBD_CtlError>
          err++;
 800643c:	7afb      	ldrb	r3, [r7, #11]
 800643e:	3301      	adds	r3, #1
 8006440:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006442:	bf00      	nop
      }
      break;
 8006444:	e037      	b.n	80064b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	7c1b      	ldrb	r3, [r3, #16]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d109      	bne.n	8006462 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006456:	f107 0208 	add.w	r2, r7, #8
 800645a:	4610      	mov	r0, r2
 800645c:	4798      	blx	r3
 800645e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006460:	e029      	b.n	80064b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006462:	6839      	ldr	r1, [r7, #0]
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fa2a 	bl	80068be <USBD_CtlError>
        err++;
 800646a:	7afb      	ldrb	r3, [r7, #11]
 800646c:	3301      	adds	r3, #1
 800646e:	72fb      	strb	r3, [r7, #11]
      break;
 8006470:	e021      	b.n	80064b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	7c1b      	ldrb	r3, [r3, #16]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10d      	bne.n	8006496 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006482:	f107 0208 	add.w	r2, r7, #8
 8006486:	4610      	mov	r0, r2
 8006488:	4798      	blx	r3
 800648a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	3301      	adds	r3, #1
 8006490:	2207      	movs	r2, #7
 8006492:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006494:	e00f      	b.n	80064b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fa10 	bl	80068be <USBD_CtlError>
        err++;
 800649e:	7afb      	ldrb	r3, [r7, #11]
 80064a0:	3301      	adds	r3, #1
 80064a2:	72fb      	strb	r3, [r7, #11]
      break;
 80064a4:	e007      	b.n	80064b6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80064a6:	6839      	ldr	r1, [r7, #0]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fa08 	bl	80068be <USBD_CtlError>
      err++;
 80064ae:	7afb      	ldrb	r3, [r7, #11]
 80064b0:	3301      	adds	r3, #1
 80064b2:	72fb      	strb	r3, [r7, #11]
      break;
 80064b4:	bf00      	nop
  }

  if (err != 0U)
 80064b6:	7afb      	ldrb	r3, [r7, #11]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d11e      	bne.n	80064fa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	88db      	ldrh	r3, [r3, #6]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d016      	beq.n	80064f2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80064c4:	893b      	ldrh	r3, [r7, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00e      	beq.n	80064e8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	88da      	ldrh	r2, [r3, #6]
 80064ce:	893b      	ldrh	r3, [r7, #8]
 80064d0:	4293      	cmp	r3, r2
 80064d2:	bf28      	it	cs
 80064d4:	4613      	movcs	r3, r2
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80064da:	893b      	ldrh	r3, [r7, #8]
 80064dc:	461a      	mov	r2, r3
 80064de:	68f9      	ldr	r1, [r7, #12]
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fa5d 	bl	80069a0 <USBD_CtlSendData>
 80064e6:	e009      	b.n	80064fc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f9e7 	bl	80068be <USBD_CtlError>
 80064f0:	e004      	b.n	80064fc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 faae 	bl	8006a54 <USBD_CtlSendStatus>
 80064f8:	e000      	b.n	80064fc <USBD_GetDescriptor+0x320>
    return;
 80064fa:	bf00      	nop
  }
}
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop

08006504 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	889b      	ldrh	r3, [r3, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d131      	bne.n	800657a <USBD_SetAddress+0x76>
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	88db      	ldrh	r3, [r3, #6]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d12d      	bne.n	800657a <USBD_SetAddress+0x76>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	885b      	ldrh	r3, [r3, #2]
 8006522:	2b7f      	cmp	r3, #127	@ 0x7f
 8006524:	d829      	bhi.n	800657a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	885b      	ldrh	r3, [r3, #2]
 800652a:	b2db      	uxtb	r3, r3
 800652c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006530:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b03      	cmp	r3, #3
 800653c:	d104      	bne.n	8006548 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 f9bc 	bl	80068be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006546:	e01d      	b.n	8006584 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	7bfa      	ldrb	r2, [r7, #15]
 800654c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006550:	7bfb      	ldrb	r3, [r7, #15]
 8006552:	4619      	mov	r1, r3
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 ff45 	bl	80073e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fa7a 	bl	8006a54 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006560:	7bfb      	ldrb	r3, [r7, #15]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d004      	beq.n	8006570 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2202      	movs	r2, #2
 800656a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800656e:	e009      	b.n	8006584 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006578:	e004      	b.n	8006584 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800657a:	6839      	ldr	r1, [r7, #0]
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 f99e 	bl	80068be <USBD_CtlError>
  }
}
 8006582:	bf00      	nop
 8006584:	bf00      	nop
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	885b      	ldrh	r3, [r3, #2]
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	4b4e      	ldr	r3, [pc, #312]	@ (80066dc <USBD_SetConfig+0x150>)
 80065a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80065a4:	4b4d      	ldr	r3, [pc, #308]	@ (80066dc <USBD_SetConfig+0x150>)
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d905      	bls.n	80065b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80065ac:	6839      	ldr	r1, [r7, #0]
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f985 	bl	80068be <USBD_CtlError>
    return USBD_FAIL;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e08c      	b.n	80066d2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d002      	beq.n	80065ca <USBD_SetConfig+0x3e>
 80065c4:	2b03      	cmp	r3, #3
 80065c6:	d029      	beq.n	800661c <USBD_SetConfig+0x90>
 80065c8:	e075      	b.n	80066b6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80065ca:	4b44      	ldr	r3, [pc, #272]	@ (80066dc <USBD_SetConfig+0x150>)
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d020      	beq.n	8006614 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80065d2:	4b42      	ldr	r3, [pc, #264]	@ (80066dc <USBD_SetConfig+0x150>)
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	461a      	mov	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80065dc:	4b3f      	ldr	r3, [pc, #252]	@ (80066dc <USBD_SetConfig+0x150>)
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	4619      	mov	r1, r3
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7fe ffb9 	bl	800555a <USBD_SetClassConfig>
 80065e8:	4603      	mov	r3, r0
 80065ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d008      	beq.n	8006604 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f962 	bl	80068be <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2202      	movs	r2, #2
 80065fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006602:	e065      	b.n	80066d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 fa25 	bl	8006a54 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2203      	movs	r2, #3
 800660e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006612:	e05d      	b.n	80066d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 fa1d 	bl	8006a54 <USBD_CtlSendStatus>
      break;
 800661a:	e059      	b.n	80066d0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800661c:	4b2f      	ldr	r3, [pc, #188]	@ (80066dc <USBD_SetConfig+0x150>)
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d112      	bne.n	800664a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2202      	movs	r2, #2
 8006628:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800662c:	4b2b      	ldr	r3, [pc, #172]	@ (80066dc <USBD_SetConfig+0x150>)
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	461a      	mov	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006636:	4b29      	ldr	r3, [pc, #164]	@ (80066dc <USBD_SetConfig+0x150>)
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7fe ffa8 	bl	8005592 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 fa06 	bl	8006a54 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006648:	e042      	b.n	80066d0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800664a:	4b24      	ldr	r3, [pc, #144]	@ (80066dc <USBD_SetConfig+0x150>)
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	461a      	mov	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	429a      	cmp	r2, r3
 8006656:	d02a      	beq.n	80066ae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	b2db      	uxtb	r3, r3
 800665e:	4619      	mov	r1, r3
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7fe ff96 	bl	8005592 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006666:	4b1d      	ldr	r3, [pc, #116]	@ (80066dc <USBD_SetConfig+0x150>)
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	461a      	mov	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006670:	4b1a      	ldr	r3, [pc, #104]	@ (80066dc <USBD_SetConfig+0x150>)
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	4619      	mov	r1, r3
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f7fe ff6f 	bl	800555a <USBD_SetClassConfig>
 800667c:	4603      	mov	r3, r0
 800667e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006680:	7bfb      	ldrb	r3, [r7, #15]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00f      	beq.n	80066a6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f918 	bl	80068be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	b2db      	uxtb	r3, r3
 8006694:	4619      	mov	r1, r3
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7fe ff7b 	bl	8005592 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2202      	movs	r2, #2
 80066a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80066a4:	e014      	b.n	80066d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f9d4 	bl	8006a54 <USBD_CtlSendStatus>
      break;
 80066ac:	e010      	b.n	80066d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f9d0 	bl	8006a54 <USBD_CtlSendStatus>
      break;
 80066b4:	e00c      	b.n	80066d0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80066b6:	6839      	ldr	r1, [r7, #0]
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f900 	bl	80068be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80066be:	4b07      	ldr	r3, [pc, #28]	@ (80066dc <USBD_SetConfig+0x150>)
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	4619      	mov	r1, r3
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7fe ff64 	bl	8005592 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80066ca:	2303      	movs	r3, #3
 80066cc:	73fb      	strb	r3, [r7, #15]
      break;
 80066ce:	bf00      	nop
  }

  return ret;
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	200002e4 	.word	0x200002e4

080066e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	88db      	ldrh	r3, [r3, #6]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d004      	beq.n	80066fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80066f2:	6839      	ldr	r1, [r7, #0]
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f8e2 	bl	80068be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80066fa:	e023      	b.n	8006744 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b02      	cmp	r3, #2
 8006706:	dc02      	bgt.n	800670e <USBD_GetConfig+0x2e>
 8006708:	2b00      	cmp	r3, #0
 800670a:	dc03      	bgt.n	8006714 <USBD_GetConfig+0x34>
 800670c:	e015      	b.n	800673a <USBD_GetConfig+0x5a>
 800670e:	2b03      	cmp	r3, #3
 8006710:	d00b      	beq.n	800672a <USBD_GetConfig+0x4a>
 8006712:	e012      	b.n	800673a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	3308      	adds	r3, #8
 800671e:	2201      	movs	r2, #1
 8006720:	4619      	mov	r1, r3
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f93c 	bl	80069a0 <USBD_CtlSendData>
        break;
 8006728:	e00c      	b.n	8006744 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	3304      	adds	r3, #4
 800672e:	2201      	movs	r2, #1
 8006730:	4619      	mov	r1, r3
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f934 	bl	80069a0 <USBD_CtlSendData>
        break;
 8006738:	e004      	b.n	8006744 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800673a:	6839      	ldr	r1, [r7, #0]
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f8be 	bl	80068be <USBD_CtlError>
        break;
 8006742:	bf00      	nop
}
 8006744:	bf00      	nop
 8006746:	3708      	adds	r7, #8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800675c:	b2db      	uxtb	r3, r3
 800675e:	3b01      	subs	r3, #1
 8006760:	2b02      	cmp	r3, #2
 8006762:	d81e      	bhi.n	80067a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	88db      	ldrh	r3, [r3, #6]
 8006768:	2b02      	cmp	r3, #2
 800676a:	d004      	beq.n	8006776 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800676c:	6839      	ldr	r1, [r7, #0]
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f8a5 	bl	80068be <USBD_CtlError>
        break;
 8006774:	e01a      	b.n	80067ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006782:	2b00      	cmp	r3, #0
 8006784:	d005      	beq.n	8006792 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	f043 0202 	orr.w	r2, r3, #2
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	330c      	adds	r3, #12
 8006796:	2202      	movs	r2, #2
 8006798:	4619      	mov	r1, r3
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f900 	bl	80069a0 <USBD_CtlSendData>
      break;
 80067a0:	e004      	b.n	80067ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80067a2:	6839      	ldr	r1, [r7, #0]
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f88a 	bl	80068be <USBD_CtlError>
      break;
 80067aa:	bf00      	nop
  }
}
 80067ac:	bf00      	nop
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	885b      	ldrh	r3, [r3, #2]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d107      	bne.n	80067d6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f940 	bl	8006a54 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80067d4:	e013      	b.n	80067fe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	885b      	ldrh	r3, [r3, #2]
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d10b      	bne.n	80067f6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	889b      	ldrh	r3, [r3, #4]
 80067e2:	0a1b      	lsrs	r3, r3, #8
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f930 	bl	8006a54 <USBD_CtlSendStatus>
}
 80067f4:	e003      	b.n	80067fe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80067f6:	6839      	ldr	r1, [r7, #0]
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f860 	bl	80068be <USBD_CtlError>
}
 80067fe:	bf00      	nop
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b082      	sub	sp, #8
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006816:	b2db      	uxtb	r3, r3
 8006818:	3b01      	subs	r3, #1
 800681a:	2b02      	cmp	r3, #2
 800681c:	d80b      	bhi.n	8006836 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	885b      	ldrh	r3, [r3, #2]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d10c      	bne.n	8006840 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f910 	bl	8006a54 <USBD_CtlSendStatus>
      }
      break;
 8006834:	e004      	b.n	8006840 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006836:	6839      	ldr	r1, [r7, #0]
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 f840 	bl	80068be <USBD_CtlError>
      break;
 800683e:	e000      	b.n	8006842 <USBD_ClrFeature+0x3c>
      break;
 8006840:	bf00      	nop
  }
}
 8006842:	bf00      	nop
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b084      	sub	sp, #16
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
 8006852:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	781a      	ldrb	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	3301      	adds	r3, #1
 8006864:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	781a      	ldrb	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	3301      	adds	r3, #1
 8006872:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f7ff fa16 	bl	8005ca6 <SWAPBYTE>
 800687a:	4603      	mov	r3, r0
 800687c:	461a      	mov	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	3301      	adds	r3, #1
 8006886:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	3301      	adds	r3, #1
 800688c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f7ff fa09 	bl	8005ca6 <SWAPBYTE>
 8006894:	4603      	mov	r3, r0
 8006896:	461a      	mov	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	3301      	adds	r3, #1
 80068a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	3301      	adds	r3, #1
 80068a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f7ff f9fc 	bl	8005ca6 <SWAPBYTE>
 80068ae:	4603      	mov	r3, r0
 80068b0:	461a      	mov	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	80da      	strh	r2, [r3, #6]
}
 80068b6:	bf00      	nop
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b082      	sub	sp, #8
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80068c8:	2180      	movs	r1, #128	@ 0x80
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fd20 	bl	8007310 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80068d0:	2100      	movs	r1, #0
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fd1c 	bl	8007310 <USBD_LL_StallEP>
}
 80068d8:	bf00      	nop
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d036      	beq.n	8006964 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80068fa:	6938      	ldr	r0, [r7, #16]
 80068fc:	f000 f836 	bl	800696c <USBD_GetLen>
 8006900:	4603      	mov	r3, r0
 8006902:	3301      	adds	r3, #1
 8006904:	b29b      	uxth	r3, r3
 8006906:	005b      	lsls	r3, r3, #1
 8006908:	b29a      	uxth	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800690e:	7dfb      	ldrb	r3, [r7, #23]
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	4413      	add	r3, r2
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	7812      	ldrb	r2, [r2, #0]
 8006918:	701a      	strb	r2, [r3, #0]
  idx++;
 800691a:	7dfb      	ldrb	r3, [r7, #23]
 800691c:	3301      	adds	r3, #1
 800691e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006920:	7dfb      	ldrb	r3, [r7, #23]
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	4413      	add	r3, r2
 8006926:	2203      	movs	r2, #3
 8006928:	701a      	strb	r2, [r3, #0]
  idx++;
 800692a:	7dfb      	ldrb	r3, [r7, #23]
 800692c:	3301      	adds	r3, #1
 800692e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006930:	e013      	b.n	800695a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006932:	7dfb      	ldrb	r3, [r7, #23]
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	4413      	add	r3, r2
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	7812      	ldrb	r2, [r2, #0]
 800693c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	3301      	adds	r3, #1
 8006942:	613b      	str	r3, [r7, #16]
    idx++;
 8006944:	7dfb      	ldrb	r3, [r7, #23]
 8006946:	3301      	adds	r3, #1
 8006948:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800694a:	7dfb      	ldrb	r3, [r7, #23]
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	4413      	add	r3, r2
 8006950:	2200      	movs	r2, #0
 8006952:	701a      	strb	r2, [r3, #0]
    idx++;
 8006954:	7dfb      	ldrb	r3, [r7, #23]
 8006956:	3301      	adds	r3, #1
 8006958:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e7      	bne.n	8006932 <USBD_GetString+0x52>
 8006962:	e000      	b.n	8006966 <USBD_GetString+0x86>
    return;
 8006964:	bf00      	nop
  }
}
 8006966:	3718      	adds	r7, #24
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006974:	2300      	movs	r3, #0
 8006976:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800697c:	e005      	b.n	800698a <USBD_GetLen+0x1e>
  {
    len++;
 800697e:	7bfb      	ldrb	r3, [r7, #15]
 8006980:	3301      	adds	r3, #1
 8006982:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	3301      	adds	r3, #1
 8006988:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1f5      	bne.n	800697e <USBD_GetLen+0x12>
  }

  return len;
 8006992:	7bfb      	ldrb	r3, [r7, #15]
}
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2202      	movs	r2, #2
 80069b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	2100      	movs	r1, #0
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 fd2b 	bl	8007422 <USBD_LL_Transmit>

  return USBD_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b084      	sub	sp, #16
 80069da:	af00      	add	r7, sp, #0
 80069dc:	60f8      	str	r0, [r7, #12]
 80069de:	60b9      	str	r1, [r7, #8]
 80069e0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	2100      	movs	r1, #0
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 fd1a 	bl	8007422 <USBD_LL_Transmit>

  return USBD_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2203      	movs	r2, #3
 8006a08:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	2100      	movs	r1, #0
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 fd1e 	bl	8007464 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b084      	sub	sp, #16
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	60f8      	str	r0, [r7, #12]
 8006a3a:	60b9      	str	r1, [r7, #8]
 8006a3c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	2100      	movs	r1, #0
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 fd0d 	bl	8007464 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2204      	movs	r2, #4
 8006a60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006a64:	2300      	movs	r3, #0
 8006a66:	2200      	movs	r2, #0
 8006a68:	2100      	movs	r1, #0
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fcd9 	bl	8007422 <USBD_LL_Transmit>

  return USBD_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b082      	sub	sp, #8
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2205      	movs	r2, #5
 8006a86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	2100      	movs	r1, #0
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fce7 	bl	8007464 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <touchscreen_init>:
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */

void touchscreen_init(void)
{
 8006aa0:	b490      	push	{r4, r7}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
	touchReport.report_ID = REPORTID_TOUCH;
 8006aa6:	4b11      	ldr	r3, [pc, #68]	@ (8006aec <touchscreen_init+0x4c>)
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	701a      	strb	r2, [r3, #0]
	Contact contacts[2] = {contact_0, contact_1};
 8006aac:	4a10      	ldr	r2, [pc, #64]	@ (8006af0 <touchscreen_init+0x50>)
 8006aae:	1d3b      	adds	r3, r7, #4
 8006ab0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ab4:	6018      	str	r0, [r3, #0]
 8006ab6:	3304      	adds	r3, #4
 8006ab8:	8019      	strh	r1, [r3, #0]
 8006aba:	4a0e      	ldr	r2, [pc, #56]	@ (8006af4 <touchscreen_init+0x54>)
 8006abc:	f107 030a 	add.w	r3, r7, #10
 8006ac0:	6810      	ldr	r0, [r2, #0]
 8006ac2:	6018      	str	r0, [r3, #0]
 8006ac4:	8892      	ldrh	r2, [r2, #4]
 8006ac6:	809a      	strh	r2, [r3, #4]
	memcpy(touchReport.contacts, contacts, sizeof(contacts));
 8006ac8:	4b08      	ldr	r3, [pc, #32]	@ (8006aec <touchscreen_init+0x4c>)
 8006aca:	1c5c      	adds	r4, r3, #1
 8006acc:	1d3b      	adds	r3, r7, #4
 8006ace:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006ad0:	6020      	str	r0, [r4, #0]
 8006ad2:	6061      	str	r1, [r4, #4]
 8006ad4:	60a2      	str	r2, [r4, #8]
	touchReport.contacts[0].contact_ID = 0;
 8006ad6:	4b05      	ldr	r3, [pc, #20]	@ (8006aec <touchscreen_init+0x4c>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	709a      	strb	r2, [r3, #2]
	touchReport.contacts[1].contact_ID = 1;
 8006adc:	4b03      	ldr	r3, [pc, #12]	@ (8006aec <touchscreen_init+0x4c>)
 8006ade:	2201      	movs	r2, #1
 8006ae0:	721a      	strb	r2, [r3, #8]
}
 8006ae2:	bf00      	nop
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bc90      	pop	{r4, r7}
 8006aea:	4770      	bx	lr
 8006aec:	200002fc 	.word	0x200002fc
 8006af0:	200002ec 	.word	0x200002ec
 8006af4:	200002f4 	.word	0x200002f4

08006af8 <touchscreen_test>:

void touchscreen_test(void)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	af00      	add	r7, sp, #0
	// Set

	touchReport.contacts[0].tip_switch = TIP_SWITCH_SET;
 8006afc:	4b3f      	ldr	r3, [pc, #252]	@ (8006bfc <touchscreen_test+0x104>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	b2da      	uxtb	r2, r3
 8006b02:	4b3f      	ldr	r3, [pc, #252]	@ (8006c00 <touchscreen_test+0x108>)
 8006b04:	705a      	strb	r2, [r3, #1]
	touchReport.contacts[0].x = 700;
 8006b06:	4b3e      	ldr	r3, [pc, #248]	@ (8006c00 <touchscreen_test+0x108>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f062 0243 	orn	r2, r2, #67	@ 0x43
 8006b0e:	70da      	strb	r2, [r3, #3]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f042 0202 	orr.w	r2, r2, #2
 8006b16:	711a      	strb	r2, [r3, #4]
	touchReport.contacts[0].y = 700;
 8006b18:	4b39      	ldr	r3, [pc, #228]	@ (8006c00 <touchscreen_test+0x108>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f062 0243 	orn	r2, r2, #67	@ 0x43
 8006b20:	715a      	strb	r2, [r3, #5]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f042 0202 	orr.w	r2, r2, #2
 8006b28:	719a      	strb	r2, [r3, #6]

	touchReport.contacts[1].tip_switch = TIP_SWITCH_SET;
 8006b2a:	4b34      	ldr	r3, [pc, #208]	@ (8006bfc <touchscreen_test+0x104>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	b2da      	uxtb	r2, r3
 8006b30:	4b33      	ldr	r3, [pc, #204]	@ (8006c00 <touchscreen_test+0x108>)
 8006b32:	71da      	strb	r2, [r3, #7]
	touchReport.contacts[1].x = 700;
 8006b34:	4b32      	ldr	r3, [pc, #200]	@ (8006c00 <touchscreen_test+0x108>)
 8006b36:	2200      	movs	r2, #0
 8006b38:	f062 0243 	orn	r2, r2, #67	@ 0x43
 8006b3c:	725a      	strb	r2, [r3, #9]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f042 0202 	orr.w	r2, r2, #2
 8006b44:	729a      	strb	r2, [r3, #10]
	touchReport.contacts[1].y = 1000;
 8006b46:	4b2e      	ldr	r3, [pc, #184]	@ (8006c00 <touchscreen_test+0x108>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f062 0217 	orn	r2, r2, #23
 8006b4e:	72da      	strb	r2, [r3, #11]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f042 0203 	orr.w	r2, r2, #3
 8006b56:	731a      	strb	r2, [r3, #12]


	touchReport.contact_count = 2;
 8006b58:	4b29      	ldr	r3, [pc, #164]	@ (8006c00 <touchscreen_test+0x108>)
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	73da      	strb	r2, [r3, #15]
	touchReport.scan_time = 0;
 8006b5e:	4b28      	ldr	r3, [pc, #160]	@ (8006c00 <touchscreen_test+0x108>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	735a      	strb	r2, [r3, #13]
 8006b64:	2200      	movs	r2, #0
 8006b66:	739a      	strb	r2, [r3, #14]
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t *) &touchReport, sizeof (touchReport));
 8006b68:	2210      	movs	r2, #16
 8006b6a:	4925      	ldr	r1, [pc, #148]	@ (8006c00 <touchscreen_test+0x108>)
 8006b6c:	4825      	ldr	r0, [pc, #148]	@ (8006c04 <touchscreen_test+0x10c>)
 8006b6e:	f7fe faef 	bl	8005150 <USBD_CUSTOM_HID_SendReport>
	HAL_Delay(500);
 8006b72:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006b76:	f7f9 fee3 	bl	8000940 <HAL_Delay>

	// Remove

	touchReport.contacts[0].tip_switch = TIP_SWITCH_RESET;
 8006b7a:	4b23      	ldr	r3, [pc, #140]	@ (8006c08 <touchscreen_test+0x110>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	4b1f      	ldr	r3, [pc, #124]	@ (8006c00 <touchscreen_test+0x108>)
 8006b82:	705a      	strb	r2, [r3, #1]
	touchReport.contacts[1].tip_switch = TIP_SWITCH_RESET;
 8006b84:	4b20      	ldr	r3, [pc, #128]	@ (8006c08 <touchscreen_test+0x110>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8006c00 <touchscreen_test+0x108>)
 8006b8c:	71da      	strb	r2, [r3, #7]

	touchReport.contact_count = 2;
 8006b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8006c00 <touchscreen_test+0x108>)
 8006b90:	2202      	movs	r2, #2
 8006b92:	73da      	strb	r2, [r3, #15]
	touchReport.scan_time = 5000;
 8006b94:	4b1a      	ldr	r3, [pc, #104]	@ (8006c00 <touchscreen_test+0x108>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	f062 0277 	orn	r2, r2, #119	@ 0x77
 8006b9c:	735a      	strb	r2, [r3, #13]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f042 0213 	orr.w	r2, r2, #19
 8006ba4:	739a      	strb	r2, [r3, #14]
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t *) &touchReport, sizeof (touchReport));
 8006ba6:	2210      	movs	r2, #16
 8006ba8:	4915      	ldr	r1, [pc, #84]	@ (8006c00 <touchscreen_test+0x108>)
 8006baa:	4816      	ldr	r0, [pc, #88]	@ (8006c04 <touchscreen_test+0x10c>)
 8006bac:	f7fe fad0 	bl	8005150 <USBD_CUSTOM_HID_SendReport>
	HAL_Delay(500);
 8006bb0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006bb4:	f7f9 fec4 	bl	8000940 <HAL_Delay>

	// Reset

	touchReport.contacts[0].tip_switch = TIP_SWITCH_RESET;
 8006bb8:	4b13      	ldr	r3, [pc, #76]	@ (8006c08 <touchscreen_test+0x110>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	4b10      	ldr	r3, [pc, #64]	@ (8006c00 <touchscreen_test+0x108>)
 8006bc0:	705a      	strb	r2, [r3, #1]
	touchReport.contacts[1].tip_switch = TIP_SWITCH_RESET;
 8006bc2:	4b11      	ldr	r3, [pc, #68]	@ (8006c08 <touchscreen_test+0x110>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8006c00 <touchscreen_test+0x108>)
 8006bca:	71da      	strb	r2, [r3, #7]

	touchReport.contact_count = 0;
 8006bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8006c00 <touchscreen_test+0x108>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	73da      	strb	r2, [r3, #15]
	touchReport.scan_time = 10000;
 8006bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8006c00 <touchscreen_test+0x108>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f042 0210 	orr.w	r2, r2, #16
 8006bda:	735a      	strb	r2, [r3, #13]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f042 0227 	orr.w	r2, r2, #39	@ 0x27
 8006be2:	739a      	strb	r2, [r3, #14]
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t *) &touchReport, sizeof (touchReport));
 8006be4:	2210      	movs	r2, #16
 8006be6:	4906      	ldr	r1, [pc, #24]	@ (8006c00 <touchscreen_test+0x108>)
 8006be8:	4806      	ldr	r0, [pc, #24]	@ (8006c04 <touchscreen_test+0x10c>)
 8006bea:	f7fe fab1 	bl	8005150 <USBD_CUSTOM_HID_SendReport>
	HAL_Delay(500);
 8006bee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006bf2:	f7f9 fea5 	bl	8000940 <HAL_Delay>
}
 8006bf6:	bf00      	nop
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20000190 	.word	0x20000190
 8006c00:	200002fc 	.word	0x200002fc
 8006c04:	2000030c 	.word	0x2000030c
 8006c08:	200002e8 	.word	0x200002e8

08006c0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006c10:	2200      	movs	r2, #0
 8006c12:	4912      	ldr	r1, [pc, #72]	@ (8006c5c <MX_USB_DEVICE_Init+0x50>)
 8006c14:	4812      	ldr	r0, [pc, #72]	@ (8006c60 <MX_USB_DEVICE_Init+0x54>)
 8006c16:	f7fe fc23 	bl	8005460 <USBD_Init>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006c20:	f7f9 fd78 	bl	8000714 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8006c24:	490f      	ldr	r1, [pc, #60]	@ (8006c64 <MX_USB_DEVICE_Init+0x58>)
 8006c26:	480e      	ldr	r0, [pc, #56]	@ (8006c60 <MX_USB_DEVICE_Init+0x54>)
 8006c28:	f7fe fc4a 	bl	80054c0 <USBD_RegisterClass>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006c32:	f7f9 fd6f 	bl	8000714 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8006c36:	490c      	ldr	r1, [pc, #48]	@ (8006c68 <MX_USB_DEVICE_Init+0x5c>)
 8006c38:	4809      	ldr	r0, [pc, #36]	@ (8006c60 <MX_USB_DEVICE_Init+0x54>)
 8006c3a:	f7fe fbf7 	bl	800542c <USBD_CUSTOM_HID_RegisterInterface>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d001      	beq.n	8006c48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006c44:	f7f9 fd66 	bl	8000714 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006c48:	4805      	ldr	r0, [pc, #20]	@ (8006c60 <MX_USB_DEVICE_Init+0x54>)
 8006c4a:	f7fe fc6f 	bl	800552c <USBD_Start>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d001      	beq.n	8006c58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006c54:	f7f9 fd5e 	bl	8000714 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006c58:	bf00      	nop
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	20000264 	.word	0x20000264
 8006c60:	2000030c 	.word	0x2000030c
 8006c64:	20000114 	.word	0x20000114
 8006c68:	20000254 	.word	0x20000254

08006c6c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006c70:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8006c80:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	4603      	mov	r3, r0
 8006c94:	460a      	mov	r2, r1
 8006c96:	71fb      	strb	r3, [r7, #7]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8006c9c:	4806      	ldr	r0, [pc, #24]	@ (8006cb8 <CUSTOM_HID_OutEvent_FS+0x2c>)
 8006c9e:	f7fe fb63 	bl	8005368 <USBD_CUSTOM_HID_ReceivePacket>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d002      	beq.n	8006cae <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 8006ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8006cac:	e000      	b.n	8006cb0 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 8006cae:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	2000030c 	.word	0x2000030c

08006cbc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	6039      	str	r1, [r7, #0]
 8006cc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	2212      	movs	r2, #18
 8006ccc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006cce:	4b03      	ldr	r3, [pc, #12]	@ (8006cdc <USBD_FS_DeviceDescriptor+0x20>)
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	20000284 	.word	0x20000284

08006ce0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	6039      	str	r1, [r7, #0]
 8006cea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	2204      	movs	r2, #4
 8006cf0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006cf2:	4b03      	ldr	r3, [pc, #12]	@ (8006d00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr
 8006d00:	200002a4 	.word	0x200002a4

08006d04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	6039      	str	r1, [r7, #0]
 8006d0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d10:	79fb      	ldrb	r3, [r7, #7]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d105      	bne.n	8006d22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	4907      	ldr	r1, [pc, #28]	@ (8006d38 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d1a:	4808      	ldr	r0, [pc, #32]	@ (8006d3c <USBD_FS_ProductStrDescriptor+0x38>)
 8006d1c:	f7ff fde0 	bl	80068e0 <USBD_GetString>
 8006d20:	e004      	b.n	8006d2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	4904      	ldr	r1, [pc, #16]	@ (8006d38 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d26:	4805      	ldr	r0, [pc, #20]	@ (8006d3c <USBD_FS_ProductStrDescriptor+0x38>)
 8006d28:	f7ff fdda 	bl	80068e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d2c:	4b02      	ldr	r3, [pc, #8]	@ (8006d38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	200005e8 	.word	0x200005e8
 8006d3c:	0800763c 	.word	0x0800763c

08006d40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	4603      	mov	r3, r0
 8006d48:	6039      	str	r1, [r7, #0]
 8006d4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006d4c:	683a      	ldr	r2, [r7, #0]
 8006d4e:	4904      	ldr	r1, [pc, #16]	@ (8006d60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006d50:	4804      	ldr	r0, [pc, #16]	@ (8006d64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006d52:	f7ff fdc5 	bl	80068e0 <USBD_GetString>
  return USBD_StrDesc;
 8006d56:	4b02      	ldr	r3, [pc, #8]	@ (8006d60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	200005e8 	.word	0x200005e8
 8006d64:	0800765c 	.word	0x0800765c

08006d68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	4603      	mov	r3, r0
 8006d70:	6039      	str	r1, [r7, #0]
 8006d72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	221a      	movs	r2, #26
 8006d78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006d7a:	f000 f855 	bl	8006e28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006d7e:	4b02      	ldr	r3, [pc, #8]	@ (8006d88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	200002a8 	.word	0x200002a8

08006d8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	4603      	mov	r3, r0
 8006d94:	6039      	str	r1, [r7, #0]
 8006d96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006d98:	79fb      	ldrb	r3, [r7, #7]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d105      	bne.n	8006daa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	4907      	ldr	r1, [pc, #28]	@ (8006dc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006da2:	4808      	ldr	r0, [pc, #32]	@ (8006dc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006da4:	f7ff fd9c 	bl	80068e0 <USBD_GetString>
 8006da8:	e004      	b.n	8006db4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	4904      	ldr	r1, [pc, #16]	@ (8006dc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006dae:	4805      	ldr	r0, [pc, #20]	@ (8006dc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006db0:	f7ff fd96 	bl	80068e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006db4:	4b02      	ldr	r3, [pc, #8]	@ (8006dc0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	200005e8 	.word	0x200005e8
 8006dc4:	08007670 	.word	0x08007670

08006dc8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	4603      	mov	r3, r0
 8006dd0:	6039      	str	r1, [r7, #0]
 8006dd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006dd4:	79fb      	ldrb	r3, [r7, #7]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d105      	bne.n	8006de6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	4907      	ldr	r1, [pc, #28]	@ (8006dfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006dde:	4808      	ldr	r0, [pc, #32]	@ (8006e00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006de0:	f7ff fd7e 	bl	80068e0 <USBD_GetString>
 8006de4:	e004      	b.n	8006df0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	4904      	ldr	r1, [pc, #16]	@ (8006dfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006dea:	4805      	ldr	r0, [pc, #20]	@ (8006e00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006dec:	f7ff fd78 	bl	80068e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006df0:	4b02      	ldr	r3, [pc, #8]	@ (8006dfc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	200005e8 	.word	0x200005e8
 8006e00:	08007684 	.word	0x08007684

08006e04 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	6039      	str	r1, [r7, #0]
 8006e0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	220c      	movs	r2, #12
 8006e14:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8006e16:	4b03      	ldr	r3, [pc, #12]	@ (8006e24 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	20000298 	.word	0x20000298

08006e28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8006e6c <Get_SerialNum+0x44>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006e34:	4b0e      	ldr	r3, [pc, #56]	@ (8006e70 <Get_SerialNum+0x48>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8006e74 <Get_SerialNum+0x4c>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4413      	add	r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d009      	beq.n	8006e62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006e4e:	2208      	movs	r2, #8
 8006e50:	4909      	ldr	r1, [pc, #36]	@ (8006e78 <Get_SerialNum+0x50>)
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f000 f814 	bl	8006e80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006e58:	2204      	movs	r2, #4
 8006e5a:	4908      	ldr	r1, [pc, #32]	@ (8006e7c <Get_SerialNum+0x54>)
 8006e5c:	68b8      	ldr	r0, [r7, #8]
 8006e5e:	f000 f80f 	bl	8006e80 <IntToUnicode>
  }
}
 8006e62:	bf00      	nop
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	1fff7a10 	.word	0x1fff7a10
 8006e70:	1fff7a14 	.word	0x1fff7a14
 8006e74:	1fff7a18 	.word	0x1fff7a18
 8006e78:	200002aa 	.word	0x200002aa
 8006e7c:	200002ba 	.word	0x200002ba

08006e80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b087      	sub	sp, #28
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006e92:	2300      	movs	r3, #0
 8006e94:	75fb      	strb	r3, [r7, #23]
 8006e96:	e027      	b.n	8006ee8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	0f1b      	lsrs	r3, r3, #28
 8006e9c:	2b09      	cmp	r3, #9
 8006e9e:	d80b      	bhi.n	8006eb8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	0f1b      	lsrs	r3, r3, #28
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	7dfb      	ldrb	r3, [r7, #23]
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	4619      	mov	r1, r3
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	440b      	add	r3, r1
 8006eb0:	3230      	adds	r2, #48	@ 0x30
 8006eb2:	b2d2      	uxtb	r2, r2
 8006eb4:	701a      	strb	r2, [r3, #0]
 8006eb6:	e00a      	b.n	8006ece <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	0f1b      	lsrs	r3, r3, #28
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	7dfb      	ldrb	r3, [r7, #23]
 8006ec0:	005b      	lsls	r3, r3, #1
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	440b      	add	r3, r1
 8006ec8:	3237      	adds	r2, #55	@ 0x37
 8006eca:	b2d2      	uxtb	r2, r2
 8006ecc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	011b      	lsls	r3, r3, #4
 8006ed2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006ed4:	7dfb      	ldrb	r3, [r7, #23]
 8006ed6:	005b      	lsls	r3, r3, #1
 8006ed8:	3301      	adds	r3, #1
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	4413      	add	r3, r2
 8006ede:	2200      	movs	r2, #0
 8006ee0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006ee2:	7dfb      	ldrb	r3, [r7, #23]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	75fb      	strb	r3, [r7, #23]
 8006ee8:	7dfa      	ldrb	r2, [r7, #23]
 8006eea:	79fb      	ldrb	r3, [r7, #7]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d3d3      	bcc.n	8006e98 <IntToUnicode+0x18>
  }
}
 8006ef0:	bf00      	nop
 8006ef2:	bf00      	nop
 8006ef4:	371c      	adds	r7, #28
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
	...

08006f00 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b0a0      	sub	sp, #128	@ 0x80
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f08:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	605a      	str	r2, [r3, #4]
 8006f12:	609a      	str	r2, [r3, #8]
 8006f14:	60da      	str	r2, [r3, #12]
 8006f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006f18:	f107 0310 	add.w	r3, r7, #16
 8006f1c:	225c      	movs	r2, #92	@ 0x5c
 8006f1e:	2100      	movs	r1, #0
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 fb53 	bl	80075cc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f2e:	d149      	bne.n	8006fc4 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8006f30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006f34:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8006f36:	2300      	movs	r3, #0
 8006f38:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006f3a:	f107 0310 	add.w	r3, r7, #16
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7fb fb70 	bl	8002624 <HAL_RCCEx_PeriphCLKConfig>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d001      	beq.n	8006f4e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8006f4a:	f7f9 fbe3 	bl	8000714 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60fb      	str	r3, [r7, #12]
 8006f52:	4b1e      	ldr	r3, [pc, #120]	@ (8006fcc <HAL_PCD_MspInit+0xcc>)
 8006f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f56:	4a1d      	ldr	r2, [pc, #116]	@ (8006fcc <HAL_PCD_MspInit+0xcc>)
 8006f58:	f043 0301 	orr.w	r3, r3, #1
 8006f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8006fcc <HAL_PCD_MspInit+0xcc>)
 8006f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006f6a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006f6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f70:	2302      	movs	r3, #2
 8006f72:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f74:	2300      	movs	r3, #0
 8006f76:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006f7c:	230a      	movs	r3, #10
 8006f7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f80:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8006f84:	4619      	mov	r1, r3
 8006f86:	4812      	ldr	r0, [pc, #72]	@ (8006fd0 <HAL_PCD_MspInit+0xd0>)
 8006f88:	f7f9 fe10 	bl	8000bac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8006fcc <HAL_PCD_MspInit+0xcc>)
 8006f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f90:	4a0e      	ldr	r2, [pc, #56]	@ (8006fcc <HAL_PCD_MspInit+0xcc>)
 8006f92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f96:	6353      	str	r3, [r2, #52]	@ 0x34
 8006f98:	2300      	movs	r3, #0
 8006f9a:	60bb      	str	r3, [r7, #8]
 8006f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8006fcc <HAL_PCD_MspInit+0xcc>)
 8006f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8006fcc <HAL_PCD_MspInit+0xcc>)
 8006fa2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006fa6:	6453      	str	r3, [r2, #68]	@ 0x44
 8006fa8:	4b08      	ldr	r3, [pc, #32]	@ (8006fcc <HAL_PCD_MspInit+0xcc>)
 8006faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fb0:	60bb      	str	r3, [r7, #8]
 8006fb2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	2043      	movs	r0, #67	@ 0x43
 8006fba:	f7f9 fdc0 	bl	8000b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006fbe:	2043      	movs	r0, #67	@ 0x43
 8006fc0:	f7f9 fdd9 	bl	8000b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006fc4:	bf00      	nop
 8006fc6:	3780      	adds	r7, #128	@ 0x80
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	40023800 	.word	0x40023800
 8006fd0:	40020000 	.word	0x40020000

08006fd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006fe8:	4619      	mov	r1, r3
 8006fea:	4610      	mov	r0, r2
 8006fec:	f7fe faeb 	bl	80055c6 <USBD_LL_SetupStage>
}
 8006ff0:	bf00      	nop
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	460b      	mov	r3, r1
 8007002:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800700a:	78fa      	ldrb	r2, [r7, #3]
 800700c:	6879      	ldr	r1, [r7, #4]
 800700e:	4613      	mov	r3, r2
 8007010:	00db      	lsls	r3, r3, #3
 8007012:	4413      	add	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	440b      	add	r3, r1
 8007018:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	78fb      	ldrb	r3, [r7, #3]
 8007020:	4619      	mov	r1, r3
 8007022:	f7fe fb25 	bl	8005670 <USBD_LL_DataOutStage>
}
 8007026:	bf00      	nop
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b082      	sub	sp, #8
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	460b      	mov	r3, r1
 8007038:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007040:	78fa      	ldrb	r2, [r7, #3]
 8007042:	6879      	ldr	r1, [r7, #4]
 8007044:	4613      	mov	r3, r2
 8007046:	00db      	lsls	r3, r3, #3
 8007048:	4413      	add	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	440b      	add	r3, r1
 800704e:	3320      	adds	r3, #32
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	78fb      	ldrb	r3, [r7, #3]
 8007054:	4619      	mov	r1, r3
 8007056:	f7fe fbbe 	bl	80057d6 <USBD_LL_DataInStage>
}
 800705a:	bf00      	nop
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b082      	sub	sp, #8
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007070:	4618      	mov	r0, r3
 8007072:	f7fe fcf8 	bl	8005a66 <USBD_LL_SOF>
}
 8007076:	bf00      	nop
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b084      	sub	sp, #16
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007086:	2301      	movs	r3, #1
 8007088:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	79db      	ldrb	r3, [r3, #7]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d102      	bne.n	8007098 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007092:	2300      	movs	r3, #0
 8007094:	73fb      	strb	r3, [r7, #15]
 8007096:	e008      	b.n	80070aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	79db      	ldrb	r3, [r3, #7]
 800709c:	2b02      	cmp	r3, #2
 800709e:	d102      	bne.n	80070a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80070a0:	2301      	movs	r3, #1
 80070a2:	73fb      	strb	r3, [r7, #15]
 80070a4:	e001      	b.n	80070aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80070a6:	f7f9 fb35 	bl	8000714 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80070b0:	7bfa      	ldrb	r2, [r7, #15]
 80070b2:	4611      	mov	r1, r2
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fe fc92 	bl	80059de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7fe fc3a 	bl	800593a <USBD_LL_Reset>
}
 80070c6:	bf00      	nop
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
	...

080070d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fe fc8d 	bl	80059fe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	6812      	ldr	r2, [r2, #0]
 80070f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80070f6:	f043 0301 	orr.w	r3, r3, #1
 80070fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	7adb      	ldrb	r3, [r3, #11]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d005      	beq.n	8007110 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007104:	4b04      	ldr	r3, [pc, #16]	@ (8007118 <HAL_PCD_SuspendCallback+0x48>)
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	4a03      	ldr	r2, [pc, #12]	@ (8007118 <HAL_PCD_SuspendCallback+0x48>)
 800710a:	f043 0306 	orr.w	r3, r3, #6
 800710e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007110:	bf00      	nop
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	e000ed00 	.word	0xe000ed00

0800711c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800712a:	4618      	mov	r0, r3
 800712c:	f7fe fc83 	bl	8005a36 <USBD_LL_Resume>
}
 8007130:	bf00      	nop
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	460b      	mov	r3, r1
 8007142:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800714a:	78fa      	ldrb	r2, [r7, #3]
 800714c:	4611      	mov	r1, r2
 800714e:	4618      	mov	r0, r3
 8007150:	f7fe fcdb 	bl	8005b0a <USBD_LL_IsoOUTIncomplete>
}
 8007154:	bf00      	nop
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	460b      	mov	r3, r1
 8007166:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800716e:	78fa      	ldrb	r2, [r7, #3]
 8007170:	4611      	mov	r1, r2
 8007172:	4618      	mov	r0, r3
 8007174:	f7fe fc97 	bl	8005aa6 <USBD_LL_IsoINIncomplete>
}
 8007178:	bf00      	nop
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800718e:	4618      	mov	r0, r3
 8007190:	f7fe fced 	bl	8005b6e <USBD_LL_DevConnected>
}
 8007194:	bf00      	nop
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fe fcea 	bl	8005b84 <USBD_LL_DevDisconnected>
}
 80071b0:	bf00      	nop
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d13c      	bne.n	8007242 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80071c8:	4a20      	ldr	r2, [pc, #128]	@ (800724c <USBD_LL_Init+0x94>)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a1e      	ldr	r2, [pc, #120]	@ (800724c <USBD_LL_Init+0x94>)
 80071d4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80071d8:	4b1c      	ldr	r3, [pc, #112]	@ (800724c <USBD_LL_Init+0x94>)
 80071da:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80071de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80071e0:	4b1a      	ldr	r3, [pc, #104]	@ (800724c <USBD_LL_Init+0x94>)
 80071e2:	2206      	movs	r2, #6
 80071e4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80071e6:	4b19      	ldr	r3, [pc, #100]	@ (800724c <USBD_LL_Init+0x94>)
 80071e8:	2202      	movs	r2, #2
 80071ea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80071ec:	4b17      	ldr	r3, [pc, #92]	@ (800724c <USBD_LL_Init+0x94>)
 80071ee:	2200      	movs	r2, #0
 80071f0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80071f2:	4b16      	ldr	r3, [pc, #88]	@ (800724c <USBD_LL_Init+0x94>)
 80071f4:	2202      	movs	r2, #2
 80071f6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80071f8:	4b14      	ldr	r3, [pc, #80]	@ (800724c <USBD_LL_Init+0x94>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80071fe:	4b13      	ldr	r3, [pc, #76]	@ (800724c <USBD_LL_Init+0x94>)
 8007200:	2200      	movs	r2, #0
 8007202:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007204:	4b11      	ldr	r3, [pc, #68]	@ (800724c <USBD_LL_Init+0x94>)
 8007206:	2200      	movs	r2, #0
 8007208:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800720a:	4b10      	ldr	r3, [pc, #64]	@ (800724c <USBD_LL_Init+0x94>)
 800720c:	2200      	movs	r2, #0
 800720e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007210:	4b0e      	ldr	r3, [pc, #56]	@ (800724c <USBD_LL_Init+0x94>)
 8007212:	2200      	movs	r2, #0
 8007214:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007216:	480d      	ldr	r0, [pc, #52]	@ (800724c <USBD_LL_Init+0x94>)
 8007218:	f7f9 fe8d 	bl	8000f36 <HAL_PCD_Init>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d001      	beq.n	8007226 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007222:	f7f9 fa77 	bl	8000714 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007226:	2180      	movs	r1, #128	@ 0x80
 8007228:	4808      	ldr	r0, [pc, #32]	@ (800724c <USBD_LL_Init+0x94>)
 800722a:	f7fb f8d4 	bl	80023d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800722e:	2240      	movs	r2, #64	@ 0x40
 8007230:	2100      	movs	r1, #0
 8007232:	4806      	ldr	r0, [pc, #24]	@ (800724c <USBD_LL_Init+0x94>)
 8007234:	f7fb f888 	bl	8002348 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007238:	2280      	movs	r2, #128	@ 0x80
 800723a:	2101      	movs	r1, #1
 800723c:	4803      	ldr	r0, [pc, #12]	@ (800724c <USBD_LL_Init+0x94>)
 800723e:	f7fb f883 	bl	8002348 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	200007e8 	.word	0x200007e8

08007250 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007258:	2300      	movs	r3, #0
 800725a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007266:	4618      	mov	r0, r3
 8007268:	f7f9 ff7b 	bl	8001162 <HAL_PCD_Start>
 800726c:	4603      	mov	r3, r0
 800726e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007270:	7bfb      	ldrb	r3, [r7, #15]
 8007272:	4618      	mov	r0, r3
 8007274:	f000 f97e 	bl	8007574 <USBD_Get_USB_Status>
 8007278:	4603      	mov	r3, r0
 800727a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800727c:	7bbb      	ldrb	r3, [r7, #14]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b084      	sub	sp, #16
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	4608      	mov	r0, r1
 8007290:	4611      	mov	r1, r2
 8007292:	461a      	mov	r2, r3
 8007294:	4603      	mov	r3, r0
 8007296:	70fb      	strb	r3, [r7, #3]
 8007298:	460b      	mov	r3, r1
 800729a:	70bb      	strb	r3, [r7, #2]
 800729c:	4613      	mov	r3, r2
 800729e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072a4:	2300      	movs	r3, #0
 80072a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80072ae:	78bb      	ldrb	r3, [r7, #2]
 80072b0:	883a      	ldrh	r2, [r7, #0]
 80072b2:	78f9      	ldrb	r1, [r7, #3]
 80072b4:	f7fa fc7c 	bl	8001bb0 <HAL_PCD_EP_Open>
 80072b8:	4603      	mov	r3, r0
 80072ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072bc:	7bfb      	ldrb	r3, [r7, #15]
 80072be:	4618      	mov	r0, r3
 80072c0:	f000 f958 	bl	8007574 <USBD_Get_USB_Status>
 80072c4:	4603      	mov	r3, r0
 80072c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b084      	sub	sp, #16
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
 80072da:	460b      	mov	r3, r1
 80072dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072de:	2300      	movs	r3, #0
 80072e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80072ec:	78fa      	ldrb	r2, [r7, #3]
 80072ee:	4611      	mov	r1, r2
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7fa fcc5 	bl	8001c80 <HAL_PCD_EP_Close>
 80072f6:	4603      	mov	r3, r0
 80072f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072fa:	7bfb      	ldrb	r3, [r7, #15]
 80072fc:	4618      	mov	r0, r3
 80072fe:	f000 f939 	bl	8007574 <USBD_Get_USB_Status>
 8007302:	4603      	mov	r3, r0
 8007304:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007306:	7bbb      	ldrb	r3, [r7, #14]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	460b      	mov	r3, r1
 800731a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800731c:	2300      	movs	r3, #0
 800731e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800732a:	78fa      	ldrb	r2, [r7, #3]
 800732c:	4611      	mov	r1, r2
 800732e:	4618      	mov	r0, r3
 8007330:	f7fa fd65 	bl	8001dfe <HAL_PCD_EP_SetStall>
 8007334:	4603      	mov	r3, r0
 8007336:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	4618      	mov	r0, r3
 800733c:	f000 f91a 	bl	8007574 <USBD_Get_USB_Status>
 8007340:	4603      	mov	r3, r0
 8007342:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007344:	7bbb      	ldrb	r3, [r7, #14]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b084      	sub	sp, #16
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
 8007356:	460b      	mov	r3, r1
 8007358:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800735a:	2300      	movs	r3, #0
 800735c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007368:	78fa      	ldrb	r2, [r7, #3]
 800736a:	4611      	mov	r1, r2
 800736c:	4618      	mov	r0, r3
 800736e:	f7fa fda9 	bl	8001ec4 <HAL_PCD_EP_ClrStall>
 8007372:	4603      	mov	r3, r0
 8007374:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007376:	7bfb      	ldrb	r3, [r7, #15]
 8007378:	4618      	mov	r0, r3
 800737a:	f000 f8fb 	bl	8007574 <USBD_Get_USB_Status>
 800737e:	4603      	mov	r3, r0
 8007380:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007382:	7bbb      	ldrb	r3, [r7, #14]
}
 8007384:	4618      	mov	r0, r3
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	460b      	mov	r3, r1
 8007396:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800739e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80073a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	da0b      	bge.n	80073c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80073a8:	78fb      	ldrb	r3, [r7, #3]
 80073aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073ae:	68f9      	ldr	r1, [r7, #12]
 80073b0:	4613      	mov	r3, r2
 80073b2:	00db      	lsls	r3, r3, #3
 80073b4:	4413      	add	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	440b      	add	r3, r1
 80073ba:	3316      	adds	r3, #22
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	e00b      	b.n	80073d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80073c0:	78fb      	ldrb	r3, [r7, #3]
 80073c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073c6:	68f9      	ldr	r1, [r7, #12]
 80073c8:	4613      	mov	r3, r2
 80073ca:	00db      	lsls	r3, r3, #3
 80073cc:	4413      	add	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	440b      	add	r3, r1
 80073d2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80073d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3714      	adds	r7, #20
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	460b      	mov	r3, r1
 80073ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073f4:	2300      	movs	r3, #0
 80073f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80073fe:	78fa      	ldrb	r2, [r7, #3]
 8007400:	4611      	mov	r1, r2
 8007402:	4618      	mov	r0, r3
 8007404:	f7fa fbb0 	bl	8001b68 <HAL_PCD_SetAddress>
 8007408:	4603      	mov	r3, r0
 800740a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800740c:	7bfb      	ldrb	r3, [r7, #15]
 800740e:	4618      	mov	r0, r3
 8007410:	f000 f8b0 	bl	8007574 <USBD_Get_USB_Status>
 8007414:	4603      	mov	r3, r0
 8007416:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007418:	7bbb      	ldrb	r3, [r7, #14]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b086      	sub	sp, #24
 8007426:	af00      	add	r7, sp, #0
 8007428:	60f8      	str	r0, [r7, #12]
 800742a:	607a      	str	r2, [r7, #4]
 800742c:	603b      	str	r3, [r7, #0]
 800742e:	460b      	mov	r3, r1
 8007430:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007432:	2300      	movs	r3, #0
 8007434:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007440:	7af9      	ldrb	r1, [r7, #11]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	f7fa fca0 	bl	8001d8a <HAL_PCD_EP_Transmit>
 800744a:	4603      	mov	r3, r0
 800744c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800744e:	7dfb      	ldrb	r3, [r7, #23]
 8007450:	4618      	mov	r0, r3
 8007452:	f000 f88f 	bl	8007574 <USBD_Get_USB_Status>
 8007456:	4603      	mov	r3, r0
 8007458:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800745a:	7dbb      	ldrb	r3, [r7, #22]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3718      	adds	r7, #24
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	607a      	str	r2, [r7, #4]
 800746e:	603b      	str	r3, [r7, #0]
 8007470:	460b      	mov	r3, r1
 8007472:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007474:	2300      	movs	r3, #0
 8007476:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007478:	2300      	movs	r3, #0
 800747a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007482:	7af9      	ldrb	r1, [r7, #11]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	f7fa fc44 	bl	8001d14 <HAL_PCD_EP_Receive>
 800748c:	4603      	mov	r3, r0
 800748e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007490:	7dfb      	ldrb	r3, [r7, #23]
 8007492:	4618      	mov	r0, r3
 8007494:	f000 f86e 	bl	8007574 <USBD_Get_USB_Status>
 8007498:	4603      	mov	r3, r0
 800749a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800749c:	7dbb      	ldrb	r3, [r7, #22]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3718      	adds	r7, #24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
	...

080074a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	460b      	mov	r3, r1
 80074b2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80074b4:	78fb      	ldrb	r3, [r7, #3]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d002      	beq.n	80074c0 <HAL_PCDEx_LPM_Callback+0x18>
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d01f      	beq.n	80074fe <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80074be:	e03b      	b.n	8007538 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	7adb      	ldrb	r3, [r3, #11]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d007      	beq.n	80074d8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80074c8:	f7f9 f84a 	bl	8000560 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80074cc:	4b1c      	ldr	r3, [pc, #112]	@ (8007540 <HAL_PCDEx_LPM_Callback+0x98>)
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	4a1b      	ldr	r2, [pc, #108]	@ (8007540 <HAL_PCDEx_LPM_Callback+0x98>)
 80074d2:	f023 0306 	bic.w	r3, r3, #6
 80074d6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	6812      	ldr	r2, [r2, #0]
 80074e6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80074ea:	f023 0301 	bic.w	r3, r3, #1
 80074ee:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7fe fa9d 	bl	8005a36 <USBD_LL_Resume>
    break;
 80074fc:	e01c      	b.n	8007538 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	6812      	ldr	r2, [r2, #0]
 800750c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007510:	f043 0301 	orr.w	r3, r3, #1
 8007514:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800751c:	4618      	mov	r0, r3
 800751e:	f7fe fa6e 	bl	80059fe <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	7adb      	ldrb	r3, [r3, #11]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d005      	beq.n	8007536 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800752a:	4b05      	ldr	r3, [pc, #20]	@ (8007540 <HAL_PCDEx_LPM_Callback+0x98>)
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	4a04      	ldr	r2, [pc, #16]	@ (8007540 <HAL_PCDEx_LPM_Callback+0x98>)
 8007530:	f043 0306 	orr.w	r3, r3, #6
 8007534:	6113      	str	r3, [r2, #16]
    break;
 8007536:	bf00      	nop
}
 8007538:	bf00      	nop
 800753a:	3708      	adds	r7, #8
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	e000ed00 	.word	0xe000ed00

08007544 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800754c:	4b03      	ldr	r3, [pc, #12]	@ (800755c <USBD_static_malloc+0x18>)
}
 800754e:	4618      	mov	r0, r3
 8007550:	370c      	adds	r7, #12
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	20000ccc 	.word	0x20000ccc

08007560 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]

}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	4603      	mov	r3, r0
 800757c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007582:	79fb      	ldrb	r3, [r7, #7]
 8007584:	2b03      	cmp	r3, #3
 8007586:	d817      	bhi.n	80075b8 <USBD_Get_USB_Status+0x44>
 8007588:	a201      	add	r2, pc, #4	@ (adr r2, 8007590 <USBD_Get_USB_Status+0x1c>)
 800758a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758e:	bf00      	nop
 8007590:	080075a1 	.word	0x080075a1
 8007594:	080075a7 	.word	0x080075a7
 8007598:	080075ad 	.word	0x080075ad
 800759c:	080075b3 	.word	0x080075b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	73fb      	strb	r3, [r7, #15]
    break;
 80075a4:	e00b      	b.n	80075be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80075a6:	2303      	movs	r3, #3
 80075a8:	73fb      	strb	r3, [r7, #15]
    break;
 80075aa:	e008      	b.n	80075be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80075ac:	2301      	movs	r3, #1
 80075ae:	73fb      	strb	r3, [r7, #15]
    break;
 80075b0:	e005      	b.n	80075be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80075b2:	2303      	movs	r3, #3
 80075b4:	73fb      	strb	r3, [r7, #15]
    break;
 80075b6:	e002      	b.n	80075be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80075b8:	2303      	movs	r3, #3
 80075ba:	73fb      	strb	r3, [r7, #15]
    break;
 80075bc:	bf00      	nop
  }
  return usb_status;
 80075be:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3714      	adds	r7, #20
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <memset>:
 80075cc:	4402      	add	r2, r0
 80075ce:	4603      	mov	r3, r0
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d100      	bne.n	80075d6 <memset+0xa>
 80075d4:	4770      	bx	lr
 80075d6:	f803 1b01 	strb.w	r1, [r3], #1
 80075da:	e7f9      	b.n	80075d0 <memset+0x4>

080075dc <__libc_init_array>:
 80075dc:	b570      	push	{r4, r5, r6, lr}
 80075de:	4d0d      	ldr	r5, [pc, #52]	@ (8007614 <__libc_init_array+0x38>)
 80075e0:	4c0d      	ldr	r4, [pc, #52]	@ (8007618 <__libc_init_array+0x3c>)
 80075e2:	1b64      	subs	r4, r4, r5
 80075e4:	10a4      	asrs	r4, r4, #2
 80075e6:	2600      	movs	r6, #0
 80075e8:	42a6      	cmp	r6, r4
 80075ea:	d109      	bne.n	8007600 <__libc_init_array+0x24>
 80075ec:	4d0b      	ldr	r5, [pc, #44]	@ (800761c <__libc_init_array+0x40>)
 80075ee:	4c0c      	ldr	r4, [pc, #48]	@ (8007620 <__libc_init_array+0x44>)
 80075f0:	f000 f818 	bl	8007624 <_init>
 80075f4:	1b64      	subs	r4, r4, r5
 80075f6:	10a4      	asrs	r4, r4, #2
 80075f8:	2600      	movs	r6, #0
 80075fa:	42a6      	cmp	r6, r4
 80075fc:	d105      	bne.n	800760a <__libc_init_array+0x2e>
 80075fe:	bd70      	pop	{r4, r5, r6, pc}
 8007600:	f855 3b04 	ldr.w	r3, [r5], #4
 8007604:	4798      	blx	r3
 8007606:	3601      	adds	r6, #1
 8007608:	e7ee      	b.n	80075e8 <__libc_init_array+0xc>
 800760a:	f855 3b04 	ldr.w	r3, [r5], #4
 800760e:	4798      	blx	r3
 8007610:	3601      	adds	r6, #1
 8007612:	e7f2      	b.n	80075fa <__libc_init_array+0x1e>
 8007614:	080076b4 	.word	0x080076b4
 8007618:	080076b4 	.word	0x080076b4
 800761c:	080076b4 	.word	0x080076b4
 8007620:	080076b8 	.word	0x080076b8

08007624 <_init>:
 8007624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007626:	bf00      	nop
 8007628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800762a:	bc08      	pop	{r3}
 800762c:	469e      	mov	lr, r3
 800762e:	4770      	bx	lr

08007630 <_fini>:
 8007630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007632:	bf00      	nop
 8007634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007636:	bc08      	pop	{r3}
 8007638:	469e      	mov	lr, r3
 800763a:	4770      	bx	lr
