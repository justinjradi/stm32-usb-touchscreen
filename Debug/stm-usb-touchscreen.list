
stm-usb-touchscreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076cc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08007890  08007890  00008890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a00  08007a00  000091c8  2**0
                  CONTENTS
  4 .ARM          00000008  08007a00  08007a00  00008a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a08  08007a08  000091c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a08  08007a08  00008a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a0c  08007a0c  00008a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c8  20000000  08007a10  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a20  200001c8  08007bd8  000091c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000be8  08007bd8  00009be8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df47  00000000  00000000  000091f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002be1  00000000  00000000  0001713f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  00019d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b3  00000000  00000000  0001a8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023546  00000000  00000000  0001b19b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a8a  00000000  00000000  0003e6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9cdc  00000000  00000000  0004f16b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118e47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002eec  00000000  00000000  00118e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0011bd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001c8 	.word	0x200001c8
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007878 	.word	0x08007878

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001cc 	.word	0x200001cc
 8000200:	08007878 	.word	0x08007878

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 f9c9 	bl	8000890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f849 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f8b3 	bl	800066c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000506:	f006 fc9d 	bl	8006e44 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  int user_button_pressed = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  			if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 800050e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000512:	481e      	ldr	r0, [pc, #120]	@ (800058c <main+0x98>)
 8000514:	f000 fcf8 	bl	8000f08 <HAL_GPIO_ReadPin>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d002      	beq.n	8000524 <main+0x30>
  			{
  				user_button_pressed = 1;
 800051e:	2301      	movs	r3, #1
 8000520:	607b      	str	r3, [r7, #4]
 8000522:	e7f4      	b.n	800050e <main+0x1a>
  			}
  			else if (user_button_pressed)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0f1      	beq.n	800050e <main+0x1a>
  			{
  				HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 800052a:	2201      	movs	r2, #1
 800052c:	2101      	movs	r1, #1
 800052e:	4818      	ldr	r0, [pc, #96]	@ (8000590 <main+0x9c>)
 8000530:	f000 fd02 	bl	8000f38 <HAL_GPIO_WritePin>
  				HAL_Delay(250);
 8000534:	20fa      	movs	r0, #250	@ 0xfa
 8000536:	f000 fa1d 	bl	8000974 <HAL_Delay>
  				HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	2101      	movs	r1, #1
 800053e:	4814      	ldr	r0, [pc, #80]	@ (8000590 <main+0x9c>)
 8000540:	f000 fcfa 	bl	8000f38 <HAL_GPIO_WritePin>
  				user_button_pressed = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]

  				touchscreen_set_contact(0, 700, 700);
 8000548:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800054c:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 8000550:	2000      	movs	r0, #0
 8000552:	f006 fba5 	bl	8006ca0 <touchscreen_set_contact>
  				touchscreen_set_contact(1, 1000, 700);
 8000556:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800055a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800055e:	2001      	movs	r0, #1
 8000560:	f006 fb9e 	bl	8006ca0 <touchscreen_set_contact>
  				touchscreen_send(0);
 8000564:	2000      	movs	r0, #0
 8000566:	f006 fc0b 	bl	8006d80 <touchscreen_send>
  				HAL_Delay(100);
 800056a:	2064      	movs	r0, #100	@ 0x64
 800056c:	f000 fa02 	bl	8000974 <HAL_Delay>
  				touchscreen_remove_contact(0);
 8000570:	2000      	movs	r0, #0
 8000572:	f006 fbd9 	bl	8006d28 <touchscreen_remove_contact>
  				touchscreen_remove_contact(1);
 8000576:	2001      	movs	r0, #1
 8000578:	f006 fbd6 	bl	8006d28 <touchscreen_remove_contact>
  				touchscreen_send(100000);
 800057c:	f248 60a0 	movw	r0, #34464	@ 0x86a0
 8000580:	f006 fbfe 	bl	8006d80 <touchscreen_send>
  				HAL_Delay(250);
 8000584:	20fa      	movs	r0, #250	@ 0xfa
 8000586:	f000 f9f5 	bl	8000974 <HAL_Delay>
  			if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 800058a:	e7c0      	b.n	800050e <main+0x1a>
 800058c:	40020800 	.word	0x40020800
 8000590:	40020400 	.word	0x40020400

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	@ 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2234      	movs	r2, #52	@ 0x34
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f007 f92e 	bl	8007804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b29      	ldr	r3, [pc, #164]	@ (8000664 <SystemClock_Config+0xd0>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c0:	4a28      	ldr	r2, [pc, #160]	@ (8000664 <SystemClock_Config+0xd0>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c8:	4b26      	ldr	r3, [pc, #152]	@ (8000664 <SystemClock_Config+0xd0>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	2300      	movs	r3, #0
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	4b23      	ldr	r3, [pc, #140]	@ (8000668 <SystemClock_Config+0xd4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a22      	ldr	r2, [pc, #136]	@ (8000668 <SystemClock_Config+0xd4>)
 80005de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b20      	ldr	r3, [pc, #128]	@ (8000668 <SystemClock_Config+0xd4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000602:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000604:	2304      	movs	r3, #4
 8000606:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000608:	23a8      	movs	r3, #168	@ 0xa8
 800060a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060c:	2302      	movs	r3, #2
 800060e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000610:	2307      	movs	r3, #7
 8000612:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000614:	2302      	movs	r3, #2
 8000616:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4618      	mov	r0, r3
 800061e:	f002 fd75 	bl	800310c <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000628:	f000 f88e 	bl	8000748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000630:	2302      	movs	r3, #2
 8000632:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000638:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800063c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000642:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2105      	movs	r1, #5
 800064a:	4618      	mov	r0, r3
 800064c:	f001 ff12 	bl	8002474 <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000656:	f000 f877 	bl	8000748 <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3750      	adds	r7, #80	@ 0x50
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	@ 0x28
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	4b2d      	ldr	r3, [pc, #180]	@ (800073c <MX_GPIO_Init+0xd0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a2c      	ldr	r2, [pc, #176]	@ (800073c <MX_GPIO_Init+0xd0>)
 800068c:	f043 0304 	orr.w	r3, r3, #4
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b2a      	ldr	r3, [pc, #168]	@ (800073c <MX_GPIO_Init+0xd0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0304 	and.w	r3, r3, #4
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	4b26      	ldr	r3, [pc, #152]	@ (800073c <MX_GPIO_Init+0xd0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	4a25      	ldr	r2, [pc, #148]	@ (800073c <MX_GPIO_Init+0xd0>)
 80006a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ae:	4b23      	ldr	r3, [pc, #140]	@ (800073c <MX_GPIO_Init+0xd0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	4b1f      	ldr	r3, [pc, #124]	@ (800073c <MX_GPIO_Init+0xd0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	4a1e      	ldr	r2, [pc, #120]	@ (800073c <MX_GPIO_Init+0xd0>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ca:	4b1c      	ldr	r3, [pc, #112]	@ (800073c <MX_GPIO_Init+0xd0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b18      	ldr	r3, [pc, #96]	@ (800073c <MX_GPIO_Init+0xd0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a17      	ldr	r2, [pc, #92]	@ (800073c <MX_GPIO_Init+0xd0>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b15      	ldr	r3, [pc, #84]	@ (800073c <MX_GPIO_Init+0xd0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2101      	movs	r1, #1
 80006f6:	4812      	ldr	r0, [pc, #72]	@ (8000740 <MX_GPIO_Init+0xd4>)
 80006f8:	f000 fc1e 	bl	8000f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80006fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000702:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	4619      	mov	r1, r3
 8000712:	480c      	ldr	r0, [pc, #48]	@ (8000744 <MX_GPIO_Init+0xd8>)
 8000714:	f000 fa64 	bl	8000be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000718:	2301      	movs	r3, #1
 800071a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	2301      	movs	r3, #1
 800071e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2300      	movs	r3, #0
 8000726:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4619      	mov	r1, r3
 800072e:	4804      	ldr	r0, [pc, #16]	@ (8000740 <MX_GPIO_Init+0xd4>)
 8000730:	f000 fa56 	bl	8000be0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000734:	bf00      	nop
 8000736:	3728      	adds	r7, #40	@ 0x28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40020400 	.word	0x40020400
 8000744:	40020800 	.word	0x40020800

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <Error_Handler+0x8>

08000754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <HAL_MspInit+0x4c>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000762:	4a0f      	ldr	r2, [pc, #60]	@ (80007a0 <HAL_MspInit+0x4c>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000768:	6453      	str	r3, [r2, #68]	@ 0x44
 800076a:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <HAL_MspInit+0x4c>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <HAL_MspInit+0x4c>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077e:	4a08      	ldr	r2, [pc, #32]	@ (80007a0 <HAL_MspInit+0x4c>)
 8000780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000784:	6413      	str	r3, [r2, #64]	@ 0x40
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <HAL_MspInit+0x4c>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <NMI_Handler+0x4>

080007ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <HardFault_Handler+0x4>

080007b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <MemManage_Handler+0x4>

080007bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <BusFault_Handler+0x4>

080007c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <UsageFault_Handler+0x4>

080007cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007fa:	f000 f89b 	bl	8000934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000808:	4802      	ldr	r0, [pc, #8]	@ (8000814 <OTG_FS_IRQHandler+0x10>)
 800080a:	f000 fcf9 	bl	8001200 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200006e8 	.word	0x200006e8

08000818 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800081c:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <SystemInit+0x20>)
 800081e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000822:	4a05      	ldr	r2, [pc, #20]	@ (8000838 <SystemInit+0x20>)
 8000824:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000828:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800083c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000874 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000840:	f7ff ffea 	bl	8000818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000844:	480c      	ldr	r0, [pc, #48]	@ (8000878 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000846:	490d      	ldr	r1, [pc, #52]	@ (800087c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000848:	4a0d      	ldr	r2, [pc, #52]	@ (8000880 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800084c:	e002      	b.n	8000854 <LoopCopyDataInit>

0800084e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000852:	3304      	adds	r3, #4

08000854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000858:	d3f9      	bcc.n	800084e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085a:	4a0a      	ldr	r2, [pc, #40]	@ (8000884 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800085c:	4c0a      	ldr	r4, [pc, #40]	@ (8000888 <LoopFillZerobss+0x22>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000860:	e001      	b.n	8000866 <LoopFillZerobss>

08000862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000864:	3204      	adds	r2, #4

08000866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000868:	d3fb      	bcc.n	8000862 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800086a:	f006 ffd3 	bl	8007814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800086e:	f7ff fe41 	bl	80004f4 <main>
  bx  lr    
 8000872:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000874:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800087c:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8000880:	08007a10 	.word	0x08007a10
  ldr r2, =_sbss
 8000884:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000888:	20000be8 	.word	0x20000be8

0800088c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800088c:	e7fe      	b.n	800088c <ADC_IRQHandler>
	...

08000890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000894:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <HAL_Init+0x40>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a0d      	ldr	r2, [pc, #52]	@ (80008d0 <HAL_Init+0x40>)
 800089a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800089e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008a0:	4b0b      	ldr	r3, [pc, #44]	@ (80008d0 <HAL_Init+0x40>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a0a      	ldr	r2, [pc, #40]	@ (80008d0 <HAL_Init+0x40>)
 80008a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ac:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <HAL_Init+0x40>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a07      	ldr	r2, [pc, #28]	@ (80008d0 <HAL_Init+0x40>)
 80008b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b8:	2003      	movs	r0, #3
 80008ba:	f000 f94f 	bl	8000b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008be:	2000      	movs	r0, #0
 80008c0:	f000 f808 	bl	80008d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c4:	f7ff ff46 	bl	8000754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023c00 	.word	0x40023c00

080008d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008dc:	4b12      	ldr	r3, [pc, #72]	@ (8000928 <HAL_InitTick+0x54>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <HAL_InitTick+0x58>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f967 	bl	8000bc6 <HAL_SYSTICK_Config>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e00e      	b.n	8000920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b0f      	cmp	r3, #15
 8000906:	d80a      	bhi.n	800091e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000908:	2200      	movs	r2, #0
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	f04f 30ff 	mov.w	r0, #4294967295
 8000910:	f000 f92f 	bl	8000b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000914:	4a06      	ldr	r2, [pc, #24]	@ (8000930 <HAL_InitTick+0x5c>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800091a:	2300      	movs	r3, #0
 800091c:	e000      	b.n	8000920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
}
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000000 	.word	0x20000000
 800092c:	20000008 	.word	0x20000008
 8000930:	20000004 	.word	0x20000004

08000934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000938:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <HAL_IncTick+0x20>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <HAL_IncTick+0x24>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4413      	add	r3, r2
 8000944:	4a04      	ldr	r2, [pc, #16]	@ (8000958 <HAL_IncTick+0x24>)
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000008 	.word	0x20000008
 8000958:	200001e4 	.word	0x200001e4

0800095c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return uwTick;
 8000960:	4b03      	ldr	r3, [pc, #12]	@ (8000970 <HAL_GetTick+0x14>)
 8000962:	681b      	ldr	r3, [r3, #0]
}
 8000964:	4618      	mov	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	200001e4 	.word	0x200001e4

08000974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800097c:	f7ff ffee 	bl	800095c <HAL_GetTick>
 8000980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800098c:	d005      	beq.n	800099a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800098e:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <HAL_Delay+0x44>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	461a      	mov	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	4413      	add	r3, r2
 8000998:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800099a:	bf00      	nop
 800099c:	f7ff ffde 	bl	800095c <HAL_GetTick>
 80009a0:	4602      	mov	r2, r0
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d8f7      	bhi.n	800099c <HAL_Delay+0x28>
  {
  }
}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000008 	.word	0x20000008

080009bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009d8:	4013      	ands	r3, r2
 80009da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ee:	4a04      	ldr	r2, [pc, #16]	@ (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	60d3      	str	r3, [r2, #12]
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a08:	4b04      	ldr	r3, [pc, #16]	@ (8000a1c <__NVIC_GetPriorityGrouping+0x18>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	0a1b      	lsrs	r3, r3, #8
 8000a0e:	f003 0307 	and.w	r3, r3, #7
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	db0b      	blt.n	8000a4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	f003 021f 	and.w	r2, r3, #31
 8000a38:	4907      	ldr	r1, [pc, #28]	@ (8000a58 <__NVIC_EnableIRQ+0x38>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	095b      	lsrs	r3, r3, #5
 8000a40:	2001      	movs	r0, #1
 8000a42:	fa00 f202 	lsl.w	r2, r0, r2
 8000a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000e100 	.word	0xe000e100

08000a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	db0a      	blt.n	8000a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	490c      	ldr	r1, [pc, #48]	@ (8000aa8 <__NVIC_SetPriority+0x4c>)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	0112      	lsls	r2, r2, #4
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	440b      	add	r3, r1
 8000a80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a84:	e00a      	b.n	8000a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4908      	ldr	r1, [pc, #32]	@ (8000aac <__NVIC_SetPriority+0x50>)
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	f003 030f 	and.w	r3, r3, #15
 8000a92:	3b04      	subs	r3, #4
 8000a94:	0112      	lsls	r2, r2, #4
 8000a96:	b2d2      	uxtb	r2, r2
 8000a98:	440b      	add	r3, r1
 8000a9a:	761a      	strb	r2, [r3, #24]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000e100 	.word	0xe000e100
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b089      	sub	sp, #36	@ 0x24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	f1c3 0307 	rsb	r3, r3, #7
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	bf28      	it	cs
 8000ace:	2304      	movcs	r3, #4
 8000ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	2b06      	cmp	r3, #6
 8000ad8:	d902      	bls.n	8000ae0 <NVIC_EncodePriority+0x30>
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3b03      	subs	r3, #3
 8000ade:	e000      	b.n	8000ae2 <NVIC_EncodePriority+0x32>
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43da      	mvns	r2, r3
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	401a      	ands	r2, r3
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af8:	f04f 31ff 	mov.w	r1, #4294967295
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	43d9      	mvns	r1, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	4313      	orrs	r3, r2
         );
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3724      	adds	r7, #36	@ 0x24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b28:	d301      	bcc.n	8000b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e00f      	b.n	8000b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b58 <SysTick_Config+0x40>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b36:	210f      	movs	r1, #15
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	f7ff ff8e 	bl	8000a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b40:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <SysTick_Config+0x40>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b46:	4b04      	ldr	r3, [pc, #16]	@ (8000b58 <SysTick_Config+0x40>)
 8000b48:	2207      	movs	r2, #7
 8000b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	e000e010 	.word	0xe000e010

08000b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff ff29 	bl	80009bc <__NVIC_SetPriorityGrouping>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b086      	sub	sp, #24
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	4603      	mov	r3, r0
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b84:	f7ff ff3e 	bl	8000a04 <__NVIC_GetPriorityGrouping>
 8000b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	68b9      	ldr	r1, [r7, #8]
 8000b8e:	6978      	ldr	r0, [r7, #20]
 8000b90:	f7ff ff8e 	bl	8000ab0 <NVIC_EncodePriority>
 8000b94:	4602      	mov	r2, r0
 8000b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff5d 	bl	8000a5c <__NVIC_SetPriority>
}
 8000ba2:	bf00      	nop
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff31 	bl	8000a20 <__NVIC_EnableIRQ>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ffa2 	bl	8000b18 <SysTick_Config>
 8000bd4:	4603      	mov	r3, r0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	@ 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
 8000bfa:	e165      	b.n	8000ec8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	697a      	ldr	r2, [r7, #20]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	f040 8154 	bne.w	8000ec2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 0303 	and.w	r3, r3, #3
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d005      	beq.n	8000c32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d130      	bne.n	8000c94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43db      	mvns	r3, r3
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	4013      	ands	r3, r2
 8000c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	68da      	ldr	r2, [r3, #12]
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c68:	2201      	movs	r2, #1
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4013      	ands	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	091b      	lsrs	r3, r3, #4
 8000c7e:	f003 0201 	and.w	r2, r3, #1
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 0303 	and.w	r3, r3, #3
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	d017      	beq.n	8000cd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	2203      	movs	r2, #3
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	689a      	ldr	r2, [r3, #8]
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d123      	bne.n	8000d24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	08da      	lsrs	r2, r3, #3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3208      	adds	r2, #8
 8000ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	f003 0307 	and.w	r3, r3, #7
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	220f      	movs	r2, #15
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	691a      	ldr	r2, [r3, #16]
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	08da      	lsrs	r2, r3, #3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3208      	adds	r2, #8
 8000d1e:	69b9      	ldr	r1, [r7, #24]
 8000d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 0203 	and.w	r2, r3, #3
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f000 80ae 	beq.w	8000ec2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ee0 <HAL_GPIO_Init+0x300>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6e:	4a5c      	ldr	r2, [pc, #368]	@ (8000ee0 <HAL_GPIO_Init+0x300>)
 8000d70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d76:	4b5a      	ldr	r3, [pc, #360]	@ (8000ee0 <HAL_GPIO_Init+0x300>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d82:	4a58      	ldr	r2, [pc, #352]	@ (8000ee4 <HAL_GPIO_Init+0x304>)
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	089b      	lsrs	r3, r3, #2
 8000d88:	3302      	adds	r3, #2
 8000d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	220f      	movs	r2, #15
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4013      	ands	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a4f      	ldr	r2, [pc, #316]	@ (8000ee8 <HAL_GPIO_Init+0x308>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d025      	beq.n	8000dfa <HAL_GPIO_Init+0x21a>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a4e      	ldr	r2, [pc, #312]	@ (8000eec <HAL_GPIO_Init+0x30c>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d01f      	beq.n	8000df6 <HAL_GPIO_Init+0x216>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a4d      	ldr	r2, [pc, #308]	@ (8000ef0 <HAL_GPIO_Init+0x310>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d019      	beq.n	8000df2 <HAL_GPIO_Init+0x212>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a4c      	ldr	r2, [pc, #304]	@ (8000ef4 <HAL_GPIO_Init+0x314>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d013      	beq.n	8000dee <HAL_GPIO_Init+0x20e>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a4b      	ldr	r2, [pc, #300]	@ (8000ef8 <HAL_GPIO_Init+0x318>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d00d      	beq.n	8000dea <HAL_GPIO_Init+0x20a>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a4a      	ldr	r2, [pc, #296]	@ (8000efc <HAL_GPIO_Init+0x31c>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d007      	beq.n	8000de6 <HAL_GPIO_Init+0x206>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a49      	ldr	r2, [pc, #292]	@ (8000f00 <HAL_GPIO_Init+0x320>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d101      	bne.n	8000de2 <HAL_GPIO_Init+0x202>
 8000dde:	2306      	movs	r3, #6
 8000de0:	e00c      	b.n	8000dfc <HAL_GPIO_Init+0x21c>
 8000de2:	2307      	movs	r3, #7
 8000de4:	e00a      	b.n	8000dfc <HAL_GPIO_Init+0x21c>
 8000de6:	2305      	movs	r3, #5
 8000de8:	e008      	b.n	8000dfc <HAL_GPIO_Init+0x21c>
 8000dea:	2304      	movs	r3, #4
 8000dec:	e006      	b.n	8000dfc <HAL_GPIO_Init+0x21c>
 8000dee:	2303      	movs	r3, #3
 8000df0:	e004      	b.n	8000dfc <HAL_GPIO_Init+0x21c>
 8000df2:	2302      	movs	r3, #2
 8000df4:	e002      	b.n	8000dfc <HAL_GPIO_Init+0x21c>
 8000df6:	2301      	movs	r3, #1
 8000df8:	e000      	b.n	8000dfc <HAL_GPIO_Init+0x21c>
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	69fa      	ldr	r2, [r7, #28]
 8000dfe:	f002 0203 	and.w	r2, r2, #3
 8000e02:	0092      	lsls	r2, r2, #2
 8000e04:	4093      	lsls	r3, r2
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e0c:	4935      	ldr	r1, [pc, #212]	@ (8000ee4 <HAL_GPIO_Init+0x304>)
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	089b      	lsrs	r3, r3, #2
 8000e12:	3302      	adds	r3, #2
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e1a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f04 <HAL_GPIO_Init+0x324>)
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	43db      	mvns	r3, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d003      	beq.n	8000e3e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e3e:	4a31      	ldr	r2, [pc, #196]	@ (8000f04 <HAL_GPIO_Init+0x324>)
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e44:	4b2f      	ldr	r3, [pc, #188]	@ (8000f04 <HAL_GPIO_Init+0x324>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d003      	beq.n	8000e68 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e68:	4a26      	ldr	r2, [pc, #152]	@ (8000f04 <HAL_GPIO_Init+0x324>)
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e6e:	4b25      	ldr	r3, [pc, #148]	@ (8000f04 <HAL_GPIO_Init+0x324>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e92:	4a1c      	ldr	r2, [pc, #112]	@ (8000f04 <HAL_GPIO_Init+0x324>)
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e98:	4b1a      	ldr	r3, [pc, #104]	@ (8000f04 <HAL_GPIO_Init+0x324>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ebc:	4a11      	ldr	r2, [pc, #68]	@ (8000f04 <HAL_GPIO_Init+0x324>)
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	61fb      	str	r3, [r7, #28]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	2b0f      	cmp	r3, #15
 8000ecc:	f67f ae96 	bls.w	8000bfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3724      	adds	r7, #36	@ 0x24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40013800 	.word	0x40013800
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	40020400 	.word	0x40020400
 8000ef0:	40020800 	.word	0x40020800
 8000ef4:	40020c00 	.word	0x40020c00
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40021400 	.word	0x40021400
 8000f00:	40021800 	.word	0x40021800
 8000f04:	40013c00 	.word	0x40013c00

08000f08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	691a      	ldr	r2, [r3, #16]
 8000f18:	887b      	ldrh	r3, [r7, #2]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d002      	beq.n	8000f26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f20:	2301      	movs	r3, #1
 8000f22:	73fb      	strb	r3, [r7, #15]
 8000f24:	e001      	b.n	8000f2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	807b      	strh	r3, [r7, #2]
 8000f44:	4613      	mov	r3, r2
 8000f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f48:	787b      	ldrb	r3, [r7, #1]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f4e:	887a      	ldrh	r2, [r7, #2]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f54:	e003      	b.n	8000f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f56:	887b      	ldrh	r3, [r7, #2]
 8000f58:	041a      	lsls	r2, r3, #16
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	619a      	str	r2, [r3, #24]
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b086      	sub	sp, #24
 8000f6e:	af02      	add	r7, sp, #8
 8000f70:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e108      	b.n	800118e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d106      	bne.n	8000f9c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f006 f8ce 	bl	8007138 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000faa:	d102      	bne.n	8000fb2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f002 fc5d 	bl	8003876 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	7c1a      	ldrb	r2, [r3, #16]
 8000fc4:	f88d 2000 	strb.w	r2, [sp]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fcc:	f002 fb3c 	bl	8003648 <USB_CoreInit>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d005      	beq.n	8000fe2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2202      	movs	r2, #2
 8000fda:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e0d5      	b.n	800118e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f002 fc55 	bl	8003898 <USB_SetCurrentMode>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d005      	beq.n	8001000 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e0c6      	b.n	800118e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001000:	2300      	movs	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]
 8001004:	e04a      	b.n	800109c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001006:	7bfa      	ldrb	r2, [r7, #15]
 8001008:	6879      	ldr	r1, [r7, #4]
 800100a:	4613      	mov	r3, r2
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	4413      	add	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	440b      	add	r3, r1
 8001014:	3315      	adds	r3, #21
 8001016:	2201      	movs	r2, #1
 8001018:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	6879      	ldr	r1, [r7, #4]
 800101e:	4613      	mov	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	4413      	add	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	440b      	add	r3, r1
 8001028:	3314      	adds	r3, #20
 800102a:	7bfa      	ldrb	r2, [r7, #15]
 800102c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	b298      	uxth	r0, r3
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	4613      	mov	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	4413      	add	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	440b      	add	r3, r1
 8001040:	332e      	adds	r3, #46	@ 0x2e
 8001042:	4602      	mov	r2, r0
 8001044:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001046:	7bfa      	ldrb	r2, [r7, #15]
 8001048:	6879      	ldr	r1, [r7, #4]
 800104a:	4613      	mov	r3, r2
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	4413      	add	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	440b      	add	r3, r1
 8001054:	3318      	adds	r3, #24
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	4613      	mov	r3, r2
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	4413      	add	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	440b      	add	r3, r1
 8001068:	331c      	adds	r3, #28
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800106e:	7bfa      	ldrb	r2, [r7, #15]
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	4613      	mov	r3, r2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4413      	add	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	440b      	add	r3, r1
 800107c:	3320      	adds	r3, #32
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001082:	7bfa      	ldrb	r2, [r7, #15]
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	4613      	mov	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	4413      	add	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	440b      	add	r3, r1
 8001090:	3324      	adds	r3, #36	@ 0x24
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	3301      	adds	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	791b      	ldrb	r3, [r3, #4]
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d3af      	bcc.n	8001006 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	e044      	b.n	8001136 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010ac:	7bfa      	ldrb	r2, [r7, #15]
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	4413      	add	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010c2:	7bfa      	ldrb	r2, [r7, #15]
 80010c4:	6879      	ldr	r1, [r7, #4]
 80010c6:	4613      	mov	r3, r2
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	4413      	add	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	440b      	add	r3, r1
 80010d0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80010d4:	7bfa      	ldrb	r2, [r7, #15]
 80010d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010d8:	7bfa      	ldrb	r2, [r7, #15]
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	4613      	mov	r3, r2
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	4413      	add	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	440b      	add	r3, r1
 80010e6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010ee:	7bfa      	ldrb	r2, [r7, #15]
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	4613      	mov	r3, r2
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	4413      	add	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	440b      	add	r3, r1
 80010fc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001104:	7bfa      	ldrb	r2, [r7, #15]
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	4613      	mov	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	4413      	add	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	440b      	add	r3, r1
 8001128:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	3301      	adds	r3, #1
 8001134:	73fb      	strb	r3, [r7, #15]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	791b      	ldrb	r3, [r3, #4]
 800113a:	7bfa      	ldrb	r2, [r7, #15]
 800113c:	429a      	cmp	r2, r3
 800113e:	d3b5      	bcc.n	80010ac <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	7c1a      	ldrb	r2, [r3, #16]
 8001148:	f88d 2000 	strb.w	r2, [sp]
 800114c:	3304      	adds	r3, #4
 800114e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001150:	f002 fbee 	bl	8003930 <USB_DevInit>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d005      	beq.n	8001166 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2202      	movs	r2, #2
 800115e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e013      	b.n	800118e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7b1b      	ldrb	r3, [r3, #12]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d102      	bne.n	8001182 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f001 f955 	bl	800242c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f003 fc25 	bl	80049d6 <USB_DevDisconnect>

  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b084      	sub	sp, #16
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d101      	bne.n	80011b2 <HAL_PCD_Start+0x1c>
 80011ae:	2302      	movs	r3, #2
 80011b0:	e022      	b.n	80011f8 <HAL_PCD_Start+0x62>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2201      	movs	r2, #1
 80011b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d009      	beq.n	80011da <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d105      	bne.n	80011da <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011d2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f002 fb38 	bl	8003854 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f003 fbd3 	bl	8004994 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b08d      	sub	sp, #52	@ 0x34
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800120e:	6a3b      	ldr	r3, [r7, #32]
 8001210:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f003 fc91 	bl	8004b3e <USB_GetMode>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	f040 84b9 	bne.w	8001b96 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f003 fbf5 	bl	8004a18 <USB_ReadInterrupts>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 84af 	beq.w	8001b94 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	0a1b      	lsrs	r3, r3, #8
 8001240:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f003 fbe2 	bl	8004a18 <USB_ReadInterrupts>
 8001254:	4603      	mov	r3, r0
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b02      	cmp	r3, #2
 800125c:	d107      	bne.n	800126e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	695a      	ldr	r2, [r3, #20]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f002 0202 	and.w	r2, r2, #2
 800126c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f003 fbd0 	bl	8004a18 <USB_ReadInterrupts>
 8001278:	4603      	mov	r3, r0
 800127a:	f003 0310 	and.w	r3, r3, #16
 800127e:	2b10      	cmp	r3, #16
 8001280:	d161      	bne.n	8001346 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	699a      	ldr	r2, [r3, #24]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 0210 	bic.w	r2, r2, #16
 8001290:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001292:	6a3b      	ldr	r3, [r7, #32]
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	f003 020f 	and.w	r2, r3, #15
 800129e:	4613      	mov	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	4413      	add	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	3304      	adds	r3, #4
 80012b0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	0c5b      	lsrs	r3, r3, #17
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d124      	bne.n	8001308 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80012c4:	4013      	ands	r3, r2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d035      	beq.n	8001336 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012d8:	b29b      	uxth	r3, r3
 80012da:	461a      	mov	r2, r3
 80012dc:	6a38      	ldr	r0, [r7, #32]
 80012de:	f003 fa07 	bl	80046f0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ee:	441a      	add	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	695a      	ldr	r2, [r3, #20]
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	091b      	lsrs	r3, r3, #4
 80012fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001300:	441a      	add	r2, r3
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	615a      	str	r2, [r3, #20]
 8001306:	e016      	b.n	8001336 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	0c5b      	lsrs	r3, r3, #17
 800130c:	f003 030f 	and.w	r3, r3, #15
 8001310:	2b06      	cmp	r3, #6
 8001312:	d110      	bne.n	8001336 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800131a:	2208      	movs	r2, #8
 800131c:	4619      	mov	r1, r3
 800131e:	6a38      	ldr	r0, [r7, #32]
 8001320:	f003 f9e6 	bl	80046f0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	695a      	ldr	r2, [r3, #20]
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	091b      	lsrs	r3, r3, #4
 800132c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001330:	441a      	add	r2, r3
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	699a      	ldr	r2, [r3, #24]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f042 0210 	orr.w	r2, r2, #16
 8001344:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f003 fb64 	bl	8004a18 <USB_ReadInterrupts>
 8001350:	4603      	mov	r3, r0
 8001352:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001356:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800135a:	f040 80a7 	bne.w	80014ac <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f003 fb69 	bl	8004a3e <USB_ReadDevAllOutEpInterrupt>
 800136c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800136e:	e099      	b.n	80014a4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 808e 	beq.w	8001498 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	4611      	mov	r1, r2
 8001386:	4618      	mov	r0, r3
 8001388:	f003 fb8d 	bl	8004aa6 <USB_ReadDevOutEPInterrupt>
 800138c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00c      	beq.n	80013b2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139a:	015a      	lsls	r2, r3, #5
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	4413      	add	r3, r2
 80013a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013a4:	461a      	mov	r2, r3
 80013a6:	2301      	movs	r3, #1
 80013a8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80013aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 feb7 	bl	8002120 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00c      	beq.n	80013d6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013be:	015a      	lsls	r2, r3, #5
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	4413      	add	r3, r2
 80013c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013c8:	461a      	mov	r2, r3
 80013ca:	2308      	movs	r3, #8
 80013cc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 ff8d 	bl	80022f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	f003 0310 	and.w	r3, r3, #16
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d008      	beq.n	80013f2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e2:	015a      	lsls	r2, r3, #5
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	4413      	add	r3, r2
 80013e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013ec:	461a      	mov	r2, r3
 80013ee:	2310      	movs	r3, #16
 80013f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d030      	beq.n	800145e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001404:	2b80      	cmp	r3, #128	@ 0x80
 8001406:	d109      	bne.n	800141c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	69fa      	ldr	r2, [r7, #28]
 8001412:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001416:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800141a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800141c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800141e:	4613      	mov	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	4413      	add	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	3304      	adds	r3, #4
 8001430:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	78db      	ldrb	r3, [r3, #3]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d108      	bne.n	800144c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	2200      	movs	r2, #0
 800143e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001442:	b2db      	uxtb	r3, r3
 8001444:	4619      	mov	r1, r3
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f005 ff92 	bl	8007370 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800144c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144e:	015a      	lsls	r2, r3, #5
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	4413      	add	r3, r2
 8001454:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001458:	461a      	mov	r2, r3
 800145a:	2302      	movs	r3, #2
 800145c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	f003 0320 	and.w	r3, r3, #32
 8001464:	2b00      	cmp	r3, #0
 8001466:	d008      	beq.n	800147a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146a:	015a      	lsls	r2, r3, #5
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	4413      	add	r3, r2
 8001470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001474:	461a      	mov	r2, r3
 8001476:	2320      	movs	r3, #32
 8001478:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d009      	beq.n	8001498 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001486:	015a      	lsls	r2, r3, #5
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	4413      	add	r3, r2
 800148c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001490:	461a      	mov	r2, r3
 8001492:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001496:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149a:	3301      	adds	r3, #1
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800149e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014a0:	085b      	lsrs	r3, r3, #1
 80014a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80014a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f47f af62 	bne.w	8001370 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f003 fab1 	bl	8004a18 <USB_ReadInterrupts>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80014c0:	f040 80db 	bne.w	800167a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f003 fad2 	bl	8004a72 <USB_ReadDevAllInEpInterrupt>
 80014ce:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80014d4:	e0cd      	b.n	8001672 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80c2 	beq.w	8001666 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f003 faf8 	bl	8004ae2 <USB_ReadDevInEPInterrupt>
 80014f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d057      	beq.n	80015ae <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001500:	f003 030f 	and.w	r3, r3, #15
 8001504:	2201      	movs	r2, #1
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001512:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	43db      	mvns	r3, r3
 8001518:	69f9      	ldr	r1, [r7, #28]
 800151a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800151e:	4013      	ands	r3, r2
 8001520:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001524:	015a      	lsls	r2, r3, #5
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	4413      	add	r3, r2
 800152a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800152e:	461a      	mov	r2, r3
 8001530:	2301      	movs	r3, #1
 8001532:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	799b      	ldrb	r3, [r3, #6]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d132      	bne.n	80015a2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001540:	4613      	mov	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	4413      	add	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	440b      	add	r3, r1
 800154a:	3320      	adds	r3, #32
 800154c:	6819      	ldr	r1, [r3, #0]
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001552:	4613      	mov	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	4413      	add	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4403      	add	r3, r0
 800155c:	331c      	adds	r3, #28
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4419      	add	r1, r3
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001566:	4613      	mov	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	4413      	add	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4403      	add	r3, r0
 8001570:	3320      	adds	r3, #32
 8001572:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001576:	2b00      	cmp	r3, #0
 8001578:	d113      	bne.n	80015a2 <HAL_PCD_IRQHandler+0x3a2>
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800157e:	4613      	mov	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	4413      	add	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	440b      	add	r3, r1
 8001588:	3324      	adds	r3, #36	@ 0x24
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d108      	bne.n	80015a2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6818      	ldr	r0, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800159a:	461a      	mov	r2, r3
 800159c:	2101      	movs	r1, #1
 800159e:	f003 faff 	bl	8004ba0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4619      	mov	r1, r3
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f005 fe5c 	bl	8007266 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d008      	beq.n	80015ca <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ba:	015a      	lsls	r2, r3, #5
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	4413      	add	r3, r2
 80015c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015c4:	461a      	mov	r2, r3
 80015c6:	2308      	movs	r3, #8
 80015c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	f003 0310 	and.w	r3, r3, #16
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d008      	beq.n	80015e6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d6:	015a      	lsls	r2, r3, #5
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	4413      	add	r3, r2
 80015dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015e0:	461a      	mov	r2, r3
 80015e2:	2310      	movs	r3, #16
 80015e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d008      	beq.n	8001602 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f2:	015a      	lsls	r2, r3, #5
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	4413      	add	r3, r2
 80015f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015fc:	461a      	mov	r2, r3
 80015fe:	2340      	movs	r3, #64	@ 0x40
 8001600:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d023      	beq.n	8001654 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800160c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800160e:	6a38      	ldr	r0, [r7, #32]
 8001610:	f002 faec 	bl	8003bec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001616:	4613      	mov	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4413      	add	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	3310      	adds	r3, #16
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	4413      	add	r3, r2
 8001624:	3304      	adds	r3, #4
 8001626:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	78db      	ldrb	r3, [r3, #3]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d108      	bne.n	8001642 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	2200      	movs	r2, #0
 8001634:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001638:	b2db      	uxtb	r3, r3
 800163a:	4619      	mov	r1, r3
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f005 fea9 	bl	8007394 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001644:	015a      	lsls	r2, r3, #5
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	4413      	add	r3, r2
 800164a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800164e:	461a      	mov	r2, r3
 8001650:	2302      	movs	r3, #2
 8001652:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800165e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f000 fcd0 	bl	8002006 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001668:	3301      	adds	r3, #1
 800166a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800166c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800166e:	085b      	lsrs	r3, r3, #1
 8001670:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001674:	2b00      	cmp	r3, #0
 8001676:	f47f af2e 	bne.w	80014d6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f003 f9ca 	bl	8004a18 <USB_ReadInterrupts>
 8001684:	4603      	mov	r3, r0
 8001686:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800168a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800168e:	d122      	bne.n	80016d6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	69fa      	ldr	r2, [r7, #28]
 800169a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800169e:	f023 0301 	bic.w	r3, r3, #1
 80016a2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d108      	bne.n	80016c0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016b6:	2100      	movs	r1, #0
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f006 f811 	bl	80076e0 <HAL_PCDEx_LPM_Callback>
 80016be:	e002      	b.n	80016c6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f005 fe47 	bl	8007354 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	695a      	ldr	r2, [r3, #20]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80016d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f003 f99c 	bl	8004a18 <USB_ReadInterrupts>
 80016e0:	4603      	mov	r3, r0
 80016e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016ea:	d112      	bne.n	8001712 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d102      	bne.n	8001702 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f005 fe03 	bl	8007308 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	695a      	ldr	r2, [r3, #20]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001710:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f003 f97e 	bl	8004a18 <USB_ReadInterrupts>
 800171c:	4603      	mov	r3, r0
 800171e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001722:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001726:	d121      	bne.n	800176c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	695a      	ldr	r2, [r3, #20]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8001736:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800173e:	2b00      	cmp	r3, #0
 8001740:	d111      	bne.n	8001766 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001750:	089b      	lsrs	r3, r3, #2
 8001752:	f003 020f 	and.w	r2, r3, #15
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800175c:	2101      	movs	r1, #1
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f005 ffbe 	bl	80076e0 <HAL_PCDEx_LPM_Callback>
 8001764:	e002      	b.n	800176c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f005 fdce 	bl	8007308 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f003 f951 	bl	8004a18 <USB_ReadInterrupts>
 8001776:	4603      	mov	r3, r0
 8001778:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800177c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001780:	f040 80b7 	bne.w	80018f2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	69fa      	ldr	r2, [r7, #28]
 800178e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001792:	f023 0301 	bic.w	r3, r3, #1
 8001796:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2110      	movs	r1, #16
 800179e:	4618      	mov	r0, r3
 80017a0:	f002 fa24 	bl	8003bec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017a8:	e046      	b.n	8001838 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ac:	015a      	lsls	r2, r3, #5
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	4413      	add	r3, r2
 80017b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017b6:	461a      	mov	r2, r3
 80017b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80017bc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017c0:	015a      	lsls	r2, r3, #5
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	4413      	add	r3, r2
 80017c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017ce:	0151      	lsls	r1, r2, #5
 80017d0:	69fa      	ldr	r2, [r7, #28]
 80017d2:	440a      	add	r2, r1
 80017d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80017d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80017dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e0:	015a      	lsls	r2, r3, #5
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	4413      	add	r3, r2
 80017e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017ea:	461a      	mov	r2, r3
 80017ec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80017f0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017f4:	015a      	lsls	r2, r3, #5
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	4413      	add	r3, r2
 80017fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001802:	0151      	lsls	r1, r2, #5
 8001804:	69fa      	ldr	r2, [r7, #28]
 8001806:	440a      	add	r2, r1
 8001808:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800180c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001810:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001814:	015a      	lsls	r2, r3, #5
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	4413      	add	r3, r2
 800181a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001822:	0151      	lsls	r1, r2, #5
 8001824:	69fa      	ldr	r2, [r7, #28]
 8001826:	440a      	add	r2, r1
 8001828:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800182c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001830:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001834:	3301      	adds	r3, #1
 8001836:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	791b      	ldrb	r3, [r3, #4]
 800183c:	461a      	mov	r2, r3
 800183e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001840:	4293      	cmp	r3, r2
 8001842:	d3b2      	bcc.n	80017aa <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001852:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001856:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7bdb      	ldrb	r3, [r3, #15]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d016      	beq.n	800188e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001866:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001870:	f043 030b 	orr.w	r3, r3, #11
 8001874:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800187e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001880:	69fa      	ldr	r2, [r7, #28]
 8001882:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001886:	f043 030b 	orr.w	r3, r3, #11
 800188a:	6453      	str	r3, [r2, #68]	@ 0x44
 800188c:	e015      	b.n	80018ba <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800189c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018a0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80018a4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018b4:	f043 030b 	orr.w	r3, r3, #11
 80018b8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	69fa      	ldr	r2, [r7, #28]
 80018c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018c8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80018cc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018dc:	461a      	mov	r2, r3
 80018de:	f003 f95f 	bl	8004ba0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	695a      	ldr	r2, [r3, #20]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80018f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f003 f88e 	bl	8004a18 <USB_ReadInterrupts>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001902:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001906:	d123      	bne.n	8001950 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f003 f924 	bl	8004b5a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f002 f9e1 	bl	8003cde <USB_GetDevSpeed>
 800191c:	4603      	mov	r3, r0
 800191e:	461a      	mov	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681c      	ldr	r4, [r3, #0]
 8001928:	f000 fe8a 	bl	8002640 <HAL_RCC_GetHCLKFreq>
 800192c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001932:	461a      	mov	r2, r3
 8001934:	4620      	mov	r0, r4
 8001936:	f001 feeb 	bl	8003710 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f005 fcbb 	bl	80072b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	695a      	ldr	r2, [r3, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800194e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f003 f85f 	bl	8004a18 <USB_ReadInterrupts>
 800195a:	4603      	mov	r3, r0
 800195c:	f003 0308 	and.w	r3, r3, #8
 8001960:	2b08      	cmp	r3, #8
 8001962:	d10a      	bne.n	800197a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f005 fc98 	bl	800729a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695a      	ldr	r2, [r3, #20]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f002 0208 	and.w	r2, r2, #8
 8001978:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f003 f84a 	bl	8004a18 <USB_ReadInterrupts>
 8001984:	4603      	mov	r3, r0
 8001986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800198a:	2b80      	cmp	r3, #128	@ 0x80
 800198c:	d123      	bne.n	80019d6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800199a:	2301      	movs	r3, #1
 800199c:	627b      	str	r3, [r7, #36]	@ 0x24
 800199e:	e014      	b.n	80019ca <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019a4:	4613      	mov	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	4413      	add	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d105      	bne.n	80019c4 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	4619      	mov	r1, r3
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 faf0 	bl	8001fa4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c6:	3301      	adds	r3, #1
 80019c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	791b      	ldrb	r3, [r3, #4]
 80019ce:	461a      	mov	r2, r3
 80019d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d3e4      	bcc.n	80019a0 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f003 f81c 	bl	8004a18 <USB_ReadInterrupts>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80019ea:	d13c      	bne.n	8001a66 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019ec:	2301      	movs	r3, #1
 80019ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80019f0:	e02b      	b.n	8001a4a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80019f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f4:	015a      	lsls	r2, r3, #5
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	4413      	add	r3, r2
 80019fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a06:	4613      	mov	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	3318      	adds	r3, #24
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d115      	bne.n	8001a44 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a18:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	da12      	bge.n	8001a44 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a22:	4613      	mov	r3, r2
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	4413      	add	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	3317      	adds	r3, #23
 8001a2e:	2201      	movs	r2, #1
 8001a30:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 fab0 	bl	8001fa4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a46:	3301      	adds	r3, #1
 8001a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	791b      	ldrb	r3, [r3, #4]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d3cd      	bcc.n	80019f2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695a      	ldr	r2, [r3, #20]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001a64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 ffd4 	bl	8004a18 <USB_ReadInterrupts>
 8001a70:	4603      	mov	r3, r0
 8001a72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a7a:	d156      	bne.n	8001b2a <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a80:	e045      	b.n	8001b0e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	015a      	lsls	r2, r3, #5
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	4413      	add	r3, r2
 8001a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a96:	4613      	mov	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d12e      	bne.n	8001b08 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001aaa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	da2b      	bge.n	8001b08 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001abc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d121      	bne.n	8001b08 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac8:	4613      	mov	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10a      	bne.n	8001b08 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	69fa      	ldr	r2, [r7, #28]
 8001afc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b04:	6053      	str	r3, [r2, #4]
            break;
 8001b06:	e008      	b.n	8001b1a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	791b      	ldrb	r3, [r3, #4]
 8001b12:	461a      	mov	r2, r3
 8001b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d3b3      	bcc.n	8001a82 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	695a      	ldr	r2, [r3, #20]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001b28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f002 ff72 	bl	8004a18 <USB_ReadInterrupts>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b3e:	d10a      	bne.n	8001b56 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f005 fc39 	bl	80073b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	695a      	ldr	r2, [r3, #20]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001b54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f002 ff5c 	bl	8004a18 <USB_ReadInterrupts>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d115      	bne.n	8001b96 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f005 fc29 	bl	80073d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6859      	ldr	r1, [r3, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	e000      	b.n	8001b96 <HAL_PCD_IRQHandler+0x996>
      return;
 8001b94:	bf00      	nop
    }
  }
}
 8001b96:	3734      	adds	r7, #52	@ 0x34
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd90      	pop	{r4, r7, pc}

08001b9c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d101      	bne.n	8001bb6 <HAL_PCD_SetAddress+0x1a>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e012      	b.n	8001bdc <HAL_PCD_SetAddress+0x40>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	78fa      	ldrb	r2, [r7, #3]
 8001bc2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	78fa      	ldrb	r2, [r7, #3]
 8001bca:	4611      	mov	r1, r2
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f002 febb 	bl	8004948 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	4608      	mov	r0, r1
 8001bee:	4611      	mov	r1, r2
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	70fb      	strb	r3, [r7, #3]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	803b      	strh	r3, [r7, #0]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	da0f      	bge.n	8001c2a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	f003 020f 	and.w	r2, r3, #15
 8001c10:	4613      	mov	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	4413      	add	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	3310      	adds	r3, #16
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3304      	adds	r3, #4
 8001c20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2201      	movs	r2, #1
 8001c26:	705a      	strb	r2, [r3, #1]
 8001c28:	e00f      	b.n	8001c4a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	f003 020f 	and.w	r2, r3, #15
 8001c30:	4613      	mov	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4413      	add	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	4413      	add	r3, r2
 8001c40:	3304      	adds	r3, #4
 8001c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c56:	883a      	ldrh	r2, [r7, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	78ba      	ldrb	r2, [r7, #2]
 8001c60:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	785b      	ldrb	r3, [r3, #1]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d004      	beq.n	8001c74 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c74:	78bb      	ldrb	r3, [r7, #2]
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d102      	bne.n	8001c80 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d101      	bne.n	8001c8e <HAL_PCD_EP_Open+0xaa>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e00e      	b.n	8001cac <HAL_PCD_EP_Open+0xc8>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68f9      	ldr	r1, [r7, #12]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f002 f843 	bl	8003d28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001caa:	7afb      	ldrb	r3, [r7, #11]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	da0f      	bge.n	8001ce8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	f003 020f 	and.w	r2, r3, #15
 8001cce:	4613      	mov	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	3310      	adds	r3, #16
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	3304      	adds	r3, #4
 8001cde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	705a      	strb	r2, [r3, #1]
 8001ce6:	e00f      	b.n	8001d08 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ce8:	78fb      	ldrb	r3, [r7, #3]
 8001cea:	f003 020f 	and.w	r2, r3, #15
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3304      	adds	r3, #4
 8001d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_PCD_EP_Close+0x6e>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e00e      	b.n	8001d40 <HAL_PCD_EP_Close+0x8c>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68f9      	ldr	r1, [r7, #12]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f002 f881 	bl	8003e38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	460b      	mov	r3, r1
 8001d56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d58:	7afb      	ldrb	r3, [r7, #11]
 8001d5a:	f003 020f 	and.w	r2, r3, #15
 8001d5e:	4613      	mov	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	4413      	add	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	3304      	adds	r3, #4
 8001d70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	2200      	movs	r2, #0
 8001d82:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	2200      	movs	r2, #0
 8001d88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d8a:	7afb      	ldrb	r3, [r7, #11]
 8001d8c:	f003 030f 	and.w	r3, r3, #15
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	799b      	ldrb	r3, [r3, #6]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d102      	bne.n	8001da4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6818      	ldr	r0, [r3, #0]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	799b      	ldrb	r3, [r3, #6]
 8001dac:	461a      	mov	r2, r3
 8001dae:	6979      	ldr	r1, [r7, #20]
 8001db0:	f002 f91e 	bl	8003ff0 <USB_EPStartXfer>

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	60f8      	str	r0, [r7, #12]
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	603b      	str	r3, [r7, #0]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dce:	7afb      	ldrb	r3, [r7, #11]
 8001dd0:	f003 020f 	and.w	r2, r3, #15
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4413      	add	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	3310      	adds	r3, #16
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	4413      	add	r3, r2
 8001de2:	3304      	adds	r3, #4
 8001de4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2200      	movs	r2, #0
 8001df6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dfe:	7afb      	ldrb	r3, [r7, #11]
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	799b      	ldrb	r3, [r3, #6]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d102      	bne.n	8001e18 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6818      	ldr	r0, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	799b      	ldrb	r3, [r3, #6]
 8001e20:	461a      	mov	r2, r3
 8001e22:	6979      	ldr	r1, [r7, #20]
 8001e24:	f002 f8e4 	bl	8003ff0 <USB_EPStartXfer>

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e3e:	78fb      	ldrb	r3, [r7, #3]
 8001e40:	f003 030f 	and.w	r3, r3, #15
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	7912      	ldrb	r2, [r2, #4]
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d901      	bls.n	8001e50 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e04f      	b.n	8001ef0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	da0f      	bge.n	8001e78 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	f003 020f 	and.w	r2, r3, #15
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	4413      	add	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	3310      	adds	r3, #16
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2201      	movs	r2, #1
 8001e74:	705a      	strb	r2, [r3, #1]
 8001e76:	e00d      	b.n	8001e94 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e78:	78fa      	ldrb	r2, [r7, #3]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2201      	movs	r2, #1
 8001e98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_PCD_EP_SetStall+0x82>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e01d      	b.n	8001ef0 <HAL_PCD_EP_SetStall+0xbe>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68f9      	ldr	r1, [r7, #12]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f002 fc6c 	bl	80047a0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d109      	bne.n	8001ee6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	7999      	ldrb	r1, [r3, #6]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	f002 fe5d 	bl	8004ba0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	7912      	ldrb	r2, [r2, #4]
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e042      	b.n	8001f9c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	da0f      	bge.n	8001f3e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f1e:	78fb      	ldrb	r3, [r7, #3]
 8001f20:	f003 020f 	and.w	r2, r3, #15
 8001f24:	4613      	mov	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	3310      	adds	r3, #16
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	3304      	adds	r3, #4
 8001f34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	705a      	strb	r2, [r3, #1]
 8001f3c:	e00f      	b.n	8001f5e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f3e:	78fb      	ldrb	r3, [r7, #3]
 8001f40:	f003 020f 	and.w	r2, r3, #15
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4413      	add	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	4413      	add	r3, r2
 8001f54:	3304      	adds	r3, #4
 8001f56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_PCD_EP_ClrStall+0x86>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e00e      	b.n	8001f9c <HAL_PCD_EP_ClrStall+0xa4>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68f9      	ldr	r1, [r7, #12]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f002 fc75 	bl	800487c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001fb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	da0c      	bge.n	8001fd2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	f003 020f 	and.w	r2, r3, #15
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	4413      	add	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	3310      	adds	r3, #16
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	4413      	add	r3, r2
 8001fcc:	3304      	adds	r3, #4
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	e00c      	b.n	8001fec <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fd2:	78fb      	ldrb	r3, [r7, #3]
 8001fd4:	f003 020f 	and.w	r2, r3, #15
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3304      	adds	r3, #4
 8001fea:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68f9      	ldr	r1, [r7, #12]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f002 fa94 	bl	8004520 <USB_EPStopXfer>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001ffc:	7afb      	ldrb	r3, [r7, #11]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b08a      	sub	sp, #40	@ 0x28
 800200a:	af02      	add	r7, sp, #8
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	4613      	mov	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4413      	add	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	3310      	adds	r3, #16
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	3304      	adds	r3, #4
 800202c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	695a      	ldr	r2, [r3, #20]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	429a      	cmp	r2, r3
 8002038:	d901      	bls.n	800203e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e06b      	b.n	8002116 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	691a      	ldr	r2, [r3, #16]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	69fa      	ldr	r2, [r7, #28]
 8002050:	429a      	cmp	r2, r3
 8002052:	d902      	bls.n	800205a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3303      	adds	r3, #3
 800205e:	089b      	lsrs	r3, r3, #2
 8002060:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002062:	e02a      	b.n	80020ba <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	69fa      	ldr	r2, [r7, #28]
 8002076:	429a      	cmp	r2, r3
 8002078:	d902      	bls.n	8002080 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	3303      	adds	r3, #3
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	68d9      	ldr	r1, [r3, #12]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	b2da      	uxtb	r2, r3
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	4603      	mov	r3, r0
 800209c:	6978      	ldr	r0, [r7, #20]
 800209e:	f002 fae9 	bl	8004674 <USB_WritePacket>

    ep->xfer_buff  += len;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	441a      	add	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	441a      	add	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	015a      	lsls	r2, r3, #5
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d809      	bhi.n	80020e4 <PCD_WriteEmptyTxFifo+0xde>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	695a      	ldr	r2, [r3, #20]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020d8:	429a      	cmp	r2, r3
 80020da:	d203      	bcs.n	80020e4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1bf      	bne.n	8002064 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d811      	bhi.n	8002114 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	2201      	movs	r2, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002104:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	43db      	mvns	r3, r3
 800210a:	6939      	ldr	r1, [r7, #16]
 800210c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002110:	4013      	ands	r3, r2
 8002112:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3720      	adds	r7, #32
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	333c      	adds	r3, #60	@ 0x3c
 8002138:	3304      	adds	r3, #4
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	4413      	add	r3, r2
 8002146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	799b      	ldrb	r3, [r3, #6]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d17b      	bne.n	800224e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d015      	beq.n	800218c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	4a61      	ldr	r2, [pc, #388]	@ (80022e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	f240 80b9 	bls.w	80022dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80b3 	beq.w	80022dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	015a      	lsls	r2, r3, #5
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	4413      	add	r3, r2
 800217e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002182:	461a      	mov	r2, r3
 8002184:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002188:	6093      	str	r3, [r2, #8]
 800218a:	e0a7      	b.n	80022dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	f003 0320 	and.w	r3, r3, #32
 8002192:	2b00      	cmp	r3, #0
 8002194:	d009      	beq.n	80021aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	015a      	lsls	r2, r3, #5
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	4413      	add	r3, r2
 800219e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021a2:	461a      	mov	r2, r3
 80021a4:	2320      	movs	r3, #32
 80021a6:	6093      	str	r3, [r2, #8]
 80021a8:	e098      	b.n	80022dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f040 8093 	bne.w	80022dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	4a4b      	ldr	r2, [pc, #300]	@ (80022e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d90f      	bls.n	80021de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00a      	beq.n	80021de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	015a      	lsls	r2, r3, #5
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	4413      	add	r3, r2
 80021d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021d4:	461a      	mov	r2, r3
 80021d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021da:	6093      	str	r3, [r2, #8]
 80021dc:	e07e      	b.n	80022dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	4613      	mov	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4413      	add	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	4413      	add	r3, r2
 80021f0:	3304      	adds	r3, #4
 80021f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6a1a      	ldr	r2, [r3, #32]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	0159      	lsls	r1, r3, #5
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	440b      	add	r3, r1
 8002200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800220a:	1ad2      	subs	r2, r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d114      	bne.n	8002240 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d109      	bne.n	8002232 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002228:	461a      	mov	r2, r3
 800222a:	2101      	movs	r1, #1
 800222c:	f002 fcb8 	bl	8004ba0 <USB_EP0_OutStart>
 8002230:	e006      	b.n	8002240 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	441a      	add	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	4619      	mov	r1, r3
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f004 fff2 	bl	8007230 <HAL_PCD_DataOutStageCallback>
 800224c:	e046      	b.n	80022dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	4a26      	ldr	r2, [pc, #152]	@ (80022ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d124      	bne.n	80022a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00a      	beq.n	8002276 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	015a      	lsls	r2, r3, #5
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	4413      	add	r3, r2
 8002268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800226c:	461a      	mov	r2, r3
 800226e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002272:	6093      	str	r3, [r2, #8]
 8002274:	e032      	b.n	80022dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	f003 0320 	and.w	r3, r3, #32
 800227c:	2b00      	cmp	r3, #0
 800227e:	d008      	beq.n	8002292 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	4413      	add	r3, r2
 8002288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800228c:	461a      	mov	r2, r3
 800228e:	2320      	movs	r3, #32
 8002290:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	4619      	mov	r1, r3
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f004 ffc9 	bl	8007230 <HAL_PCD_DataOutStageCallback>
 800229e:	e01d      	b.n	80022dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d114      	bne.n	80022d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	4613      	mov	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4413      	add	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d108      	bne.n	80022d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6818      	ldr	r0, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022c8:	461a      	mov	r2, r3
 80022ca:	2100      	movs	r1, #0
 80022cc:	f002 fc68 	bl	8004ba0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	4619      	mov	r1, r3
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f004 ffaa 	bl	8007230 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3720      	adds	r7, #32
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	4f54300a 	.word	0x4f54300a
 80022ec:	4f54310a 	.word	0x4f54310a

080022f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	333c      	adds	r3, #60	@ 0x3c
 8002308:	3304      	adds	r3, #4
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4413      	add	r3, r2
 8002316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	4a15      	ldr	r2, [pc, #84]	@ (8002378 <PCD_EP_OutSetupPacket_int+0x88>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d90e      	bls.n	8002344 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800232c:	2b00      	cmp	r3, #0
 800232e:	d009      	beq.n	8002344 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	015a      	lsls	r2, r3, #5
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4413      	add	r3, r2
 8002338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800233c:	461a      	mov	r2, r3
 800233e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002342:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f004 ff61 	bl	800720c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4a0a      	ldr	r2, [pc, #40]	@ (8002378 <PCD_EP_OutSetupPacket_int+0x88>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d90c      	bls.n	800236c <PCD_EP_OutSetupPacket_int+0x7c>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	799b      	ldrb	r3, [r3, #6]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d108      	bne.n	800236c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002364:	461a      	mov	r2, r3
 8002366:	2101      	movs	r1, #1
 8002368:	f002 fc1a 	bl	8004ba0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	4f54300a 	.word	0x4f54300a

0800237c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	70fb      	strb	r3, [r7, #3]
 8002388:	4613      	mov	r3, r2
 800238a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002392:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d107      	bne.n	80023aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800239a:	883b      	ldrh	r3, [r7, #0]
 800239c:	0419      	lsls	r1, r3, #16
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80023a8:	e028      	b.n	80023fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b0:	0c1b      	lsrs	r3, r3, #16
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	4413      	add	r3, r2
 80023b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023b8:	2300      	movs	r3, #0
 80023ba:	73fb      	strb	r3, [r7, #15]
 80023bc:	e00d      	b.n	80023da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	3340      	adds	r3, #64	@ 0x40
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	0c1b      	lsrs	r3, r3, #16
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	4413      	add	r3, r2
 80023d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	3301      	adds	r3, #1
 80023d8:	73fb      	strb	r3, [r7, #15]
 80023da:	7bfa      	ldrb	r2, [r7, #15]
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	3b01      	subs	r3, #1
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d3ec      	bcc.n	80023be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023e4:	883b      	ldrh	r3, [r7, #0]
 80023e6:	0418      	lsls	r0, r3, #16
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6819      	ldr	r1, [r3, #0]
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	4302      	orrs	r2, r0
 80023f4:	3340      	adds	r3, #64	@ 0x40
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	460b      	mov	r3, r1
 8002414:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	887a      	ldrh	r2, [r7, #2]
 800241c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800245e:	f043 0303 	orr.w	r3, r3, #3
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0cc      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002488:	4b68      	ldr	r3, [pc, #416]	@ (800262c <HAL_RCC_ClockConfig+0x1b8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 030f 	and.w	r3, r3, #15
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d90c      	bls.n	80024b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b65      	ldr	r3, [pc, #404]	@ (800262c <HAL_RCC_ClockConfig+0x1b8>)
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b63      	ldr	r3, [pc, #396]	@ (800262c <HAL_RCC_ClockConfig+0x1b8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0b8      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d020      	beq.n	80024fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c8:	4b59      	ldr	r3, [pc, #356]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4a58      	ldr	r2, [pc, #352]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e0:	4b53      	ldr	r3, [pc, #332]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	4a52      	ldr	r2, [pc, #328]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ec:	4b50      	ldr	r3, [pc, #320]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	494d      	ldr	r1, [pc, #308]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d044      	beq.n	8002594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	4b47      	ldr	r3, [pc, #284]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d119      	bne.n	8002552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e07f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d003      	beq.n	8002532 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800252e:	2b03      	cmp	r3, #3
 8002530:	d107      	bne.n	8002542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002532:	4b3f      	ldr	r3, [pc, #252]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d109      	bne.n	8002552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e06f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002542:	4b3b      	ldr	r3, [pc, #236]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e067      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002552:	4b37      	ldr	r3, [pc, #220]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f023 0203 	bic.w	r2, r3, #3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4934      	ldr	r1, [pc, #208]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002560:	4313      	orrs	r3, r2
 8002562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002564:	f7fe f9fa 	bl	800095c <HAL_GetTick>
 8002568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	e00a      	b.n	8002582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800256c:	f7fe f9f6 	bl	800095c <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800257a:	4293      	cmp	r3, r2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e04f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002582:	4b2b      	ldr	r3, [pc, #172]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 020c 	and.w	r2, r3, #12
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	429a      	cmp	r2, r3
 8002592:	d1eb      	bne.n	800256c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002594:	4b25      	ldr	r3, [pc, #148]	@ (800262c <HAL_RCC_ClockConfig+0x1b8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d20c      	bcs.n	80025bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a2:	4b22      	ldr	r3, [pc, #136]	@ (800262c <HAL_RCC_ClockConfig+0x1b8>)
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b20      	ldr	r3, [pc, #128]	@ (800262c <HAL_RCC_ClockConfig+0x1b8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e032      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c8:	4b19      	ldr	r3, [pc, #100]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4916      	ldr	r1, [pc, #88]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025e6:	4b12      	ldr	r3, [pc, #72]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	490e      	ldr	r1, [pc, #56]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025fa:	f000 fb57 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 80025fe:	4602      	mov	r2, r0
 8002600:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	490a      	ldr	r1, [pc, #40]	@ (8002634 <HAL_RCC_ClockConfig+0x1c0>)
 800260c:	5ccb      	ldrb	r3, [r1, r3]
 800260e:	fa22 f303 	lsr.w	r3, r2, r3
 8002612:	4a09      	ldr	r2, [pc, #36]	@ (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002616:	4b09      	ldr	r3, [pc, #36]	@ (800263c <HAL_RCC_ClockConfig+0x1c8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe f95a 	bl	80008d4 <HAL_InitTick>

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40023c00 	.word	0x40023c00
 8002630:	40023800 	.word	0x40023800
 8002634:	080079f0 	.word	0x080079f0
 8002638:	20000000 	.word	0x20000000
 800263c:	20000004 	.word	0x20000004

08002640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002644:	4b03      	ldr	r3, [pc, #12]	@ (8002654 <HAL_RCC_GetHCLKFreq+0x14>)
 8002646:	681b      	ldr	r3, [r3, #0]
}
 8002648:	4618      	mov	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	20000000 	.word	0x20000000

08002658 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08c      	sub	sp, #48	@ 0x30
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b00      	cmp	r3, #0
 800268e:	d010      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002690:	4b6f      	ldr	r3, [pc, #444]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002692:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002696:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800269e:	496c      	ldr	r1, [pc, #432]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80026ae:	2301      	movs	r3, #1
 80026b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d010      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80026be:	4b64      	ldr	r3, [pc, #400]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026c4:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026cc:	4960      	ldr	r1, [pc, #384]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80026dc:	2301      	movs	r3, #1
 80026de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d017      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026ec:	4b58      	ldr	r3, [pc, #352]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fa:	4955      	ldr	r1, [pc, #340]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800270a:	d101      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800270c:	2301      	movs	r3, #1
 800270e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002718:	2301      	movs	r3, #1
 800271a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d017      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002728:	4b49      	ldr	r3, [pc, #292]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800272a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800272e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002736:	4946      	ldr	r1, [pc, #280]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002742:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002746:	d101      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002748:	2301      	movs	r3, #1
 800274a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002754:	2301      	movs	r3, #1
 8002756:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 808a 	beq.w	800287a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	4b39      	ldr	r3, [pc, #228]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	4a38      	ldr	r2, [pc, #224]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002774:	6413      	str	r3, [r2, #64]	@ 0x40
 8002776:	4b36      	ldr	r3, [pc, #216]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002782:	4b34      	ldr	r3, [pc, #208]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a33      	ldr	r2, [pc, #204]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800278c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800278e:	f7fe f8e5 	bl	800095c <HAL_GetTick>
 8002792:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002796:	f7fe f8e1 	bl	800095c <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e278      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80027a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027b4:	4b26      	ldr	r3, [pc, #152]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027bc:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d02f      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027cc:	6a3a      	ldr	r2, [r7, #32]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d028      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027da:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80027de:	2201      	movs	r2, #1
 80027e0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80027e8:	4a19      	ldr	r2, [pc, #100]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027ee:	4b18      	ldr	r3, [pc, #96]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d114      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80027fa:	f7fe f8af 	bl	800095c <HAL_GetTick>
 80027fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002800:	e00a      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002802:	f7fe f8ab 	bl	800095c <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002810:	4293      	cmp	r3, r2
 8002812:	d901      	bls.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e240      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002818:	4b0d      	ldr	r3, [pc, #52]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0ee      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002828:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800282c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002830:	d114      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002832:	4b07      	ldr	r3, [pc, #28]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002842:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002846:	4902      	ldr	r1, [pc, #8]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002848:	4313      	orrs	r3, r2
 800284a:	608b      	str	r3, [r1, #8]
 800284c:	e00c      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800284e:	bf00      	nop
 8002850:	40023800 	.word	0x40023800
 8002854:	40007000 	.word	0x40007000
 8002858:	42470e40 	.word	0x42470e40
 800285c:	4b4a      	ldr	r3, [pc, #296]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	4a49      	ldr	r2, [pc, #292]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002862:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002866:	6093      	str	r3, [r2, #8]
 8002868:	4b47      	ldr	r3, [pc, #284]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800286a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002874:	4944      	ldr	r1, [pc, #272]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002876:	4313      	orrs	r3, r2
 8002878:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0310 	and.w	r3, r3, #16
 8002882:	2b00      	cmp	r3, #0
 8002884:	d004      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800288c:	4b3f      	ldr	r3, [pc, #252]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800288e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800289c:	4b3a      	ldr	r3, [pc, #232]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800289e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028aa:	4937      	ldr	r1, [pc, #220]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028be:	4b32      	ldr	r3, [pc, #200]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028c4:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028cc:	492e      	ldr	r1, [pc, #184]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d011      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80028e0:	4b29      	ldr	r3, [pc, #164]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028e6:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ee:	4926      	ldr	r1, [pc, #152]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028fe:	d101      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002900:	2301      	movs	r3, #1
 8002902:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00a      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002910:	4b1d      	ldr	r3, [pc, #116]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002912:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002916:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291e:	491a      	ldr	r1, [pc, #104]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800292e:	2b00      	cmp	r3, #0
 8002930:	d011      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002932:	4b15      	ldr	r3, [pc, #84]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002934:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002938:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002940:	4911      	ldr	r1, [pc, #68]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800294c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002950:	d101      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002952:	2301      	movs	r3, #1
 8002954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002958:	2b01      	cmp	r3, #1
 800295a:	d005      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002964:	f040 80ff 	bne.w	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002968:	4b09      	ldr	r3, [pc, #36]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800296e:	f7fd fff5 	bl	800095c <HAL_GetTick>
 8002972:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002974:	e00e      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002976:	f7fd fff1 	bl	800095c <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d907      	bls.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e188      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002988:	40023800 	.word	0x40023800
 800298c:	424711e0 	.word	0x424711e0
 8002990:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002994:	4b7e      	ldr	r3, [pc, #504]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1ea      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d009      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d028      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d124      	bne.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80029c8:	4b71      	ldr	r3, [pc, #452]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029ce:	0c1b      	lsrs	r3, r3, #16
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	3301      	adds	r3, #1
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029da:	4b6d      	ldr	r3, [pc, #436]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029e0:	0e1b      	lsrs	r3, r3, #24
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	019b      	lsls	r3, r3, #6
 80029f2:	431a      	orrs	r2, r3
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	085b      	lsrs	r3, r3, #1
 80029f8:	3b01      	subs	r3, #1
 80029fa:	041b      	lsls	r3, r3, #16
 80029fc:	431a      	orrs	r2, r3
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	061b      	lsls	r3, r3, #24
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	071b      	lsls	r3, r3, #28
 8002a0a:	4961      	ldr	r1, [pc, #388]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d004      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a26:	d00a      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d035      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a3c:	d130      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a3e:	4b54      	ldr	r3, [pc, #336]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a44:	0c1b      	lsrs	r3, r3, #16
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a50:	4b4f      	ldr	r3, [pc, #316]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a56:	0f1b      	lsrs	r3, r3, #28
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	019b      	lsls	r3, r3, #6
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	085b      	lsrs	r3, r3, #1
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	041b      	lsls	r3, r3, #16
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	061b      	lsls	r3, r3, #24
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	071b      	lsls	r3, r3, #28
 8002a80:	4943      	ldr	r1, [pc, #268]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a88:	4b41      	ldr	r3, [pc, #260]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a8e:	f023 021f 	bic.w	r2, r3, #31
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a96:	3b01      	subs	r3, #1
 8002a98:	493d      	ldr	r1, [pc, #244]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d029      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ab0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ab4:	d124      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002ab6:	4b36      	ldr	r3, [pc, #216]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002abc:	0c1b      	lsrs	r3, r3, #16
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ac8:	4b31      	ldr	r3, [pc, #196]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ace:	0f1b      	lsrs	r3, r3, #28
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	019b      	lsls	r3, r3, #6
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	085b      	lsrs	r3, r3, #1
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	041b      	lsls	r3, r3, #16
 8002aec:	431a      	orrs	r2, r3
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	061b      	lsls	r3, r3, #24
 8002af2:	431a      	orrs	r2, r3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	071b      	lsls	r3, r3, #28
 8002af8:	4925      	ldr	r1, [pc, #148]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d016      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	019b      	lsls	r3, r3, #6
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	085b      	lsrs	r3, r3, #1
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	041b      	lsls	r3, r3, #16
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	061b      	lsls	r3, r3, #24
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	071b      	lsls	r3, r3, #28
 8002b32:	4917      	ldr	r1, [pc, #92]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b3a:	4b16      	ldr	r3, [pc, #88]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b40:	f7fd ff0c 	bl	800095c <HAL_GetTick>
 8002b44:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b48:	f7fd ff08 	bl	800095c <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e09f      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	f040 8095 	bne.w	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b74:	f7fd fef2 	bl	800095c <HAL_GetTick>
 8002b78:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b7a:	e00f      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002b7c:	f7fd feee 	bl	800095c <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d908      	bls.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e085      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002b8e:	bf00      	nop
 8002b90:	40023800 	.word	0x40023800
 8002b94:	42470068 	.word	0x42470068
 8002b98:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b9c:	4b41      	ldr	r3, [pc, #260]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ba4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ba8:	d0e8      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d009      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d02b      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d127      	bne.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002bd2:	4b34      	ldr	r3, [pc, #208]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd8:	0c1b      	lsrs	r3, r3, #16
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	3301      	adds	r3, #1
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699a      	ldr	r2, [r3, #24]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	019b      	lsls	r3, r3, #6
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	085b      	lsrs	r3, r3, #1
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	041b      	lsls	r3, r3, #16
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfe:	061b      	lsls	r3, r3, #24
 8002c00:	4928      	ldr	r1, [pc, #160]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c08:	4b26      	ldr	r3, [pc, #152]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c0e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c16:	3b01      	subs	r3, #1
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	4922      	ldr	r1, [pc, #136]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d01d      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c36:	d118      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c38:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3e:	0e1b      	lsrs	r3, r3, #24
 8002c40:	f003 030f 	and.w	r3, r3, #15
 8002c44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699a      	ldr	r2, [r3, #24]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	019b      	lsls	r3, r3, #6
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	085b      	lsrs	r3, r3, #1
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	041b      	lsls	r3, r3, #16
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	061b      	lsls	r3, r3, #24
 8002c62:	4910      	ldr	r1, [pc, #64]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c70:	f7fd fe74 	bl	800095c <HAL_GetTick>
 8002c74:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002c78:	f7fd fe70 	bl	800095c <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e007      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c96:	d1ef      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3730      	adds	r7, #48	@ 0x30
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	42470070 	.word	0x42470070

08002cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb0:	b0ae      	sub	sp, #184	@ 0xb8
 8002cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cd2:	4bcb      	ldr	r3, [pc, #812]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b0c      	cmp	r3, #12
 8002cdc:	f200 8206 	bhi.w	80030ec <HAL_RCC_GetSysClockFreq+0x440>
 8002ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce6:	bf00      	nop
 8002ce8:	08002d1d 	.word	0x08002d1d
 8002cec:	080030ed 	.word	0x080030ed
 8002cf0:	080030ed 	.word	0x080030ed
 8002cf4:	080030ed 	.word	0x080030ed
 8002cf8:	08002d25 	.word	0x08002d25
 8002cfc:	080030ed 	.word	0x080030ed
 8002d00:	080030ed 	.word	0x080030ed
 8002d04:	080030ed 	.word	0x080030ed
 8002d08:	08002d2d 	.word	0x08002d2d
 8002d0c:	080030ed 	.word	0x080030ed
 8002d10:	080030ed 	.word	0x080030ed
 8002d14:	080030ed 	.word	0x080030ed
 8002d18:	08002f1d 	.word	0x08002f1d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d1c:	4bb9      	ldr	r3, [pc, #740]	@ (8003004 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002d22:	e1e7      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d24:	4bb8      	ldr	r3, [pc, #736]	@ (8003008 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d2a:	e1e3      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d2c:	4bb4      	ldr	r3, [pc, #720]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d38:	4bb1      	ldr	r3, [pc, #708]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d071      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d44:	4bae      	ldr	r3, [pc, #696]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	099b      	lsrs	r3, r3, #6
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d50:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002d54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d60:	2300      	movs	r3, #0
 8002d62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002d66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d6a:	4622      	mov	r2, r4
 8002d6c:	462b      	mov	r3, r5
 8002d6e:	f04f 0000 	mov.w	r0, #0
 8002d72:	f04f 0100 	mov.w	r1, #0
 8002d76:	0159      	lsls	r1, r3, #5
 8002d78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d7c:	0150      	lsls	r0, r2, #5
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4621      	mov	r1, r4
 8002d84:	1a51      	subs	r1, r2, r1
 8002d86:	6439      	str	r1, [r7, #64]	@ 0x40
 8002d88:	4629      	mov	r1, r5
 8002d8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002d9c:	4649      	mov	r1, r9
 8002d9e:	018b      	lsls	r3, r1, #6
 8002da0:	4641      	mov	r1, r8
 8002da2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002da6:	4641      	mov	r1, r8
 8002da8:	018a      	lsls	r2, r1, #6
 8002daa:	4641      	mov	r1, r8
 8002dac:	1a51      	subs	r1, r2, r1
 8002dae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002db0:	4649      	mov	r1, r9
 8002db2:	eb63 0301 	sbc.w	r3, r3, r1
 8002db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002dc4:	4649      	mov	r1, r9
 8002dc6:	00cb      	lsls	r3, r1, #3
 8002dc8:	4641      	mov	r1, r8
 8002dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dce:	4641      	mov	r1, r8
 8002dd0:	00ca      	lsls	r2, r1, #3
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	4622      	mov	r2, r4
 8002dda:	189b      	adds	r3, r3, r2
 8002ddc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dde:	462b      	mov	r3, r5
 8002de0:	460a      	mov	r2, r1
 8002de2:	eb42 0303 	adc.w	r3, r2, r3
 8002de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	f04f 0300 	mov.w	r3, #0
 8002df0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002df4:	4629      	mov	r1, r5
 8002df6:	024b      	lsls	r3, r1, #9
 8002df8:	4621      	mov	r1, r4
 8002dfa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dfe:	4621      	mov	r1, r4
 8002e00:	024a      	lsls	r2, r1, #9
 8002e02:	4610      	mov	r0, r2
 8002e04:	4619      	mov	r1, r3
 8002e06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e14:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002e18:	f7fd f9f4 	bl	8000204 <__aeabi_uldivmod>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4613      	mov	r3, r2
 8002e22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e26:	e067      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e28:	4b75      	ldr	r3, [pc, #468]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	099b      	lsrs	r3, r3, #6
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e34:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002e38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e42:	2300      	movs	r3, #0
 8002e44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002e46:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002e4a:	4622      	mov	r2, r4
 8002e4c:	462b      	mov	r3, r5
 8002e4e:	f04f 0000 	mov.w	r0, #0
 8002e52:	f04f 0100 	mov.w	r1, #0
 8002e56:	0159      	lsls	r1, r3, #5
 8002e58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e5c:	0150      	lsls	r0, r2, #5
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4621      	mov	r1, r4
 8002e64:	1a51      	subs	r1, r2, r1
 8002e66:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002e68:	4629      	mov	r1, r5
 8002e6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002e7c:	4649      	mov	r1, r9
 8002e7e:	018b      	lsls	r3, r1, #6
 8002e80:	4641      	mov	r1, r8
 8002e82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e86:	4641      	mov	r1, r8
 8002e88:	018a      	lsls	r2, r1, #6
 8002e8a:	4641      	mov	r1, r8
 8002e8c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e90:	4649      	mov	r1, r9
 8002e92:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ea2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ea6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002eaa:	4692      	mov	sl, r2
 8002eac:	469b      	mov	fp, r3
 8002eae:	4623      	mov	r3, r4
 8002eb0:	eb1a 0303 	adds.w	r3, sl, r3
 8002eb4:	623b      	str	r3, [r7, #32]
 8002eb6:	462b      	mov	r3, r5
 8002eb8:	eb4b 0303 	adc.w	r3, fp, r3
 8002ebc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002eca:	4629      	mov	r1, r5
 8002ecc:	028b      	lsls	r3, r1, #10
 8002ece:	4621      	mov	r1, r4
 8002ed0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ed4:	4621      	mov	r1, r4
 8002ed6:	028a      	lsls	r2, r1, #10
 8002ed8:	4610      	mov	r0, r2
 8002eda:	4619      	mov	r1, r3
 8002edc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ee4:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ee6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002eea:	f7fd f98b 	bl	8000204 <__aeabi_uldivmod>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ef8:	4b41      	ldr	r3, [pc, #260]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x354>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	0c1b      	lsrs	r3, r3, #16
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	3301      	adds	r3, #1
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002f0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f1a:	e0eb      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f1c:	4b38      	ldr	r3, [pc, #224]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f28:	4b35      	ldr	r3, [pc, #212]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d06b      	beq.n	800300c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f34:	4b32      	ldr	r3, [pc, #200]	@ (8003000 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	099b      	lsrs	r3, r3, #6
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f46:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f48:	2300      	movs	r3, #0
 8002f4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f4c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002f50:	4622      	mov	r2, r4
 8002f52:	462b      	mov	r3, r5
 8002f54:	f04f 0000 	mov.w	r0, #0
 8002f58:	f04f 0100 	mov.w	r1, #0
 8002f5c:	0159      	lsls	r1, r3, #5
 8002f5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f62:	0150      	lsls	r0, r2, #5
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4621      	mov	r1, r4
 8002f6a:	1a51      	subs	r1, r2, r1
 8002f6c:	61b9      	str	r1, [r7, #24]
 8002f6e:	4629      	mov	r1, r5
 8002f70:	eb63 0301 	sbc.w	r3, r3, r1
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002f82:	4659      	mov	r1, fp
 8002f84:	018b      	lsls	r3, r1, #6
 8002f86:	4651      	mov	r1, sl
 8002f88:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f8c:	4651      	mov	r1, sl
 8002f8e:	018a      	lsls	r2, r1, #6
 8002f90:	4651      	mov	r1, sl
 8002f92:	ebb2 0801 	subs.w	r8, r2, r1
 8002f96:	4659      	mov	r1, fp
 8002f98:	eb63 0901 	sbc.w	r9, r3, r1
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fa8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fb0:	4690      	mov	r8, r2
 8002fb2:	4699      	mov	r9, r3
 8002fb4:	4623      	mov	r3, r4
 8002fb6:	eb18 0303 	adds.w	r3, r8, r3
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	462b      	mov	r3, r5
 8002fbe:	eb49 0303 	adc.w	r3, r9, r3
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002fd0:	4629      	mov	r1, r5
 8002fd2:	024b      	lsls	r3, r1, #9
 8002fd4:	4621      	mov	r1, r4
 8002fd6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fda:	4621      	mov	r1, r4
 8002fdc:	024a      	lsls	r2, r1, #9
 8002fde:	4610      	mov	r0, r2
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002fea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002fec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ff0:	f7fd f908 	bl	8000204 <__aeabi_uldivmod>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ffe:	e065      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0x420>
 8003000:	40023800 	.word	0x40023800
 8003004:	00f42400 	.word	0x00f42400
 8003008:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800300c:	4b3d      	ldr	r3, [pc, #244]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x458>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	099b      	lsrs	r3, r3, #6
 8003012:	2200      	movs	r2, #0
 8003014:	4618      	mov	r0, r3
 8003016:	4611      	mov	r1, r2
 8003018:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800301c:	653b      	str	r3, [r7, #80]	@ 0x50
 800301e:	2300      	movs	r3, #0
 8003020:	657b      	str	r3, [r7, #84]	@ 0x54
 8003022:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003026:	4642      	mov	r2, r8
 8003028:	464b      	mov	r3, r9
 800302a:	f04f 0000 	mov.w	r0, #0
 800302e:	f04f 0100 	mov.w	r1, #0
 8003032:	0159      	lsls	r1, r3, #5
 8003034:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003038:	0150      	lsls	r0, r2, #5
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	4641      	mov	r1, r8
 8003040:	1a51      	subs	r1, r2, r1
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	4649      	mov	r1, r9
 8003046:	eb63 0301 	sbc.w	r3, r3, r1
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003058:	4659      	mov	r1, fp
 800305a:	018b      	lsls	r3, r1, #6
 800305c:	4651      	mov	r1, sl
 800305e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003062:	4651      	mov	r1, sl
 8003064:	018a      	lsls	r2, r1, #6
 8003066:	4651      	mov	r1, sl
 8003068:	1a54      	subs	r4, r2, r1
 800306a:	4659      	mov	r1, fp
 800306c:	eb63 0501 	sbc.w	r5, r3, r1
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	00eb      	lsls	r3, r5, #3
 800307a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800307e:	00e2      	lsls	r2, r4, #3
 8003080:	4614      	mov	r4, r2
 8003082:	461d      	mov	r5, r3
 8003084:	4643      	mov	r3, r8
 8003086:	18e3      	adds	r3, r4, r3
 8003088:	603b      	str	r3, [r7, #0]
 800308a:	464b      	mov	r3, r9
 800308c:	eb45 0303 	adc.w	r3, r5, r3
 8003090:	607b      	str	r3, [r7, #4]
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800309e:	4629      	mov	r1, r5
 80030a0:	028b      	lsls	r3, r1, #10
 80030a2:	4621      	mov	r1, r4
 80030a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030a8:	4621      	mov	r1, r4
 80030aa:	028a      	lsls	r2, r1, #10
 80030ac:	4610      	mov	r0, r2
 80030ae:	4619      	mov	r1, r3
 80030b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030b4:	2200      	movs	r2, #0
 80030b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030b8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80030ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80030be:	f7fd f8a1 	bl	8000204 <__aeabi_uldivmod>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4613      	mov	r3, r2
 80030c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80030cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x458>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	0f1b      	lsrs	r3, r3, #28
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80030da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80030de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80030ea:	e003      	b.n	80030f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030ec:	4b06      	ldr	r3, [pc, #24]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x45c>)
 80030ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80030f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	37b8      	adds	r7, #184	@ 0xb8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003102:	bf00      	nop
 8003104:	40023800 	.word	0x40023800
 8003108:	00f42400 	.word	0x00f42400

0800310c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e28d      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 8083 	beq.w	8003232 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800312c:	4b94      	ldr	r3, [pc, #592]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 030c 	and.w	r3, r3, #12
 8003134:	2b04      	cmp	r3, #4
 8003136:	d019      	beq.n	800316c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003138:	4b91      	ldr	r3, [pc, #580]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003140:	2b08      	cmp	r3, #8
 8003142:	d106      	bne.n	8003152 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003144:	4b8e      	ldr	r3, [pc, #568]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800314c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003150:	d00c      	beq.n	800316c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003152:	4b8b      	ldr	r3, [pc, #556]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800315a:	2b0c      	cmp	r3, #12
 800315c:	d112      	bne.n	8003184 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800315e:	4b88      	ldr	r3, [pc, #544]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003166:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800316a:	d10b      	bne.n	8003184 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800316c:	4b84      	ldr	r3, [pc, #528]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d05b      	beq.n	8003230 <HAL_RCC_OscConfig+0x124>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d157      	bne.n	8003230 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e25a      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800318c:	d106      	bne.n	800319c <HAL_RCC_OscConfig+0x90>
 800318e:	4b7c      	ldr	r3, [pc, #496]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a7b      	ldr	r2, [pc, #492]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 8003194:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	e01d      	b.n	80031d8 <HAL_RCC_OscConfig+0xcc>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCC_OscConfig+0xb4>
 80031a6:	4b76      	ldr	r3, [pc, #472]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a75      	ldr	r2, [pc, #468]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 80031ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	4b73      	ldr	r3, [pc, #460]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a72      	ldr	r2, [pc, #456]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 80031b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	e00b      	b.n	80031d8 <HAL_RCC_OscConfig+0xcc>
 80031c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a6e      	ldr	r2, [pc, #440]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 80031c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	4b6c      	ldr	r3, [pc, #432]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a6b      	ldr	r2, [pc, #428]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 80031d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d013      	beq.n	8003208 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fd fbbc 	bl	800095c <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031e8:	f7fd fbb8 	bl	800095c <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b64      	cmp	r3, #100	@ 0x64
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e21f      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fa:	4b61      	ldr	r3, [pc, #388]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0xdc>
 8003206:	e014      	b.n	8003232 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fd fba8 	bl	800095c <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003210:	f7fd fba4 	bl	800095c <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	@ 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e20b      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003222:	4b57      	ldr	r3, [pc, #348]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x104>
 800322e:	e000      	b.n	8003232 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d06f      	beq.n	800331e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800323e:	4b50      	ldr	r3, [pc, #320]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 030c 	and.w	r3, r3, #12
 8003246:	2b00      	cmp	r3, #0
 8003248:	d017      	beq.n	800327a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800324a:	4b4d      	ldr	r3, [pc, #308]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003252:	2b08      	cmp	r3, #8
 8003254:	d105      	bne.n	8003262 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003256:	4b4a      	ldr	r3, [pc, #296]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00b      	beq.n	800327a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003262:	4b47      	ldr	r3, [pc, #284]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800326a:	2b0c      	cmp	r3, #12
 800326c:	d11c      	bne.n	80032a8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800326e:	4b44      	ldr	r3, [pc, #272]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d116      	bne.n	80032a8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327a:	4b41      	ldr	r3, [pc, #260]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <HAL_RCC_OscConfig+0x186>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d001      	beq.n	8003292 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e1d3      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003292:	4b3b      	ldr	r3, [pc, #236]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4937      	ldr	r1, [pc, #220]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032a6:	e03a      	b.n	800331e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d020      	beq.n	80032f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b0:	4b34      	ldr	r3, [pc, #208]	@ (8003384 <HAL_RCC_OscConfig+0x278>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b6:	f7fd fb51 	bl	800095c <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032be:	f7fd fb4d 	bl	800095c <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e1b4      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032dc:	4b28      	ldr	r3, [pc, #160]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4925      	ldr	r1, [pc, #148]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	600b      	str	r3, [r1, #0]
 80032f0:	e015      	b.n	800331e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f2:	4b24      	ldr	r3, [pc, #144]	@ (8003384 <HAL_RCC_OscConfig+0x278>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f8:	f7fd fb30 	bl	800095c <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003300:	f7fd fb2c 	bl	800095c <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e193      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003312:	4b1b      	ldr	r3, [pc, #108]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d036      	beq.n	8003398 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d016      	beq.n	8003360 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003332:	4b15      	ldr	r3, [pc, #84]	@ (8003388 <HAL_RCC_OscConfig+0x27c>)
 8003334:	2201      	movs	r2, #1
 8003336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003338:	f7fd fb10 	bl	800095c <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003340:	f7fd fb0c 	bl	800095c <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e173      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003352:	4b0b      	ldr	r3, [pc, #44]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 8003354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0x234>
 800335e:	e01b      	b.n	8003398 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003360:	4b09      	ldr	r3, [pc, #36]	@ (8003388 <HAL_RCC_OscConfig+0x27c>)
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003366:	f7fd faf9 	bl	800095c <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800336c:	e00e      	b.n	800338c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800336e:	f7fd faf5 	bl	800095c <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d907      	bls.n	800338c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e15c      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
 8003380:	40023800 	.word	0x40023800
 8003384:	42470000 	.word	0x42470000
 8003388:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800338c:	4b8a      	ldr	r3, [pc, #552]	@ (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 800338e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1ea      	bne.n	800336e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 8097 	beq.w	80034d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a6:	2300      	movs	r3, #0
 80033a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033aa:	4b83      	ldr	r3, [pc, #524]	@ (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10f      	bne.n	80033d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b6:	2300      	movs	r3, #0
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	4b7f      	ldr	r3, [pc, #508]	@ (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	4a7e      	ldr	r2, [pc, #504]	@ (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 80033c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033c6:	4b7c      	ldr	r3, [pc, #496]	@ (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ce:	60bb      	str	r3, [r7, #8]
 80033d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d2:	2301      	movs	r3, #1
 80033d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d6:	4b79      	ldr	r3, [pc, #484]	@ (80035bc <HAL_RCC_OscConfig+0x4b0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d118      	bne.n	8003414 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033e2:	4b76      	ldr	r3, [pc, #472]	@ (80035bc <HAL_RCC_OscConfig+0x4b0>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a75      	ldr	r2, [pc, #468]	@ (80035bc <HAL_RCC_OscConfig+0x4b0>)
 80033e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ee:	f7fd fab5 	bl	800095c <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f6:	f7fd fab1 	bl	800095c <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e118      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003408:	4b6c      	ldr	r3, [pc, #432]	@ (80035bc <HAL_RCC_OscConfig+0x4b0>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0f0      	beq.n	80033f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d106      	bne.n	800342a <HAL_RCC_OscConfig+0x31e>
 800341c:	4b66      	ldr	r3, [pc, #408]	@ (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 800341e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003420:	4a65      	ldr	r2, [pc, #404]	@ (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	6713      	str	r3, [r2, #112]	@ 0x70
 8003428:	e01c      	b.n	8003464 <HAL_RCC_OscConfig+0x358>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b05      	cmp	r3, #5
 8003430:	d10c      	bne.n	800344c <HAL_RCC_OscConfig+0x340>
 8003432:	4b61      	ldr	r3, [pc, #388]	@ (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003436:	4a60      	ldr	r2, [pc, #384]	@ (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 8003438:	f043 0304 	orr.w	r3, r3, #4
 800343c:	6713      	str	r3, [r2, #112]	@ 0x70
 800343e:	4b5e      	ldr	r3, [pc, #376]	@ (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 8003440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003442:	4a5d      	ldr	r2, [pc, #372]	@ (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 8003444:	f043 0301 	orr.w	r3, r3, #1
 8003448:	6713      	str	r3, [r2, #112]	@ 0x70
 800344a:	e00b      	b.n	8003464 <HAL_RCC_OscConfig+0x358>
 800344c:	4b5a      	ldr	r3, [pc, #360]	@ (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 800344e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003450:	4a59      	ldr	r2, [pc, #356]	@ (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 8003452:	f023 0301 	bic.w	r3, r3, #1
 8003456:	6713      	str	r3, [r2, #112]	@ 0x70
 8003458:	4b57      	ldr	r3, [pc, #348]	@ (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 800345a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800345c:	4a56      	ldr	r2, [pc, #344]	@ (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 800345e:	f023 0304 	bic.w	r3, r3, #4
 8003462:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d015      	beq.n	8003498 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346c:	f7fd fa76 	bl	800095c <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003472:	e00a      	b.n	800348a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003474:	f7fd fa72 	bl	800095c <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003482:	4293      	cmp	r3, r2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e0d7      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348a:	4b4b      	ldr	r3, [pc, #300]	@ (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0ee      	beq.n	8003474 <HAL_RCC_OscConfig+0x368>
 8003496:	e014      	b.n	80034c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003498:	f7fd fa60 	bl	800095c <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800349e:	e00a      	b.n	80034b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a0:	f7fd fa5c 	bl	800095c <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e0c1      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b6:	4b40      	ldr	r3, [pc, #256]	@ (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 80034b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1ee      	bne.n	80034a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034c2:	7dfb      	ldrb	r3, [r7, #23]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d105      	bne.n	80034d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c8:	4b3b      	ldr	r3, [pc, #236]	@ (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 80034ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034cc:	4a3a      	ldr	r2, [pc, #232]	@ (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 80034ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 80ad 	beq.w	8003638 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034de:	4b36      	ldr	r3, [pc, #216]	@ (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d060      	beq.n	80035ac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d145      	bne.n	800357e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f2:	4b33      	ldr	r3, [pc, #204]	@ (80035c0 <HAL_RCC_OscConfig+0x4b4>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f8:	f7fd fa30 	bl	800095c <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003500:	f7fd fa2c 	bl	800095c <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e093      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003512:	4b29      	ldr	r3, [pc, #164]	@ (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69da      	ldr	r2, [r3, #28]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352c:	019b      	lsls	r3, r3, #6
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003534:	085b      	lsrs	r3, r3, #1
 8003536:	3b01      	subs	r3, #1
 8003538:	041b      	lsls	r3, r3, #16
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003540:	061b      	lsls	r3, r3, #24
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003548:	071b      	lsls	r3, r3, #28
 800354a:	491b      	ldr	r1, [pc, #108]	@ (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 800354c:	4313      	orrs	r3, r2
 800354e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003550:	4b1b      	ldr	r3, [pc, #108]	@ (80035c0 <HAL_RCC_OscConfig+0x4b4>)
 8003552:	2201      	movs	r2, #1
 8003554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003556:	f7fd fa01 	bl	800095c <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800355e:	f7fd f9fd 	bl	800095c <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e064      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003570:	4b11      	ldr	r3, [pc, #68]	@ (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0f0      	beq.n	800355e <HAL_RCC_OscConfig+0x452>
 800357c:	e05c      	b.n	8003638 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357e:	4b10      	ldr	r3, [pc, #64]	@ (80035c0 <HAL_RCC_OscConfig+0x4b4>)
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003584:	f7fd f9ea 	bl	800095c <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800358c:	f7fd f9e6 	bl	800095c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e04d      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359e:	4b06      	ldr	r3, [pc, #24]	@ (80035b8 <HAL_RCC_OscConfig+0x4ac>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0x480>
 80035aa:	e045      	b.n	8003638 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d107      	bne.n	80035c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e040      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40007000 	.word	0x40007000
 80035c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003644 <HAL_RCC_OscConfig+0x538>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d030      	beq.n	8003634 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035dc:	429a      	cmp	r2, r3
 80035de:	d129      	bne.n	8003634 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d122      	bne.n	8003634 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035f4:	4013      	ands	r3, r2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d119      	bne.n	8003634 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360a:	085b      	lsrs	r3, r3, #1
 800360c:	3b01      	subs	r3, #1
 800360e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003610:	429a      	cmp	r2, r3
 8003612:	d10f      	bne.n	8003634 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003620:	429a      	cmp	r2, r3
 8003622:	d107      	bne.n	8003634 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003630:	429a      	cmp	r2, r3
 8003632:	d001      	beq.n	8003638 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e000      	b.n	800363a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40023800 	.word	0x40023800

08003648 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003648:	b084      	sub	sp, #16
 800364a:	b580      	push	{r7, lr}
 800364c:	b084      	sub	sp, #16
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	f107 001c 	add.w	r0, r7, #28
 8003656:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800365a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800365e:	2b01      	cmp	r3, #1
 8003660:	d123      	bne.n	80036aa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003666:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003676:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800368a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800368e:	2b01      	cmp	r3, #1
 8003690:	d105      	bne.n	800369e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f001 fadc 	bl	8004c5c <USB_CoreReset>
 80036a4:	4603      	mov	r3, r0
 80036a6:	73fb      	strb	r3, [r7, #15]
 80036a8:	e01b      	b.n	80036e2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f001 fad0 	bl	8004c5c <USB_CoreReset>
 80036bc:	4603      	mov	r3, r0
 80036be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80036c0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d106      	bne.n	80036d6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	639a      	str	r2, [r3, #56]	@ 0x38
 80036d4:	e005      	b.n	80036e2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80036e2:	7fbb      	ldrb	r3, [r7, #30]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d10b      	bne.n	8003700 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f043 0206 	orr.w	r2, r3, #6
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f043 0220 	orr.w	r2, r3, #32
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003700:	7bfb      	ldrb	r3, [r7, #15]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800370c:	b004      	add	sp, #16
 800370e:	4770      	bx	lr

08003710 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	4613      	mov	r3, r2
 800371c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	2b02      	cmp	r3, #2
 8003722:	d165      	bne.n	80037f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	4a41      	ldr	r2, [pc, #260]	@ (800382c <USB_SetTurnaroundTime+0x11c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d906      	bls.n	800373a <USB_SetTurnaroundTime+0x2a>
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4a40      	ldr	r2, [pc, #256]	@ (8003830 <USB_SetTurnaroundTime+0x120>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d202      	bcs.n	800373a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003734:	230f      	movs	r3, #15
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	e062      	b.n	8003800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	4a3c      	ldr	r2, [pc, #240]	@ (8003830 <USB_SetTurnaroundTime+0x120>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d306      	bcc.n	8003750 <USB_SetTurnaroundTime+0x40>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	4a3b      	ldr	r2, [pc, #236]	@ (8003834 <USB_SetTurnaroundTime+0x124>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d202      	bcs.n	8003750 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800374a:	230e      	movs	r3, #14
 800374c:	617b      	str	r3, [r7, #20]
 800374e:	e057      	b.n	8003800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4a38      	ldr	r2, [pc, #224]	@ (8003834 <USB_SetTurnaroundTime+0x124>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d306      	bcc.n	8003766 <USB_SetTurnaroundTime+0x56>
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	4a37      	ldr	r2, [pc, #220]	@ (8003838 <USB_SetTurnaroundTime+0x128>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d202      	bcs.n	8003766 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003760:	230d      	movs	r3, #13
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	e04c      	b.n	8003800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	4a33      	ldr	r2, [pc, #204]	@ (8003838 <USB_SetTurnaroundTime+0x128>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d306      	bcc.n	800377c <USB_SetTurnaroundTime+0x6c>
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	4a32      	ldr	r2, [pc, #200]	@ (800383c <USB_SetTurnaroundTime+0x12c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d802      	bhi.n	800377c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003776:	230c      	movs	r3, #12
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	e041      	b.n	8003800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4a2f      	ldr	r2, [pc, #188]	@ (800383c <USB_SetTurnaroundTime+0x12c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d906      	bls.n	8003792 <USB_SetTurnaroundTime+0x82>
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	4a2e      	ldr	r2, [pc, #184]	@ (8003840 <USB_SetTurnaroundTime+0x130>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d802      	bhi.n	8003792 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800378c:	230b      	movs	r3, #11
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	e036      	b.n	8003800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	4a2a      	ldr	r2, [pc, #168]	@ (8003840 <USB_SetTurnaroundTime+0x130>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d906      	bls.n	80037a8 <USB_SetTurnaroundTime+0x98>
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	4a29      	ldr	r2, [pc, #164]	@ (8003844 <USB_SetTurnaroundTime+0x134>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d802      	bhi.n	80037a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80037a2:	230a      	movs	r3, #10
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	e02b      	b.n	8003800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	4a26      	ldr	r2, [pc, #152]	@ (8003844 <USB_SetTurnaroundTime+0x134>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d906      	bls.n	80037be <USB_SetTurnaroundTime+0xae>
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4a25      	ldr	r2, [pc, #148]	@ (8003848 <USB_SetTurnaroundTime+0x138>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d202      	bcs.n	80037be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80037b8:	2309      	movs	r3, #9
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	e020      	b.n	8003800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	4a21      	ldr	r2, [pc, #132]	@ (8003848 <USB_SetTurnaroundTime+0x138>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d306      	bcc.n	80037d4 <USB_SetTurnaroundTime+0xc4>
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	4a20      	ldr	r2, [pc, #128]	@ (800384c <USB_SetTurnaroundTime+0x13c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d802      	bhi.n	80037d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80037ce:	2308      	movs	r3, #8
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	e015      	b.n	8003800 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	4a1d      	ldr	r2, [pc, #116]	@ (800384c <USB_SetTurnaroundTime+0x13c>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d906      	bls.n	80037ea <USB_SetTurnaroundTime+0xda>
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4a1c      	ldr	r2, [pc, #112]	@ (8003850 <USB_SetTurnaroundTime+0x140>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d202      	bcs.n	80037ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80037e4:	2307      	movs	r3, #7
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	e00a      	b.n	8003800 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80037ea:	2306      	movs	r3, #6
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	e007      	b.n	8003800 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80037f0:	79fb      	ldrb	r3, [r7, #7]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d102      	bne.n	80037fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80037f6:	2309      	movs	r3, #9
 80037f8:	617b      	str	r3, [r7, #20]
 80037fa:	e001      	b.n	8003800 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80037fc:	2309      	movs	r3, #9
 80037fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	029b      	lsls	r3, r3, #10
 8003814:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003818:	431a      	orrs	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	371c      	adds	r7, #28
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	00d8acbf 	.word	0x00d8acbf
 8003830:	00e4e1c0 	.word	0x00e4e1c0
 8003834:	00f42400 	.word	0x00f42400
 8003838:	01067380 	.word	0x01067380
 800383c:	011a499f 	.word	0x011a499f
 8003840:	01312cff 	.word	0x01312cff
 8003844:	014ca43f 	.word	0x014ca43f
 8003848:	016e3600 	.word	0x016e3600
 800384c:	01a6ab1f 	.word	0x01a6ab1f
 8003850:	01e84800 	.word	0x01e84800

08003854 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f043 0201 	orr.w	r2, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f023 0201 	bic.w	r2, r3, #1
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80038b4:	78fb      	ldrb	r3, [r7, #3]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d115      	bne.n	80038e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80038c6:	200a      	movs	r0, #10
 80038c8:	f7fd f854 	bl	8000974 <HAL_Delay>
      ms += 10U;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	330a      	adds	r3, #10
 80038d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f001 f933 	bl	8004b3e <USB_GetMode>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d01e      	beq.n	800391c <USB_SetCurrentMode+0x84>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2bc7      	cmp	r3, #199	@ 0xc7
 80038e2:	d9f0      	bls.n	80038c6 <USB_SetCurrentMode+0x2e>
 80038e4:	e01a      	b.n	800391c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80038e6:	78fb      	ldrb	r3, [r7, #3]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d115      	bne.n	8003918 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80038f8:	200a      	movs	r0, #10
 80038fa:	f7fd f83b 	bl	8000974 <HAL_Delay>
      ms += 10U;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	330a      	adds	r3, #10
 8003902:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f001 f91a 	bl	8004b3e <USB_GetMode>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <USB_SetCurrentMode+0x84>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2bc7      	cmp	r3, #199	@ 0xc7
 8003914:	d9f0      	bls.n	80038f8 <USB_SetCurrentMode+0x60>
 8003916:	e001      	b.n	800391c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e005      	b.n	8003928 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2bc8      	cmp	r3, #200	@ 0xc8
 8003920:	d101      	bne.n	8003926 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003930:	b084      	sub	sp, #16
 8003932:	b580      	push	{r7, lr}
 8003934:	b086      	sub	sp, #24
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800393e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800394a:	2300      	movs	r3, #0
 800394c:	613b      	str	r3, [r7, #16]
 800394e:	e009      	b.n	8003964 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	3340      	adds	r3, #64	@ 0x40
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	2200      	movs	r2, #0
 800395c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	3301      	adds	r3, #1
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	2b0e      	cmp	r3, #14
 8003968:	d9f2      	bls.n	8003950 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800396a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800396e:	2b00      	cmp	r3, #0
 8003970:	d11c      	bne.n	80039ac <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003980:	f043 0302 	orr.w	r3, r3, #2
 8003984:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800398a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	e005      	b.n	80039b8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80039be:	461a      	mov	r2, r3
 80039c0:	2300      	movs	r3, #0
 80039c2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039c4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d10d      	bne.n	80039e8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80039cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d104      	bne.n	80039de <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80039d4:	2100      	movs	r1, #0
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f968 	bl	8003cac <USB_SetDevSpeed>
 80039dc:	e008      	b.n	80039f0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80039de:	2101      	movs	r1, #1
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f963 	bl	8003cac <USB_SetDevSpeed>
 80039e6:	e003      	b.n	80039f0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80039e8:	2103      	movs	r1, #3
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f95e 	bl	8003cac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80039f0:	2110      	movs	r1, #16
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f8fa 	bl	8003bec <USB_FlushTxFifo>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f924 	bl	8003c50 <USB_FlushRxFifo>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a18:	461a      	mov	r2, r3
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a24:	461a      	mov	r2, r3
 8003a26:	2300      	movs	r3, #0
 8003a28:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a30:	461a      	mov	r2, r3
 8003a32:	2300      	movs	r3, #0
 8003a34:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a36:	2300      	movs	r3, #0
 8003a38:	613b      	str	r3, [r7, #16]
 8003a3a:	e043      	b.n	8003ac4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a52:	d118      	bne.n	8003a86 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10a      	bne.n	8003a70 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a66:	461a      	mov	r2, r3
 8003a68:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e013      	b.n	8003a98 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	e008      	b.n	8003a98 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a92:	461a      	mov	r2, r3
 8003a94:	2300      	movs	r3, #0
 8003a96:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003abc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003ac8:	461a      	mov	r2, r3
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d3b5      	bcc.n	8003a3c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	613b      	str	r3, [r7, #16]
 8003ad4:	e043      	b.n	8003b5e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ae8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003aec:	d118      	bne.n	8003b20 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10a      	bne.n	8003b0a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b00:	461a      	mov	r2, r3
 8003b02:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	e013      	b.n	8003b32 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b16:	461a      	mov	r2, r3
 8003b18:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	e008      	b.n	8003b32 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	2300      	movs	r3, #0
 8003b30:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b3e:	461a      	mov	r2, r3
 8003b40:	2300      	movs	r3, #0
 8003b42:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b50:	461a      	mov	r2, r3
 8003b52:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003b62:	461a      	mov	r2, r3
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d3b5      	bcc.n	8003ad6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b7c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003b8a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d105      	bne.n	8003ba0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	f043 0210 	orr.w	r2, r3, #16
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699a      	ldr	r2, [r3, #24]
 8003ba4:	4b10      	ldr	r3, [pc, #64]	@ (8003be8 <USB_DevInit+0x2b8>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003bac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	f043 0208 	orr.w	r2, r3, #8
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003bc0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d107      	bne.n	8003bd8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003bd0:	f043 0304 	orr.w	r3, r3, #4
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003be4:	b004      	add	sp, #16
 8003be6:	4770      	bx	lr
 8003be8:	803c3800 	.word	0x803c3800

08003bec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c06:	d901      	bls.n	8003c0c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e01b      	b.n	8003c44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	daf2      	bge.n	8003bfa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	019b      	lsls	r3, r3, #6
 8003c1c:	f043 0220 	orr.w	r2, r3, #32
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	3301      	adds	r3, #1
 8003c28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c30:	d901      	bls.n	8003c36 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e006      	b.n	8003c44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0320 	and.w	r3, r3, #32
 8003c3e:	2b20      	cmp	r3, #32
 8003c40:	d0f0      	beq.n	8003c24 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c68:	d901      	bls.n	8003c6e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e018      	b.n	8003ca0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	daf2      	bge.n	8003c5c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2210      	movs	r2, #16
 8003c7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	3301      	adds	r3, #1
 8003c84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c8c:	d901      	bls.n	8003c92 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e006      	b.n	8003ca0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f003 0310 	and.w	r3, r3, #16
 8003c9a:	2b10      	cmp	r3, #16
 8003c9c:	d0f0      	beq.n	8003c80 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	68f9      	ldr	r1, [r7, #12]
 8003cc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b087      	sub	sp, #28
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 0306 	and.w	r3, r3, #6
 8003cf6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d102      	bne.n	8003d04 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	75fb      	strb	r3, [r7, #23]
 8003d02:	e00a      	b.n	8003d1a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d002      	beq.n	8003d10 <USB_GetDevSpeed+0x32>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2b06      	cmp	r3, #6
 8003d0e:	d102      	bne.n	8003d16 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003d10:	2302      	movs	r3, #2
 8003d12:	75fb      	strb	r3, [r7, #23]
 8003d14:	e001      	b.n	8003d1a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003d16:	230f      	movs	r3, #15
 8003d18:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	371c      	adds	r7, #28
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	785b      	ldrb	r3, [r3, #1]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d13a      	bne.n	8003dba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d4a:	69da      	ldr	r2, [r3, #28]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	f003 030f 	and.w	r3, r3, #15
 8003d54:	2101      	movs	r1, #1
 8003d56:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	68f9      	ldr	r1, [r7, #12]
 8003d5e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d62:	4313      	orrs	r3, r2
 8003d64:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d155      	bne.n	8003e28 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	791b      	ldrb	r3, [r3, #4]
 8003d96:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d98:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	059b      	lsls	r3, r3, #22
 8003d9e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003da0:	4313      	orrs	r3, r2
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	0151      	lsls	r1, r2, #5
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	440a      	add	r2, r1
 8003daa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003dae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003db2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	e036      	b.n	8003e28 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dc0:	69da      	ldr	r2, [r3, #28]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	2101      	movs	r1, #1
 8003dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd0:	041b      	lsls	r3, r3, #16
 8003dd2:	68f9      	ldr	r1, [r7, #12]
 8003dd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d11a      	bne.n	8003e28 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	791b      	ldrb	r3, [r3, #4]
 8003e0c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e0e:	430b      	orrs	r3, r1
 8003e10:	4313      	orrs	r3, r2
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	0151      	lsls	r1, r2, #5
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	440a      	add	r2, r1
 8003e1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e26:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
	...

08003e38 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	785b      	ldrb	r3, [r3, #1]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d161      	bne.n	8003f18 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e6a:	d11f      	bne.n	8003eac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	0151      	lsls	r1, r2, #5
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	440a      	add	r2, r1
 8003e82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e86:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e8a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	0151      	lsls	r1, r2, #5
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	440a      	add	r2, r1
 8003ea2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ea6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003eaa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	68f9      	ldr	r1, [r7, #12]
 8003ec8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ecc:	4013      	ands	r3, r2
 8003ece:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ed6:	69da      	ldr	r2, [r3, #28]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	68f9      	ldr	r1, [r7, #12]
 8003eec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	015a      	lsls	r2, r3, #5
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4413      	add	r3, r2
 8003efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	0159      	lsls	r1, r3, #5
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	440b      	add	r3, r1
 8003f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4b35      	ldr	r3, [pc, #212]	@ (8003fe8 <USB_DeactivateEndpoint+0x1b0>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	600b      	str	r3, [r1, #0]
 8003f16:	e060      	b.n	8003fda <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f2e:	d11f      	bne.n	8003f70 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	0151      	lsls	r1, r2, #5
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	440a      	add	r2, r1
 8003f46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f4a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003f4e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	0151      	lsls	r1, r2, #5
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	440a      	add	r2, r1
 8003f66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f6a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003f6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	f003 030f 	and.w	r3, r3, #15
 8003f80:	2101      	movs	r1, #1
 8003f82:	fa01 f303 	lsl.w	r3, r1, r3
 8003f86:	041b      	lsls	r3, r3, #16
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	68f9      	ldr	r1, [r7, #12]
 8003f8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f90:	4013      	ands	r3, r2
 8003f92:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f9a:	69da      	ldr	r2, [r3, #28]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	f003 030f 	and.w	r3, r3, #15
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8003faa:	041b      	lsls	r3, r3, #16
 8003fac:	43db      	mvns	r3, r3
 8003fae:	68f9      	ldr	r1, [r7, #12]
 8003fb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	0159      	lsls	r1, r3, #5
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	440b      	add	r3, r1
 8003fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4b05      	ldr	r3, [pc, #20]	@ (8003fec <USB_DeactivateEndpoint+0x1b4>)
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	ec337800 	.word	0xec337800
 8003fec:	eff37800 	.word	0xeff37800

08003ff0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08a      	sub	sp, #40	@ 0x28
 8003ff4:	af02      	add	r7, sp, #8
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	785b      	ldrb	r3, [r3, #1]
 800400c:	2b01      	cmp	r3, #1
 800400e:	f040 817a 	bne.w	8004306 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d132      	bne.n	8004080 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	4413      	add	r3, r2
 8004022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	0151      	lsls	r1, r2, #5
 800402c:	69fa      	ldr	r2, [r7, #28]
 800402e:	440a      	add	r2, r1
 8004030:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004034:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004038:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800403c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	4413      	add	r3, r2
 8004046:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	0151      	lsls	r1, r2, #5
 8004050:	69fa      	ldr	r2, [r7, #28]
 8004052:	440a      	add	r2, r1
 8004054:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004058:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800405c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	4413      	add	r3, r2
 8004066:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	0151      	lsls	r1, r2, #5
 8004070:	69fa      	ldr	r2, [r7, #28]
 8004072:	440a      	add	r2, r1
 8004074:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004078:	0cdb      	lsrs	r3, r3, #19
 800407a:	04db      	lsls	r3, r3, #19
 800407c:	6113      	str	r3, [r2, #16]
 800407e:	e092      	b.n	80041a6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	0151      	lsls	r1, r2, #5
 8004092:	69fa      	ldr	r2, [r7, #28]
 8004094:	440a      	add	r2, r1
 8004096:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800409a:	0cdb      	lsrs	r3, r3, #19
 800409c:	04db      	lsls	r3, r3, #19
 800409e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	0151      	lsls	r1, r2, #5
 80040b2:	69fa      	ldr	r2, [r7, #28]
 80040b4:	440a      	add	r2, r1
 80040b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040ba:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80040be:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80040c2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d11a      	bne.n	8004100 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d903      	bls.n	80040de <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	0151      	lsls	r1, r2, #5
 80040f0:	69fa      	ldr	r2, [r7, #28]
 80040f2:	440a      	add	r2, r1
 80040f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80040fc:	6113      	str	r3, [r2, #16]
 80040fe:	e01b      	b.n	8004138 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800410c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	6919      	ldr	r1, [r3, #16]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	440b      	add	r3, r1
 8004118:	1e59      	subs	r1, r3, #1
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004122:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004124:	4ba2      	ldr	r3, [pc, #648]	@ (80043b0 <USB_EPStartXfer+0x3c0>)
 8004126:	400b      	ands	r3, r1
 8004128:	69b9      	ldr	r1, [r7, #24]
 800412a:	0148      	lsls	r0, r1, #5
 800412c:	69f9      	ldr	r1, [r7, #28]
 800412e:	4401      	add	r1, r0
 8004130:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004134:	4313      	orrs	r3, r2
 8004136:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	4413      	add	r3, r2
 8004140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004144:	691a      	ldr	r2, [r3, #16]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800414e:	69b9      	ldr	r1, [r7, #24]
 8004150:	0148      	lsls	r0, r1, #5
 8004152:	69f9      	ldr	r1, [r7, #28]
 8004154:	4401      	add	r1, r0
 8004156:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800415a:	4313      	orrs	r3, r2
 800415c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	791b      	ldrb	r3, [r3, #4]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d11f      	bne.n	80041a6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	4413      	add	r3, r2
 800416e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	0151      	lsls	r1, r2, #5
 8004178:	69fa      	ldr	r2, [r7, #28]
 800417a:	440a      	add	r2, r1
 800417c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004180:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004184:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	0151      	lsls	r1, r2, #5
 8004198:	69fa      	ldr	r2, [r7, #28]
 800419a:	440a      	add	r2, r1
 800419c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80041a4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80041a6:	79fb      	ldrb	r3, [r7, #7]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d14b      	bne.n	8004244 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d009      	beq.n	80041c8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041c0:	461a      	mov	r2, r3
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	791b      	ldrb	r3, [r3, #4]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d128      	bne.n	8004222 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d110      	bne.n	8004202 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	0151      	lsls	r1, r2, #5
 80041f2:	69fa      	ldr	r2, [r7, #28]
 80041f4:	440a      	add	r2, r1
 80041f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041fa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	e00f      	b.n	8004222 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	0151      	lsls	r1, r2, #5
 8004214:	69fa      	ldr	r2, [r7, #28]
 8004216:	440a      	add	r2, r1
 8004218:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800421c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004220:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	4413      	add	r3, r2
 800422a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	0151      	lsls	r1, r2, #5
 8004234:	69fa      	ldr	r2, [r7, #28]
 8004236:	440a      	add	r2, r1
 8004238:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800423c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	e165      	b.n	8004510 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	0151      	lsls	r1, r2, #5
 8004256:	69fa      	ldr	r2, [r7, #28]
 8004258:	440a      	add	r2, r1
 800425a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800425e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004262:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	791b      	ldrb	r3, [r3, #4]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d015      	beq.n	8004298 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 814d 	beq.w	8004510 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800427c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	2101      	movs	r1, #1
 8004288:	fa01 f303 	lsl.w	r3, r1, r3
 800428c:	69f9      	ldr	r1, [r7, #28]
 800428e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004292:	4313      	orrs	r3, r2
 8004294:	634b      	str	r3, [r1, #52]	@ 0x34
 8004296:	e13b      	b.n	8004510 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d110      	bne.n	80042ca <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	0151      	lsls	r1, r2, #5
 80042ba:	69fa      	ldr	r2, [r7, #28]
 80042bc:	440a      	add	r2, r1
 80042be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042c2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80042c6:	6013      	str	r3, [r2, #0]
 80042c8:	e00f      	b.n	80042ea <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	0151      	lsls	r1, r2, #5
 80042dc:	69fa      	ldr	r2, [r7, #28]
 80042de:	440a      	add	r2, r1
 80042e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042e8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	68d9      	ldr	r1, [r3, #12]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	781a      	ldrb	r2, [r3, #0]
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	b298      	uxth	r0, r3
 80042f8:	79fb      	ldrb	r3, [r7, #7]
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	4603      	mov	r3, r0
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 f9b8 	bl	8004674 <USB_WritePacket>
 8004304:	e104      	b.n	8004510 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	0151      	lsls	r1, r2, #5
 8004318:	69fa      	ldr	r2, [r7, #28]
 800431a:	440a      	add	r2, r1
 800431c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004320:	0cdb      	lsrs	r3, r3, #19
 8004322:	04db      	lsls	r3, r3, #19
 8004324:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	0151      	lsls	r1, r2, #5
 8004338:	69fa      	ldr	r2, [r7, #28]
 800433a:	440a      	add	r2, r1
 800433c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004340:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004344:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004348:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d131      	bne.n	80043b4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004374:	691a      	ldr	r2, [r3, #16]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800437e:	69b9      	ldr	r1, [r7, #24]
 8004380:	0148      	lsls	r0, r1, #5
 8004382:	69f9      	ldr	r1, [r7, #28]
 8004384:	4401      	add	r1, r0
 8004386:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800438a:	4313      	orrs	r3, r2
 800438c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	4413      	add	r3, r2
 8004396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	0151      	lsls	r1, r2, #5
 80043a0:	69fa      	ldr	r2, [r7, #28]
 80043a2:	440a      	add	r2, r1
 80043a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80043ac:	6113      	str	r3, [r2, #16]
 80043ae:	e061      	b.n	8004474 <USB_EPStartXfer+0x484>
 80043b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d123      	bne.n	8004404 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043c8:	691a      	ldr	r2, [r3, #16]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d2:	69b9      	ldr	r1, [r7, #24]
 80043d4:	0148      	lsls	r0, r1, #5
 80043d6:	69f9      	ldr	r1, [r7, #28]
 80043d8:	4401      	add	r1, r0
 80043da:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80043de:	4313      	orrs	r3, r2
 80043e0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	0151      	lsls	r1, r2, #5
 80043f4:	69fa      	ldr	r2, [r7, #28]
 80043f6:	440a      	add	r2, r1
 80043f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004400:	6113      	str	r3, [r2, #16]
 8004402:	e037      	b.n	8004474 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	691a      	ldr	r2, [r3, #16]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	4413      	add	r3, r2
 800440e:	1e5a      	subs	r2, r3, #1
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	fbb2 f3f3 	udiv	r3, r2, r3
 8004418:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	8afa      	ldrh	r2, [r7, #22]
 8004420:	fb03 f202 	mul.w	r2, r3, r2
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	8afb      	ldrh	r3, [r7, #22]
 8004438:	04d9      	lsls	r1, r3, #19
 800443a:	4b38      	ldr	r3, [pc, #224]	@ (800451c <USB_EPStartXfer+0x52c>)
 800443c:	400b      	ands	r3, r1
 800443e:	69b9      	ldr	r1, [r7, #24]
 8004440:	0148      	lsls	r0, r1, #5
 8004442:	69f9      	ldr	r1, [r7, #28]
 8004444:	4401      	add	r1, r0
 8004446:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800444a:	4313      	orrs	r3, r2
 800444c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004464:	69b9      	ldr	r1, [r7, #24]
 8004466:	0148      	lsls	r0, r1, #5
 8004468:	69f9      	ldr	r1, [r7, #28]
 800446a:	4401      	add	r1, r0
 800446c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004470:	4313      	orrs	r3, r2
 8004472:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d10d      	bne.n	8004496 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d009      	beq.n	8004496 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	68d9      	ldr	r1, [r3, #12]
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	4413      	add	r3, r2
 800448e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004492:	460a      	mov	r2, r1
 8004494:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	791b      	ldrb	r3, [r3, #4]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d128      	bne.n	80044f0 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d110      	bne.n	80044d0 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	0151      	lsls	r1, r2, #5
 80044c0:	69fa      	ldr	r2, [r7, #28]
 80044c2:	440a      	add	r2, r1
 80044c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	e00f      	b.n	80044f0 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	0151      	lsls	r1, r2, #5
 80044e2:	69fa      	ldr	r2, [r7, #28]
 80044e4:	440a      	add	r2, r1
 80044e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	0151      	lsls	r1, r2, #5
 8004502:	69fa      	ldr	r2, [r7, #28]
 8004504:	440a      	add	r2, r1
 8004506:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800450a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800450e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3720      	adds	r7, #32
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	1ff80000 	.word	0x1ff80000

08004520 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	785b      	ldrb	r3, [r3, #1]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d14a      	bne.n	80045d4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004552:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004556:	f040 8086 	bne.w	8004666 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	4413      	add	r3, r2
 8004564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	7812      	ldrb	r2, [r2, #0]
 800456e:	0151      	lsls	r1, r2, #5
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	440a      	add	r2, r1
 8004574:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004578:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800457c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	015a      	lsls	r2, r3, #5
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	4413      	add	r3, r2
 8004588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	7812      	ldrb	r2, [r2, #0]
 8004592:	0151      	lsls	r1, r2, #5
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	440a      	add	r2, r1
 8004598:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800459c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80045a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	3301      	adds	r3, #1
 80045a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d902      	bls.n	80045b8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	75fb      	strb	r3, [r7, #23]
          break;
 80045b6:	e056      	b.n	8004666 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045d0:	d0e7      	beq.n	80045a2 <USB_EPStopXfer+0x82>
 80045d2:	e048      	b.n	8004666 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045ec:	d13b      	bne.n	8004666 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	7812      	ldrb	r2, [r2, #0]
 8004602:	0151      	lsls	r1, r2, #5
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	440a      	add	r2, r1
 8004608:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800460c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004610:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	4413      	add	r3, r2
 800461c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	7812      	ldrb	r2, [r2, #0]
 8004626:	0151      	lsls	r1, r2, #5
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	440a      	add	r2, r1
 800462c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004630:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004634:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3301      	adds	r3, #1
 800463a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004642:	4293      	cmp	r3, r2
 8004644:	d902      	bls.n	800464c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	75fb      	strb	r3, [r7, #23]
          break;
 800464a:	e00c      	b.n	8004666 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	4413      	add	r3, r2
 8004656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004660:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004664:	d0e7      	beq.n	8004636 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004666:	7dfb      	ldrb	r3, [r7, #23]
}
 8004668:	4618      	mov	r0, r3
 800466a:	371c      	adds	r7, #28
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004674:	b480      	push	{r7}
 8004676:	b089      	sub	sp, #36	@ 0x24
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	4611      	mov	r1, r2
 8004680:	461a      	mov	r2, r3
 8004682:	460b      	mov	r3, r1
 8004684:	71fb      	strb	r3, [r7, #7]
 8004686:	4613      	mov	r3, r2
 8004688:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004692:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004696:	2b00      	cmp	r3, #0
 8004698:	d123      	bne.n	80046e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800469a:	88bb      	ldrh	r3, [r7, #4]
 800469c:	3303      	adds	r3, #3
 800469e:	089b      	lsrs	r3, r3, #2
 80046a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80046a2:	2300      	movs	r3, #0
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	e018      	b.n	80046da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80046a8:	79fb      	ldrb	r3, [r7, #7]
 80046aa:	031a      	lsls	r2, r3, #12
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046b4:	461a      	mov	r2, r3
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	3301      	adds	r3, #1
 80046c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	3301      	adds	r3, #1
 80046c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	3301      	adds	r3, #1
 80046cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	3301      	adds	r3, #1
 80046d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	3301      	adds	r3, #1
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d3e2      	bcc.n	80046a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3724      	adds	r7, #36	@ 0x24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b08b      	sub	sp, #44	@ 0x2c
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	4613      	mov	r3, r2
 80046fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004706:	88fb      	ldrh	r3, [r7, #6]
 8004708:	089b      	lsrs	r3, r3, #2
 800470a:	b29b      	uxth	r3, r3
 800470c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800470e:	88fb      	ldrh	r3, [r7, #6]
 8004710:	f003 0303 	and.w	r3, r3, #3
 8004714:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004716:	2300      	movs	r3, #0
 8004718:	623b      	str	r3, [r7, #32]
 800471a:	e014      	b.n	8004746 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004726:	601a      	str	r2, [r3, #0]
    pDest++;
 8004728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472a:	3301      	adds	r3, #1
 800472c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800472e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004730:	3301      	adds	r3, #1
 8004732:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004736:	3301      	adds	r3, #1
 8004738:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473c:	3301      	adds	r3, #1
 800473e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	3301      	adds	r3, #1
 8004744:	623b      	str	r3, [r7, #32]
 8004746:	6a3a      	ldr	r2, [r7, #32]
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	429a      	cmp	r2, r3
 800474c:	d3e6      	bcc.n	800471c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800474e:	8bfb      	ldrh	r3, [r7, #30]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01e      	beq.n	8004792 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800475e:	461a      	mov	r2, r3
 8004760:	f107 0310 	add.w	r3, r7, #16
 8004764:	6812      	ldr	r2, [r2, #0]
 8004766:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	b2db      	uxtb	r3, r3
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	fa22 f303 	lsr.w	r3, r2, r3
 8004774:	b2da      	uxtb	r2, r3
 8004776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004778:	701a      	strb	r2, [r3, #0]
      i++;
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	3301      	adds	r3, #1
 800477e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004782:	3301      	adds	r3, #1
 8004784:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004786:	8bfb      	ldrh	r3, [r7, #30]
 8004788:	3b01      	subs	r3, #1
 800478a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800478c:	8bfb      	ldrh	r3, [r7, #30]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1ea      	bne.n	8004768 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004794:	4618      	mov	r0, r3
 8004796:	372c      	adds	r7, #44	@ 0x2c
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	785b      	ldrb	r3, [r3, #1]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d12c      	bne.n	8004816 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	db12      	blt.n	80047f4 <USB_EPSetStall+0x54>
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00f      	beq.n	80047f4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	0151      	lsls	r1, r2, #5
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	440a      	add	r2, r1
 80047ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80047f2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	0151      	lsls	r1, r2, #5
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	440a      	add	r2, r1
 800480a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800480e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004812:	6013      	str	r3, [r2, #0]
 8004814:	e02b      	b.n	800486e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4413      	add	r3, r2
 800481e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	db12      	blt.n	800484e <USB_EPSetStall+0xae>
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00f      	beq.n	800484e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4413      	add	r3, r2
 8004836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	0151      	lsls	r1, r2, #5
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	440a      	add	r2, r1
 8004844:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004848:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800484c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4413      	add	r3, r2
 8004856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	0151      	lsls	r1, r2, #5
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	440a      	add	r2, r1
 8004864:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004868:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800486c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	785b      	ldrb	r3, [r3, #1]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d128      	bne.n	80048ea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	0151      	lsls	r1, r2, #5
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	440a      	add	r2, r1
 80048ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80048b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	791b      	ldrb	r3, [r3, #4]
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d003      	beq.n	80048c8 <USB_EPClearStall+0x4c>
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	791b      	ldrb	r3, [r3, #4]
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d138      	bne.n	800493a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	0151      	lsls	r1, r2, #5
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	440a      	add	r2, r1
 80048de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048e6:	6013      	str	r3, [r2, #0]
 80048e8:	e027      	b.n	800493a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	0151      	lsls	r1, r2, #5
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	440a      	add	r2, r1
 8004900:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004904:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004908:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	791b      	ldrb	r3, [r3, #4]
 800490e:	2b03      	cmp	r3, #3
 8004910:	d003      	beq.n	800491a <USB_EPClearStall+0x9e>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	791b      	ldrb	r3, [r3, #4]
 8004916:	2b02      	cmp	r3, #2
 8004918:	d10f      	bne.n	800493a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	0151      	lsls	r1, r2, #5
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	440a      	add	r2, r1
 8004930:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004938:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004966:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800496a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	78fb      	ldrb	r3, [r7, #3]
 8004976:	011b      	lsls	r3, r3, #4
 8004978:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800497c:	68f9      	ldr	r1, [r7, #12]
 800497e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004982:	4313      	orrs	r3, r2
 8004984:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80049ae:	f023 0303 	bic.w	r3, r3, #3
 80049b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049c2:	f023 0302 	bic.w	r3, r3, #2
 80049c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b085      	sub	sp, #20
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80049f0:	f023 0303 	bic.w	r3, r3, #3
 80049f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a04:	f043 0302 	orr.w	r3, r3, #2
 8004a08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a30:	68fb      	ldr	r3, [r7, #12]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b085      	sub	sp, #20
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	0c1b      	lsrs	r3, r3, #16
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b085      	sub	sp, #20
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	4013      	ands	r3, r2
 8004a94:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	b29b      	uxth	r3, r3
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b085      	sub	sp, #20
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
 8004aae:	460b      	mov	r3, r1
 8004ab0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004ab6:	78fb      	ldrb	r3, [r7, #3]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ad4:	68bb      	ldr	r3, [r7, #8]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b087      	sub	sp, #28
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	460b      	mov	r3, r1
 8004aec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b04:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004b06:	78fb      	ldrb	r3, [r7, #3]
 8004b08:	f003 030f 	and.w	r3, r3, #15
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b12:	01db      	lsls	r3, r3, #7
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004b1c:	78fb      	ldrb	r3, [r7, #3]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b30:	68bb      	ldr	r3, [r7, #8]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	371c      	adds	r7, #28
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b085      	sub	sp, #20
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b74:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004b78:	f023 0307 	bic.w	r3, r3, #7
 8004b7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	333c      	adds	r3, #60	@ 0x3c
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	4a26      	ldr	r2, [pc, #152]	@ (8004c58 <USB_EP0_OutStart+0xb8>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d90a      	bls.n	8004bda <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bd4:	d101      	bne.n	8004bda <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	e037      	b.n	8004c4a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004be0:	461a      	mov	r2, r3
 8004be2:	2300      	movs	r3, #0
 8004be4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bf4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004bf8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c08:	f043 0318 	orr.w	r3, r3, #24
 8004c0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c1c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004c20:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004c22:	7afb      	ldrb	r3, [r7, #11]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d10f      	bne.n	8004c48 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c2e:	461a      	mov	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c42:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004c46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	4f54300a 	.word	0x4f54300a

08004c5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c74:	d901      	bls.n	8004c7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e01b      	b.n	8004cb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	daf2      	bge.n	8004c68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c82:	2300      	movs	r3, #0
 8004c84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f043 0201 	orr.w	r2, r3, #1
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3301      	adds	r3, #1
 8004c96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c9e:	d901      	bls.n	8004ca4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e006      	b.n	8004cb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d0f0      	beq.n	8004c92 <USB_CoreReset+0x36>

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
	...

08004cc0 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8004ccc:	2018      	movs	r0, #24
 8004cce:	f002 fd55 	bl	800777c <USBD_static_malloc>
 8004cd2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d109      	bne.n	8004cee <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	32b0      	adds	r2, #176	@ 0xb0
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004cea:	2302      	movs	r3, #2
 8004cec:	e08a      	b.n	8004e04 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	32b0      	adds	r2, #176	@ 0xb0
 8004cf8:	68f9      	ldr	r1, [r7, #12]
 8004cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	32b0      	adds	r2, #176	@ 0xb0
 8004d08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	7c1b      	ldrb	r3, [r3, #16]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d11b      	bne.n	8004d52 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004d1a:	4b3c      	ldr	r3, [pc, #240]	@ (8004e0c <USBD_CUSTOM_HID_Init+0x14c>)
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	f003 020f 	and.w	r2, r3, #15
 8004d22:	6879      	ldr	r1, [r7, #4]
 8004d24:	4613      	mov	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	440b      	add	r3, r1
 8004d2e:	3326      	adds	r3, #38	@ 0x26
 8004d30:	2205      	movs	r2, #5
 8004d32:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004d34:	4b36      	ldr	r3, [pc, #216]	@ (8004e10 <USBD_CUSTOM_HID_Init+0x150>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	f003 020f 	and.w	r2, r3, #15
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	440b      	add	r3, r1
 8004d48:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004d4c:	2205      	movs	r2, #5
 8004d4e:	801a      	strh	r2, [r3, #0]
 8004d50:	e01a      	b.n	8004d88 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004d52:	4b2e      	ldr	r3, [pc, #184]	@ (8004e0c <USBD_CUSTOM_HID_Init+0x14c>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	f003 020f 	and.w	r2, r3, #15
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	3326      	adds	r3, #38	@ 0x26
 8004d68:	2205      	movs	r2, #5
 8004d6a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004d6c:	4b28      	ldr	r3, [pc, #160]	@ (8004e10 <USBD_CUSTOM_HID_Init+0x150>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	f003 020f 	and.w	r2, r3, #15
 8004d74:	6879      	ldr	r1, [r7, #4]
 8004d76:	4613      	mov	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	440b      	add	r3, r1
 8004d80:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004d84:	2205      	movs	r2, #5
 8004d86:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8004d88:	4b20      	ldr	r3, [pc, #128]	@ (8004e0c <USBD_CUSTOM_HID_Init+0x14c>)
 8004d8a:	7819      	ldrb	r1, [r3, #0]
 8004d8c:	2310      	movs	r3, #16
 8004d8e:	2203      	movs	r2, #3
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f002 fb94 	bl	80074be <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8004d96:	4b1d      	ldr	r3, [pc, #116]	@ (8004e0c <USBD_CUSTOM_HID_Init+0x14c>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	f003 020f 	and.w	r2, r3, #15
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	4613      	mov	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	440b      	add	r3, r1
 8004daa:	3324      	adds	r3, #36	@ 0x24
 8004dac:	2201      	movs	r2, #1
 8004dae:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8004db0:	4b17      	ldr	r3, [pc, #92]	@ (8004e10 <USBD_CUSTOM_HID_Init+0x150>)
 8004db2:	7819      	ldrb	r1, [r3, #0]
 8004db4:	2302      	movs	r3, #2
 8004db6:	2203      	movs	r2, #3
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f002 fb80 	bl	80074be <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8004dbe:	4b14      	ldr	r3, [pc, #80]	@ (8004e10 <USBD_CUSTOM_HID_Init+0x150>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	f003 020f 	and.w	r2, r3, #15
 8004dc6:	6879      	ldr	r1, [r7, #4]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	440b      	add	r3, r1
 8004dd2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	33b0      	adds	r3, #176	@ 0xb0
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8004df4:	4b06      	ldr	r3, [pc, #24]	@ (8004e10 <USBD_CUSTOM_HID_Init+0x150>)
 8004df6:	7819      	ldrb	r1, [r3, #0]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f002 fc4d 	bl	800769c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	20000086 	.word	0x20000086
 8004e10:	20000087 	.word	0x20000087

08004e14 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8004e20:	4b37      	ldr	r3, [pc, #220]	@ (8004f00 <USBD_CUSTOM_HID_DeInit+0xec>)
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	4619      	mov	r1, r3
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f002 fb6f 	bl	800750a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8004e2c:	4b34      	ldr	r3, [pc, #208]	@ (8004f00 <USBD_CUSTOM_HID_DeInit+0xec>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	f003 020f 	and.w	r2, r3, #15
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	4613      	mov	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	440b      	add	r3, r1
 8004e40:	3324      	adds	r3, #36	@ 0x24
 8004e42:	2200      	movs	r2, #0
 8004e44:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8004e46:	4b2e      	ldr	r3, [pc, #184]	@ (8004f00 <USBD_CUSTOM_HID_DeInit+0xec>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	f003 020f 	and.w	r2, r3, #15
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	4613      	mov	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	3326      	adds	r3, #38	@ 0x26
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8004e60:	4b28      	ldr	r3, [pc, #160]	@ (8004f04 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	4619      	mov	r1, r3
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f002 fb4f 	bl	800750a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8004e6c:	4b25      	ldr	r3, [pc, #148]	@ (8004f04 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	f003 020f 	and.w	r2, r3, #15
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	4613      	mov	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	440b      	add	r3, r1
 8004e80:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004e84:	2200      	movs	r2, #0
 8004e86:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8004e88:	4b1e      	ldr	r3, [pc, #120]	@ (8004f04 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	f003 020f 	and.w	r2, r3, #15
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	4613      	mov	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	32b0      	adds	r2, #176	@ 0xb0
 8004eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d01f      	beq.n	8004ef6 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	33b0      	adds	r3, #176	@ 0xb0
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	32b0      	adds	r2, #176	@ 0xb0
 8004ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f002 fc5d 	bl	8007798 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	32b0      	adds	r2, #176	@ 0xb0
 8004ee8:	2100      	movs	r1, #0
 8004eea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	20000086 	.word	0x20000086
 8004f04:	20000087 	.word	0x20000087

08004f08 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b0ca      	sub	sp, #296	@ 0x128
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8004f12:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004f16:	6018      	str	r0, [r3, #0]
 8004f18:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8004f1c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004f20:	6019      	str	r1, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f22:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8004f26:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f30:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8004f34:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	32b0      	adds	r2, #176	@ 0xb0
 8004f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f40:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  uint16_t len = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
#warning "USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED not implemented; See original library code"
#endif
#ifdef USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED
#warning "USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED not implemented; See original library code"
#endif
  uint8_t  *pbuf = NULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  uint16_t status_info = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  USBD_StatusTypeDef ret = USBD_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

  if (hhid == NULL)
 8004f5c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <USBD_CUSTOM_HID_Setup+0x60>
  {
    return (uint8_t)USBD_FAIL;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e1ea      	b.n	800533e <USBD_CUSTOM_HID_Setup+0x436>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f68:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8004f6c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 80d9 	beq.w	8005130 <USBD_CUSTOM_HID_Setup+0x228>
 8004f7e:	2b20      	cmp	r3, #32
 8004f80:	f040 81cb 	bne.w	800531a <USBD_CUSTOM_HID_Setup+0x412>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004f84:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8004f88:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	785b      	ldrb	r3, [r3, #1]
 8004f90:	3b01      	subs	r3, #1
 8004f92:	2b0a      	cmp	r3, #10
 8004f94:	f200 80ba 	bhi.w	800510c <USBD_CUSTOM_HID_Setup+0x204>
 8004f98:	a201      	add	r2, pc, #4	@ (adr r2, 8004fa0 <USBD_CUSTOM_HID_Setup+0x98>)
 8004f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9e:	bf00      	nop
 8004fa0:	08005065 	.word	0x08005065
 8004fa4:	08005019 	.word	0x08005019
 8004fa8:	08004fe5 	.word	0x08004fe5
 8004fac:	0800510d 	.word	0x0800510d
 8004fb0:	0800510d 	.word	0x0800510d
 8004fb4:	0800510d 	.word	0x0800510d
 8004fb8:	0800510d 	.word	0x0800510d
 8004fbc:	0800510d 	.word	0x0800510d
 8004fc0:	08005033 	.word	0x08005033
 8004fc4:	08004ffd 	.word	0x08004ffd
 8004fc8:	08004fcd 	.word	0x08004fcd
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004fcc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8004fd0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	885b      	ldrh	r3, [r3, #2]
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	461a      	mov	r2, r3
 8004fdc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004fe0:	605a      	str	r2, [r3, #4]
          break;
 8004fe2:	e0a4      	b.n	800512e <USBD_CUSTOM_HID_Setup+0x226>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004fe4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004fe8:	1d19      	adds	r1, r3, #4
 8004fea:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8004fee:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	6818      	ldr	r0, [r3, #0]
 8004ff6:	f001 fdd3 	bl	8006ba0 <USBD_CtlSendData>
          break;
 8004ffa:	e098      	b.n	800512e <USBD_CUSTOM_HID_Setup+0x226>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004ffc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005000:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	885b      	ldrh	r3, [r3, #2]
 8005008:	0a1b      	lsrs	r3, r3, #8
 800500a:	b29b      	uxth	r3, r3
 800500c:	b2db      	uxtb	r3, r3
 800500e:	461a      	mov	r2, r3
 8005010:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005014:	609a      	str	r2, [r3, #8]
          break;
 8005016:	e08a      	b.n	800512e <USBD_CUSTOM_HID_Setup+0x226>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005018:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800501c:	f103 0108 	add.w	r1, r3, #8
 8005020:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005024:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005028:	2201      	movs	r2, #1
 800502a:	6818      	ldr	r0, [r3, #0]
 800502c:	f001 fdb8 	bl	8006ba0 <USBD_CtlSendData>
          break;
 8005030:	e07d      	b.n	800512e <USBD_CUSTOM_HID_Setup+0x226>

        case CUSTOM_HID_REQ_SET_REPORT:
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8005032:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005036:	2201      	movs	r2, #1
 8005038:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800503a:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 800503e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005042:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	88db      	ldrh	r3, [r3, #6]
 800504a:	2b02      	cmp	r3, #2
 800504c:	bf28      	it	cs
 800504e:	2302      	movcs	r3, #2
 8005050:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8005052:	461a      	mov	r2, r3
 8005054:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005058:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800505c:	6818      	ldr	r0, [r3, #0]
 800505e:	f001 fdcb 	bl	8006bf8 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8005062:	e064      	b.n	800512e <USBD_CUSTOM_HID_Setup+0x226>
        /*
         * Implementation of Contact Count Maximum and Device Certification Status feature reports as required by Windows
         * For more information, see https://learn.microsoft.com/en-us/windows-hardware/design/component-guidelines/touchscreen-required-hid-top-level-collections
         */
        case CUSTOM_HID_REQ_GET_REPORT:
        	int FEATURE_REPORT_WVALUE_OFFSET = 0x300;		// High Byte of wValue is report type, Low Byte is report ID (HID 1.11, Section 7.2)
 8005064:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005068:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        	if (req->wValue == (FEATURE_REPORT_WVALUE_OFFSET + REPORTID_MAX_COUNT))
 800506c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005070:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	885b      	ldrh	r3, [r3, #2]
 8005078:	461a      	mov	r2, r3
 800507a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800507e:	3302      	adds	r3, #2
 8005080:	429a      	cmp	r2, r3
 8005082:	d110      	bne.n	80050a6 <USBD_CUSTOM_HID_Setup+0x19e>
        	{
        		MaxCountFeatureReport maxCountFeatureReport;
        		maxCountFeatureReport.report_ID = REPORTID_MAX_COUNT;
 8005084:	2302      	movs	r3, #2
 8005086:	f887 3110 	strb.w	r3, [r7, #272]	@ 0x110
        		maxCountFeatureReport.max_contact_count = MAX_CONTACT_COUNT;
 800508a:	2302      	movs	r3, #2
 800508c:	f887 3111 	strb.w	r3, [r7, #273]	@ 0x111
        		USBD_CtlSendData(pdev, (uint8_t*)&maxCountFeatureReport, sizeof (maxCountFeatureReport));
 8005090:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8005094:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005098:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800509c:	2202      	movs	r2, #2
 800509e:	6818      	ldr	r0, [r3, #0]
 80050a0:	f001 fd7e 	bl	8006ba0 <USBD_CtlSendData>
        				0xcf, 0x17, 0xb7, 0xb8, 0xf4, 0xe1, 0x33, 0x08, 0x24, 0x8b, 0xc4, 0x43, 0xa5, 0xe5, 0x24, 0xc2
        		};
        		memcpy(certificationFeatureReport.blob, blob, sizeof(blob));
        		USBD_CtlSendData(pdev, (uint8_t*)&certificationFeatureReport, sizeof (certificationFeatureReport));
					}
        	break;
 80050a4:	e042      	b.n	800512c <USBD_CUSTOM_HID_Setup+0x224>
        	else if (req->wValue == (FEATURE_REPORT_WVALUE_OFFSET + REPORTID_CERTIFICATION))
 80050a6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80050aa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	885b      	ldrh	r3, [r3, #2]
 80050b2:	461a      	mov	r2, r3
 80050b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b8:	3344      	adds	r3, #68	@ 0x44
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d136      	bne.n	800512c <USBD_CUSTOM_HID_Setup+0x224>
        		certificationFeatureReport.report_ID = REPORTID_CERTIFICATION;
 80050be:	2344      	movs	r3, #68	@ 0x44
 80050c0:	f887 3108 	strb.w	r3, [r7, #264]	@ 0x108
        		uint8_t blob[] = {
 80050c4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80050c8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80050cc:	4a9e      	ldr	r2, [pc, #632]	@ (8005348 <USBD_CUSTOM_HID_Setup+0x440>)
 80050ce:	4618      	mov	r0, r3
 80050d0:	4611      	mov	r1, r2
 80050d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80050d6:	461a      	mov	r2, r3
 80050d8:	f002 fbc0 	bl	800785c <memcpy>
        		memcpy(certificationFeatureReport.blob, blob, sizeof(blob));
 80050dc:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80050e0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80050e4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80050e8:	4610      	mov	r0, r2
 80050ea:	4619      	mov	r1, r3
 80050ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80050f0:	461a      	mov	r2, r3
 80050f2:	f002 fbb3 	bl	800785c <memcpy>
        		USBD_CtlSendData(pdev, (uint8_t*)&certificationFeatureReport, sizeof (certificationFeatureReport));
 80050f6:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 80050fa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80050fe:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005102:	2208      	movs	r2, #8
 8005104:	6818      	ldr	r0, [r3, #0]
 8005106:	f001 fd4b 	bl	8006ba0 <USBD_CtlSendData>
        	break;
 800510a:	e00f      	b.n	800512c <USBD_CUSTOM_HID_Setup+0x224>
        default:
          USBD_CtlError(pdev, req);
 800510c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005110:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8005114:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005118:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800511c:	6811      	ldr	r1, [r2, #0]
 800511e:	6818      	ldr	r0, [r3, #0]
 8005120:	f001 fccd 	bl	8006abe <USBD_CtlError>
          ret = USBD_FAIL;
 8005124:	2303      	movs	r3, #3
 8005126:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
          break;
 800512a:	e000      	b.n	800512e <USBD_CUSTOM_HID_Setup+0x226>
        	break;
 800512c:	bf00      	nop
      }
      break;
 800512e:	e104      	b.n	800533a <USBD_CUSTOM_HID_Setup+0x432>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005130:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005134:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	785b      	ldrb	r3, [r3, #1]
 800513c:	2b0b      	cmp	r3, #11
 800513e:	f200 80da 	bhi.w	80052f6 <USBD_CUSTOM_HID_Setup+0x3ee>
 8005142:	a201      	add	r2, pc, #4	@ (adr r2, 8005148 <USBD_CUSTOM_HID_Setup+0x240>)
 8005144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005148:	08005179 	.word	0x08005179
 800514c:	08005317 	.word	0x08005317
 8005150:	080052f7 	.word	0x080052f7
 8005154:	080052f7 	.word	0x080052f7
 8005158:	080052f7 	.word	0x080052f7
 800515c:	080052f7 	.word	0x080052f7
 8005160:	080051c3 	.word	0x080051c3
 8005164:	080052f7 	.word	0x080052f7
 8005168:	080052f7 	.word	0x080052f7
 800516c:	080052f7 	.word	0x080052f7
 8005170:	0800525d 	.word	0x0800525d
 8005174:	080052ab 	.word	0x080052ab
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005178:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800517c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b03      	cmp	r3, #3
 800518a:	d10a      	bne.n	80051a2 <USBD_CUSTOM_HID_Setup+0x29a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800518c:	f507 7189 	add.w	r1, r7, #274	@ 0x112
 8005190:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005194:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005198:	2202      	movs	r2, #2
 800519a:	6818      	ldr	r0, [r3, #0]
 800519c:	f001 fd00 	bl	8006ba0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80051a0:	e0ba      	b.n	8005318 <USBD_CUSTOM_HID_Setup+0x410>
            USBD_CtlError(pdev, req);
 80051a2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80051a6:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 80051aa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80051ae:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80051b2:	6811      	ldr	r1, [r2, #0]
 80051b4:	6818      	ldr	r0, [r3, #0]
 80051b6:	f001 fc82 	bl	8006abe <USBD_CtlError>
            ret = USBD_FAIL;
 80051ba:	2303      	movs	r3, #3
 80051bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
          break;
 80051c0:	e0aa      	b.n	8005318 <USBD_CUSTOM_HID_Setup+0x410>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 80051c2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80051c6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	885b      	ldrh	r3, [r3, #2]
 80051ce:	0a1b      	lsrs	r3, r3, #8
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	2b22      	cmp	r3, #34	@ 0x22
 80051d4:	d11e      	bne.n	8005214 <USBD_CUSTOM_HID_Setup+0x30c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80051d6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80051da:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	88db      	ldrh	r3, [r3, #6]
 80051e2:	2bbd      	cmp	r3, #189	@ 0xbd
 80051e4:	bf28      	it	cs
 80051e6:	23bd      	movcs	r3, #189	@ 0xbd
 80051e8:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 80051ec:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80051f0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80051fa:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80051fe:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8005202:	6812      	ldr	r2, [r2, #0]
 8005204:	33b0      	adds	r3, #176	@ 0xb0
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005212:	e017      	b.n	8005244 <USBD_CUSTOM_HID_Setup+0x33c>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8005214:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005218:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	885b      	ldrh	r3, [r3, #2]
 8005220:	0a1b      	lsrs	r3, r3, #8
 8005222:	b29b      	uxth	r3, r3
 8005224:	2b21      	cmp	r3, #33	@ 0x21
 8005226:	d10d      	bne.n	8005244 <USBD_CUSTOM_HID_Setup+0x33c>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8005228:	4b48      	ldr	r3, [pc, #288]	@ (800534c <USBD_CUSTOM_HID_Setup+0x444>)
 800522a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800522e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005232:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	88db      	ldrh	r3, [r3, #6]
 800523a:	2b09      	cmp	r3, #9
 800523c:	bf28      	it	cs
 800523e:	2309      	movcs	r3, #9
 8005240:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005244:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 8005248:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800524c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005250:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	f001 fca3 	bl	8006ba0 <USBD_CtlSendData>
          break;
 800525a:	e05d      	b.n	8005318 <USBD_CUSTOM_HID_Setup+0x410>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800525c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005260:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b03      	cmp	r3, #3
 800526e:	d10c      	bne.n	800528a <USBD_CUSTOM_HID_Setup+0x382>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005270:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005274:	f103 010c 	add.w	r1, r3, #12
 8005278:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800527c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005280:	2201      	movs	r2, #1
 8005282:	6818      	ldr	r0, [r3, #0]
 8005284:	f001 fc8c 	bl	8006ba0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005288:	e046      	b.n	8005318 <USBD_CUSTOM_HID_Setup+0x410>
            USBD_CtlError(pdev, req);
 800528a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800528e:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8005292:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005296:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800529a:	6811      	ldr	r1, [r2, #0]
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	f001 fc0e 	bl	8006abe <USBD_CtlError>
            ret = USBD_FAIL;
 80052a2:	2303      	movs	r3, #3
 80052a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
          break;
 80052a8:	e036      	b.n	8005318 <USBD_CUSTOM_HID_Setup+0x410>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052aa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80052ae:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b03      	cmp	r3, #3
 80052bc:	d10b      	bne.n	80052d6 <USBD_CUSTOM_HID_Setup+0x3ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80052be:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80052c2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	885b      	ldrh	r3, [r3, #2]
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	461a      	mov	r2, r3
 80052ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80052d2:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80052d4:	e020      	b.n	8005318 <USBD_CUSTOM_HID_Setup+0x410>
            USBD_CtlError(pdev, req);
 80052d6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80052da:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 80052de:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80052e2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80052e6:	6811      	ldr	r1, [r2, #0]
 80052e8:	6818      	ldr	r0, [r3, #0]
 80052ea:	f001 fbe8 	bl	8006abe <USBD_CtlError>
            ret = USBD_FAIL;
 80052ee:	2303      	movs	r3, #3
 80052f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
          break;
 80052f4:	e010      	b.n	8005318 <USBD_CUSTOM_HID_Setup+0x410>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80052f6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80052fa:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 80052fe:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005302:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005306:	6811      	ldr	r1, [r2, #0]
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	f001 fbd8 	bl	8006abe <USBD_CtlError>
          ret = USBD_FAIL;
 800530e:	2303      	movs	r3, #3
 8005310:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
          break;
 8005314:	e000      	b.n	8005318 <USBD_CUSTOM_HID_Setup+0x410>
          break;
 8005316:	bf00      	nop
      }
      break;
 8005318:	e00f      	b.n	800533a <USBD_CUSTOM_HID_Setup+0x432>

    default:
      USBD_CtlError(pdev, req);
 800531a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800531e:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8005322:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8005326:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800532a:	6811      	ldr	r1, [r2, #0]
 800532c:	6818      	ldr	r0, [r3, #0]
 800532e:	f001 fbc6 	bl	8006abe <USBD_CtlError>
      ret = USBD_FAIL;
 8005332:	2303      	movs	r3, #3
 8005334:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
      break;
 8005338:	bf00      	nop
  }
  return (uint8_t)ret;
 800533a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
}
 800533e:	4618      	mov	r0, r3
 8005340:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	08007890 	.word	0x08007890
 800534c:	20000070 	.word	0x20000070

08005350 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	4613      	mov	r3, r2
 800535c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	32b0      	adds	r2, #176	@ 0xb0
 8005368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800536c:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005374:	2303      	movs	r3, #3
 8005376:	e017      	b.n	80053a8 <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b03      	cmp	r3, #3
 8005382:	d110      	bne.n	80053a6 <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	7d1b      	ldrb	r3, [r3, #20]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	2201      	movs	r2, #1
 8005390:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8005392:	4b07      	ldr	r3, [pc, #28]	@ (80053b0 <USBD_CUSTOM_HID_SendReport+0x60>)
 8005394:	7819      	ldrb	r1, [r3, #0]
 8005396:	88fb      	ldrh	r3, [r7, #6]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f002 f95d 	bl	800765a <USBD_LL_Transmit>
 80053a0:	e001      	b.n	80053a6 <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e000      	b.n	80053a8 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3718      	adds	r7, #24
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	20000086 	.word	0x20000086

080053b4 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80053bc:	2181      	movs	r1, #129	@ 0x81
 80053be:	4815      	ldr	r0, [pc, #84]	@ (8005414 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80053c0:	f000 fd1d 	bl	8005dfe <USBD_GetEpDesc>
 80053c4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80053c6:	2101      	movs	r1, #1
 80053c8:	4812      	ldr	r0, [pc, #72]	@ (8005414 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80053ca:	f000 fd18 	bl	8005dfe <USBD_GetEpDesc>
 80053ce:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d009      	beq.n	80053ea <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f042 0210 	orr.w	r2, r2, #16
 80053de:	711a      	strb	r2, [r3, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2205      	movs	r2, #5
 80053e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d009      	beq.n	8005404 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f042 0202 	orr.w	r2, r2, #2
 80053f8:	711a      	strb	r2, [r3, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2205      	movs	r2, #5
 8005402:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2229      	movs	r2, #41	@ 0x29
 8005408:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800540a:	4b02      	ldr	r3, [pc, #8]	@ (8005414 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	20000044 	.word	0x20000044

08005418 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005420:	2181      	movs	r1, #129	@ 0x81
 8005422:	4815      	ldr	r0, [pc, #84]	@ (8005478 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8005424:	f000 fceb 	bl	8005dfe <USBD_GetEpDesc>
 8005428:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800542a:	2101      	movs	r1, #1
 800542c:	4812      	ldr	r0, [pc, #72]	@ (8005478 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800542e:	f000 fce6 	bl	8005dfe <USBD_GetEpDesc>
 8005432:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d009      	beq.n	800544e <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f042 0210 	orr.w	r2, r2, #16
 8005442:	711a      	strb	r2, [r3, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2205      	movs	r2, #5
 800544c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d009      	beq.n	8005468 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2200      	movs	r2, #0
 8005458:	f042 0202 	orr.w	r2, r2, #2
 800545c:	711a      	strb	r2, [r3, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2205      	movs	r2, #5
 8005466:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2229      	movs	r2, #41	@ 0x29
 800546c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800546e:	4b02      	ldr	r3, [pc, #8]	@ (8005478 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	20000044 	.word	0x20000044

0800547c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005484:	2181      	movs	r1, #129	@ 0x81
 8005486:	4815      	ldr	r0, [pc, #84]	@ (80054dc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005488:	f000 fcb9 	bl	8005dfe <USBD_GetEpDesc>
 800548c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800548e:	2101      	movs	r1, #1
 8005490:	4812      	ldr	r0, [pc, #72]	@ (80054dc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005492:	f000 fcb4 	bl	8005dfe <USBD_GetEpDesc>
 8005496:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f042 0210 	orr.w	r2, r2, #16
 80054a6:	711a      	strb	r2, [r3, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2205      	movs	r2, #5
 80054b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d009      	beq.n	80054cc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f042 0202 	orr.w	r2, r2, #2
 80054c0:	711a      	strb	r2, [r3, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2205      	movs	r2, #5
 80054ca:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2229      	movs	r2, #41	@ 0x29
 80054d0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80054d2:	4b02      	ldr	r3, [pc, #8]	@ (80054dc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	20000044 	.word	0x20000044

080054e0 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	460b      	mov	r3, r1
 80054ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	32b0      	adds	r2, #176	@ 0xb0
 80054f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054fa:	2200      	movs	r2, #0
 80054fc:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	460b      	mov	r3, r1
 8005516:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	32b0      	adds	r2, #176	@ 0xb0
 8005522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800552a:	2303      	movs	r3, #3
 800552c:	e017      	b.n	800555e <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	32b0      	adds	r2, #176	@ 0xb0
 8005538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800553c:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	33b0      	adds	r3, #176	@ 0xb0
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	7810      	ldrb	r0, [r2, #0]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	7852      	ldrb	r2, [r2, #1]
 8005558:	4611      	mov	r1, r2
 800555a:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	32b0      	adds	r2, #176	@ 0xb0
 800557a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005582:	2303      	movs	r3, #3
 8005584:	e00f      	b.n	80055a6 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	32b0      	adds	r2, #176	@ 0xb0
 8005590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005594:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8005596:	4b06      	ldr	r3, [pc, #24]	@ (80055b0 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8005598:	7819      	ldrb	r1, [r3, #0]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	2302      	movs	r3, #2
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f002 f87c 	bl	800769c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20000087 	.word	0x20000087

080055b4 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	32b0      	adds	r2, #176	@ 0xb0
 80055c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ca:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e016      	b.n	8005604 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d111      	bne.n	8005602 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	33b0      	adds	r3, #176	@ 0xb0
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	7810      	ldrb	r0, [r2, #0]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	7852      	ldrb	r2, [r2, #1]
 80055f8:	4611      	mov	r1, r2
 80055fa:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	220a      	movs	r2, #10
 8005618:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800561a:	4b03      	ldr	r3, [pc, #12]	@ (8005628 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800561c:	4618      	mov	r0, r3
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	2000007c 	.word	0x2000007c

0800562c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800563c:	2303      	movs	r3, #3
 800563e:	e009      	b.n	8005654 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	33b0      	adds	r3, #176	@ 0xb0
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	4613      	mov	r3, r2
 800566c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005674:	2303      	movs	r3, #3
 8005676:	e01f      	b.n	80056b8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	79fa      	ldrb	r2, [r7, #7]
 80056aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f001 fe9f 	bl	80073f0 <USBD_LL_Init>
 80056b2:	4603      	mov	r3, r0
 80056b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80056b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e025      	b.n	8005724 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	32ae      	adds	r2, #174	@ 0xae
 80056ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00f      	beq.n	8005714 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	32ae      	adds	r2, #174	@ 0xae
 80056fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005704:	f107 020e 	add.w	r2, r7, #14
 8005708:	4610      	mov	r0, r2
 800570a:	4798      	blx	r3
 800570c:	4602      	mov	r2, r0
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f001 fea7 	bl	8007488 <USBD_LL_Start>
 800573a:	4603      	mov	r3, r0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3708      	adds	r7, #8
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800574c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800574e:	4618      	mov	r0, r3
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b084      	sub	sp, #16
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
 8005762:	460b      	mov	r3, r1
 8005764:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005766:	2300      	movs	r3, #0
 8005768:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005770:	2b00      	cmp	r3, #0
 8005772:	d009      	beq.n	8005788 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	78fa      	ldrb	r2, [r7, #3]
 800577e:	4611      	mov	r1, r2
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	4798      	blx	r3
 8005784:	4603      	mov	r3, r0
 8005786:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005788:	7bfb      	ldrb	r3, [r7, #15]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b084      	sub	sp, #16
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	460b      	mov	r3, r1
 800579c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800579e:	2300      	movs	r3, #0
 80057a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	78fa      	ldrb	r2, [r7, #3]
 80057ac:	4611      	mov	r1, r2
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	4798      	blx	r3
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80057b8:	2303      	movs	r3, #3
 80057ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b084      	sub	sp, #16
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80057d6:	6839      	ldr	r1, [r7, #0]
 80057d8:	4618      	mov	r0, r3
 80057da:	f001 f936 	bl	8006a4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80057ec:	461a      	mov	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80057fa:	f003 031f 	and.w	r3, r3, #31
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d01a      	beq.n	8005838 <USBD_LL_SetupStage+0x72>
 8005802:	2b02      	cmp	r3, #2
 8005804:	d822      	bhi.n	800584c <USBD_LL_SetupStage+0x86>
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <USBD_LL_SetupStage+0x4a>
 800580a:	2b01      	cmp	r3, #1
 800580c:	d00a      	beq.n	8005824 <USBD_LL_SetupStage+0x5e>
 800580e:	e01d      	b.n	800584c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005816:	4619      	mov	r1, r3
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 fb63 	bl	8005ee4 <USBD_StdDevReq>
 800581e:	4603      	mov	r3, r0
 8005820:	73fb      	strb	r3, [r7, #15]
      break;
 8005822:	e020      	b.n	8005866 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800582a:	4619      	mov	r1, r3
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fbcb 	bl	8005fc8 <USBD_StdItfReq>
 8005832:	4603      	mov	r3, r0
 8005834:	73fb      	strb	r3, [r7, #15]
      break;
 8005836:	e016      	b.n	8005866 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800583e:	4619      	mov	r1, r3
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 fc2d 	bl	80060a0 <USBD_StdEPReq>
 8005846:	4603      	mov	r3, r0
 8005848:	73fb      	strb	r3, [r7, #15]
      break;
 800584a:	e00c      	b.n	8005866 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005852:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005856:	b2db      	uxtb	r3, r3
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f001 fe74 	bl	8007548 <USBD_LL_StallEP>
 8005860:	4603      	mov	r3, r0
 8005862:	73fb      	strb	r3, [r7, #15]
      break;
 8005864:	bf00      	nop
  }

  return ret;
 8005866:	7bfb      	ldrb	r3, [r7, #15]
}
 8005868:	4618      	mov	r0, r3
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	460b      	mov	r3, r1
 800587a:	607a      	str	r2, [r7, #4]
 800587c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800587e:	2300      	movs	r3, #0
 8005880:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005882:	7afb      	ldrb	r3, [r7, #11]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d16e      	bne.n	8005966 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800588e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005896:	2b03      	cmp	r3, #3
 8005898:	f040 8098 	bne.w	80059cc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d913      	bls.n	80058d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	1ad2      	subs	r2, r2, r3
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	68da      	ldr	r2, [r3, #12]
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	4293      	cmp	r3, r2
 80058c0:	bf28      	it	cs
 80058c2:	4613      	movcs	r3, r2
 80058c4:	461a      	mov	r2, r3
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f001 f9b2 	bl	8006c32 <USBD_CtlContinueRx>
 80058ce:	e07d      	b.n	80059cc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80058d6:	f003 031f 	and.w	r3, r3, #31
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d014      	beq.n	8005908 <USBD_LL_DataOutStage+0x98>
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d81d      	bhi.n	800591e <USBD_LL_DataOutStage+0xae>
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <USBD_LL_DataOutStage+0x7c>
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d003      	beq.n	80058f2 <USBD_LL_DataOutStage+0x82>
 80058ea:	e018      	b.n	800591e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80058ec:	2300      	movs	r3, #0
 80058ee:	75bb      	strb	r3, [r7, #22]
            break;
 80058f0:	e018      	b.n	8005924 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	4619      	mov	r1, r3
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 fa64 	bl	8005dca <USBD_CoreFindIF>
 8005902:	4603      	mov	r3, r0
 8005904:	75bb      	strb	r3, [r7, #22]
            break;
 8005906:	e00d      	b.n	8005924 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800590e:	b2db      	uxtb	r3, r3
 8005910:	4619      	mov	r1, r3
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 fa66 	bl	8005de4 <USBD_CoreFindEP>
 8005918:	4603      	mov	r3, r0
 800591a:	75bb      	strb	r3, [r7, #22]
            break;
 800591c:	e002      	b.n	8005924 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800591e:	2300      	movs	r3, #0
 8005920:	75bb      	strb	r3, [r7, #22]
            break;
 8005922:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005924:	7dbb      	ldrb	r3, [r7, #22]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d119      	bne.n	800595e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b03      	cmp	r3, #3
 8005934:	d113      	bne.n	800595e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005936:	7dba      	ldrb	r2, [r7, #22]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	32ae      	adds	r2, #174	@ 0xae
 800593c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00b      	beq.n	800595e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005946:	7dba      	ldrb	r2, [r7, #22]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800594e:	7dba      	ldrb	r2, [r7, #22]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	32ae      	adds	r2, #174	@ 0xae
 8005954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f001 f978 	bl	8006c54 <USBD_CtlSendStatus>
 8005964:	e032      	b.n	80059cc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005966:	7afb      	ldrb	r3, [r7, #11]
 8005968:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800596c:	b2db      	uxtb	r3, r3
 800596e:	4619      	mov	r1, r3
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 fa37 	bl	8005de4 <USBD_CoreFindEP>
 8005976:	4603      	mov	r3, r0
 8005978:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800597a:	7dbb      	ldrb	r3, [r7, #22]
 800597c:	2bff      	cmp	r3, #255	@ 0xff
 800597e:	d025      	beq.n	80059cc <USBD_LL_DataOutStage+0x15c>
 8005980:	7dbb      	ldrb	r3, [r7, #22]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d122      	bne.n	80059cc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b03      	cmp	r3, #3
 8005990:	d117      	bne.n	80059c2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005992:	7dba      	ldrb	r2, [r7, #22]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	32ae      	adds	r2, #174	@ 0xae
 8005998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00f      	beq.n	80059c2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80059a2:	7dba      	ldrb	r2, [r7, #22]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80059aa:	7dba      	ldrb	r2, [r7, #22]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	32ae      	adds	r2, #174	@ 0xae
 80059b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	7afa      	ldrb	r2, [r7, #11]
 80059b8:	4611      	mov	r1, r2
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	4798      	blx	r3
 80059be:	4603      	mov	r3, r0
 80059c0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80059c2:	7dfb      	ldrb	r3, [r7, #23]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d001      	beq.n	80059cc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80059c8:	7dfb      	ldrb	r3, [r7, #23]
 80059ca:	e000      	b.n	80059ce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3718      	adds	r7, #24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b086      	sub	sp, #24
 80059da:	af00      	add	r7, sp, #0
 80059dc:	60f8      	str	r0, [r7, #12]
 80059de:	460b      	mov	r3, r1
 80059e0:	607a      	str	r2, [r7, #4]
 80059e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80059e4:	7afb      	ldrb	r3, [r7, #11]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d16f      	bne.n	8005aca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	3314      	adds	r3, #20
 80059ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d15a      	bne.n	8005ab0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	689a      	ldr	r2, [r3, #8]
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d914      	bls.n	8005a30 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	689a      	ldr	r2, [r3, #8]
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	1ad2      	subs	r2, r2, r3
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f001 f8da 	bl	8006bd6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a22:	2300      	movs	r3, #0
 8005a24:	2200      	movs	r2, #0
 8005a26:	2100      	movs	r1, #0
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f001 fe37 	bl	800769c <USBD_LL_PrepareReceive>
 8005a2e:	e03f      	b.n	8005ab0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d11c      	bne.n	8005a76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d316      	bcc.n	8005a76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d20f      	bcs.n	8005a76 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005a56:	2200      	movs	r2, #0
 8005a58:	2100      	movs	r1, #0
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f001 f8bb 	bl	8006bd6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a68:	2300      	movs	r3, #0
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f001 fe14 	bl	800769c <USBD_LL_PrepareReceive>
 8005a74:	e01c      	b.n	8005ab0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d10f      	bne.n	8005aa2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d009      	beq.n	8005aa2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005aa2:	2180      	movs	r1, #128	@ 0x80
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f001 fd4f 	bl	8007548 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f001 f8e5 	bl	8006c7a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d03a      	beq.n	8005b30 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f7ff fe42 	bl	8005744 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005ac8:	e032      	b.n	8005b30 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005aca:	7afb      	ldrb	r3, [r7, #11]
 8005acc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 f985 	bl	8005de4 <USBD_CoreFindEP>
 8005ada:	4603      	mov	r3, r0
 8005adc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ade:	7dfb      	ldrb	r3, [r7, #23]
 8005ae0:	2bff      	cmp	r3, #255	@ 0xff
 8005ae2:	d025      	beq.n	8005b30 <USBD_LL_DataInStage+0x15a>
 8005ae4:	7dfb      	ldrb	r3, [r7, #23]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d122      	bne.n	8005b30 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	d11c      	bne.n	8005b30 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005af6:	7dfa      	ldrb	r2, [r7, #23]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	32ae      	adds	r2, #174	@ 0xae
 8005afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d014      	beq.n	8005b30 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005b06:	7dfa      	ldrb	r2, [r7, #23]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005b0e:	7dfa      	ldrb	r2, [r7, #23]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	32ae      	adds	r2, #174	@ 0xae
 8005b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	7afa      	ldrb	r2, [r7, #11]
 8005b1c:	4611      	mov	r1, r2
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	4798      	blx	r3
 8005b22:	4603      	mov	r3, r0
 8005b24:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005b26:	7dbb      	ldrb	r3, [r7, #22]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d001      	beq.n	8005b30 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005b2c:	7dbb      	ldrb	r3, [r7, #22]
 8005b2e:	e000      	b.n	8005b32 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3718      	adds	r7, #24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d014      	beq.n	8005ba0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00e      	beq.n	8005ba0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	6852      	ldr	r2, [r2, #4]
 8005b8e:	b2d2      	uxtb	r2, r2
 8005b90:	4611      	mov	r1, r2
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	4798      	blx	r3
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ba0:	2340      	movs	r3, #64	@ 0x40
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f001 fc89 	bl	80074be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2240      	movs	r2, #64	@ 0x40
 8005bb8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005bbc:	2340      	movs	r3, #64	@ 0x40
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2180      	movs	r1, #128	@ 0x80
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f001 fc7b 	bl	80074be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2240      	movs	r2, #64	@ 0x40
 8005bd2:	621a      	str	r2, [r3, #32]

  return ret;
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b083      	sub	sp, #12
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	460b      	mov	r3, r1
 8005be8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	78fa      	ldrb	r2, [r7, #3]
 8005bee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	d006      	beq.n	8005c20 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2204      	movs	r2, #4
 8005c24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b083      	sub	sp, #12
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	d106      	bne.n	8005c58 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b082      	sub	sp, #8
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b03      	cmp	r3, #3
 8005c78:	d110      	bne.n	8005c9c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00b      	beq.n	8005c9c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d005      	beq.n	8005c9c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c96:	69db      	ldr	r3, [r3, #28]
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b082      	sub	sp, #8
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	460b      	mov	r3, r1
 8005cb0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	32ae      	adds	r2, #174	@ 0xae
 8005cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e01c      	b.n	8005d02 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	d115      	bne.n	8005d00 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	32ae      	adds	r2, #174	@ 0xae
 8005cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00b      	beq.n	8005d00 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	32ae      	adds	r2, #174	@ 0xae
 8005cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	78fa      	ldrb	r2, [r7, #3]
 8005cfa:	4611      	mov	r1, r2
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b082      	sub	sp, #8
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	460b      	mov	r3, r1
 8005d14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	32ae      	adds	r2, #174	@ 0xae
 8005d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e01c      	b.n	8005d66 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b03      	cmp	r3, #3
 8005d36:	d115      	bne.n	8005d64 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	32ae      	adds	r2, #174	@ 0xae
 8005d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00b      	beq.n	8005d64 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	32ae      	adds	r2, #174	@ 0xae
 8005d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d5c:	78fa      	ldrb	r2, [r7, #3]
 8005d5e:	4611      	mov	r1, r2
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00e      	beq.n	8005dc0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	6852      	ldr	r2, [r2, #4]
 8005dae:	b2d2      	uxtb	r2, r2
 8005db0:	4611      	mov	r1, r2
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	4798      	blx	r3
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005dd6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005df0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b086      	sub	sp, #24
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	460b      	mov	r3, r1
 8005e08:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005e12:	2300      	movs	r3, #0
 8005e14:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	885b      	ldrh	r3, [r3, #2]
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	7812      	ldrb	r2, [r2, #0]
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d91f      	bls.n	8005e64 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005e2a:	e013      	b.n	8005e54 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005e2c:	f107 030a 	add.w	r3, r7, #10
 8005e30:	4619      	mov	r1, r3
 8005e32:	6978      	ldr	r0, [r7, #20]
 8005e34:	f000 f81b 	bl	8005e6e <USBD_GetNextDesc>
 8005e38:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	785b      	ldrb	r3, [r3, #1]
 8005e3e:	2b05      	cmp	r3, #5
 8005e40:	d108      	bne.n	8005e54 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	789b      	ldrb	r3, [r3, #2]
 8005e4a:	78fa      	ldrb	r2, [r7, #3]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d008      	beq.n	8005e62 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005e50:	2300      	movs	r3, #0
 8005e52:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	885b      	ldrh	r3, [r3, #2]
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	897b      	ldrh	r3, [r7, #10]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d8e5      	bhi.n	8005e2c <USBD_GetEpDesc+0x2e>
 8005e60:	e000      	b.n	8005e64 <USBD_GetEpDesc+0x66>
          break;
 8005e62:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005e64:	693b      	ldr	r3, [r7, #16]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b085      	sub	sp, #20
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	7812      	ldrb	r2, [r2, #0]
 8005e84:	4413      	add	r3, r2
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	461a      	mov	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4413      	add	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005e98:	68fb      	ldr	r3, [r7, #12]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b087      	sub	sp, #28
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005ec4:	8a3b      	ldrh	r3, [r7, #16]
 8005ec6:	021b      	lsls	r3, r3, #8
 8005ec8:	b21a      	sxth	r2, r3
 8005eca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	b21b      	sxth	r3, r3
 8005ed2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005ed4:	89fb      	ldrh	r3, [r7, #14]
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	371c      	adds	r7, #28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
	...

08005ee4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005efa:	2b40      	cmp	r3, #64	@ 0x40
 8005efc:	d005      	beq.n	8005f0a <USBD_StdDevReq+0x26>
 8005efe:	2b40      	cmp	r3, #64	@ 0x40
 8005f00:	d857      	bhi.n	8005fb2 <USBD_StdDevReq+0xce>
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00f      	beq.n	8005f26 <USBD_StdDevReq+0x42>
 8005f06:	2b20      	cmp	r3, #32
 8005f08:	d153      	bne.n	8005fb2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	32ae      	adds	r2, #174	@ 0xae
 8005f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	6839      	ldr	r1, [r7, #0]
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	4798      	blx	r3
 8005f20:	4603      	mov	r3, r0
 8005f22:	73fb      	strb	r3, [r7, #15]
      break;
 8005f24:	e04a      	b.n	8005fbc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	785b      	ldrb	r3, [r3, #1]
 8005f2a:	2b09      	cmp	r3, #9
 8005f2c:	d83b      	bhi.n	8005fa6 <USBD_StdDevReq+0xc2>
 8005f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f34 <USBD_StdDevReq+0x50>)
 8005f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f34:	08005f89 	.word	0x08005f89
 8005f38:	08005f9d 	.word	0x08005f9d
 8005f3c:	08005fa7 	.word	0x08005fa7
 8005f40:	08005f93 	.word	0x08005f93
 8005f44:	08005fa7 	.word	0x08005fa7
 8005f48:	08005f67 	.word	0x08005f67
 8005f4c:	08005f5d 	.word	0x08005f5d
 8005f50:	08005fa7 	.word	0x08005fa7
 8005f54:	08005f7f 	.word	0x08005f7f
 8005f58:	08005f71 	.word	0x08005f71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005f5c:	6839      	ldr	r1, [r7, #0]
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fa3c 	bl	80063dc <USBD_GetDescriptor>
          break;
 8005f64:	e024      	b.n	8005fb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005f66:	6839      	ldr	r1, [r7, #0]
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fbcb 	bl	8006704 <USBD_SetAddress>
          break;
 8005f6e:	e01f      	b.n	8005fb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005f70:	6839      	ldr	r1, [r7, #0]
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 fc0a 	bl	800678c <USBD_SetConfig>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	73fb      	strb	r3, [r7, #15]
          break;
 8005f7c:	e018      	b.n	8005fb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005f7e:	6839      	ldr	r1, [r7, #0]
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fcad 	bl	80068e0 <USBD_GetConfig>
          break;
 8005f86:	e013      	b.n	8005fb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005f88:	6839      	ldr	r1, [r7, #0]
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fcde 	bl	800694c <USBD_GetStatus>
          break;
 8005f90:	e00e      	b.n	8005fb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005f92:	6839      	ldr	r1, [r7, #0]
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 fd0d 	bl	80069b4 <USBD_SetFeature>
          break;
 8005f9a:	e009      	b.n	8005fb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005f9c:	6839      	ldr	r1, [r7, #0]
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 fd31 	bl	8006a06 <USBD_ClrFeature>
          break;
 8005fa4:	e004      	b.n	8005fb0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005fa6:	6839      	ldr	r1, [r7, #0]
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fd88 	bl	8006abe <USBD_CtlError>
          break;
 8005fae:	bf00      	nop
      }
      break;
 8005fb0:	e004      	b.n	8005fbc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005fb2:	6839      	ldr	r1, [r7, #0]
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fd82 	bl	8006abe <USBD_CtlError>
      break;
 8005fba:	bf00      	nop
  }

  return ret;
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop

08005fc8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005fde:	2b40      	cmp	r3, #64	@ 0x40
 8005fe0:	d005      	beq.n	8005fee <USBD_StdItfReq+0x26>
 8005fe2:	2b40      	cmp	r3, #64	@ 0x40
 8005fe4:	d852      	bhi.n	800608c <USBD_StdItfReq+0xc4>
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <USBD_StdItfReq+0x26>
 8005fea:	2b20      	cmp	r3, #32
 8005fec:	d14e      	bne.n	800608c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d840      	bhi.n	800607e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	889b      	ldrh	r3, [r3, #4]
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b01      	cmp	r3, #1
 8006004:	d836      	bhi.n	8006074 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	889b      	ldrh	r3, [r3, #4]
 800600a:	b2db      	uxtb	r3, r3
 800600c:	4619      	mov	r1, r3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7ff fedb 	bl	8005dca <USBD_CoreFindIF>
 8006014:	4603      	mov	r3, r0
 8006016:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006018:	7bbb      	ldrb	r3, [r7, #14]
 800601a:	2bff      	cmp	r3, #255	@ 0xff
 800601c:	d01d      	beq.n	800605a <USBD_StdItfReq+0x92>
 800601e:	7bbb      	ldrb	r3, [r7, #14]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d11a      	bne.n	800605a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006024:	7bba      	ldrb	r2, [r7, #14]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	32ae      	adds	r2, #174	@ 0xae
 800602a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00f      	beq.n	8006054 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006034:	7bba      	ldrb	r2, [r7, #14]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800603c:	7bba      	ldrb	r2, [r7, #14]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	32ae      	adds	r2, #174	@ 0xae
 8006042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	6839      	ldr	r1, [r7, #0]
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	4798      	blx	r3
 800604e:	4603      	mov	r3, r0
 8006050:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006052:	e004      	b.n	800605e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006054:	2303      	movs	r3, #3
 8006056:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006058:	e001      	b.n	800605e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800605a:	2303      	movs	r3, #3
 800605c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	88db      	ldrh	r3, [r3, #6]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d110      	bne.n	8006088 <USBD_StdItfReq+0xc0>
 8006066:	7bfb      	ldrb	r3, [r7, #15]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10d      	bne.n	8006088 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fdf1 	bl	8006c54 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006072:	e009      	b.n	8006088 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006074:	6839      	ldr	r1, [r7, #0]
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fd21 	bl	8006abe <USBD_CtlError>
          break;
 800607c:	e004      	b.n	8006088 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800607e:	6839      	ldr	r1, [r7, #0]
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fd1c 	bl	8006abe <USBD_CtlError>
          break;
 8006086:	e000      	b.n	800608a <USBD_StdItfReq+0xc2>
          break;
 8006088:	bf00      	nop
      }
      break;
 800608a:	e004      	b.n	8006096 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800608c:	6839      	ldr	r1, [r7, #0]
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fd15 	bl	8006abe <USBD_CtlError>
      break;
 8006094:	bf00      	nop
  }

  return ret;
 8006096:	7bfb      	ldrb	r3, [r7, #15]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	889b      	ldrh	r3, [r3, #4]
 80060b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80060bc:	2b40      	cmp	r3, #64	@ 0x40
 80060be:	d007      	beq.n	80060d0 <USBD_StdEPReq+0x30>
 80060c0:	2b40      	cmp	r3, #64	@ 0x40
 80060c2:	f200 817f 	bhi.w	80063c4 <USBD_StdEPReq+0x324>
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d02a      	beq.n	8006120 <USBD_StdEPReq+0x80>
 80060ca:	2b20      	cmp	r3, #32
 80060cc:	f040 817a 	bne.w	80063c4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80060d0:	7bbb      	ldrb	r3, [r7, #14]
 80060d2:	4619      	mov	r1, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7ff fe85 	bl	8005de4 <USBD_CoreFindEP>
 80060da:	4603      	mov	r3, r0
 80060dc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80060de:	7b7b      	ldrb	r3, [r7, #13]
 80060e0:	2bff      	cmp	r3, #255	@ 0xff
 80060e2:	f000 8174 	beq.w	80063ce <USBD_StdEPReq+0x32e>
 80060e6:	7b7b      	ldrb	r3, [r7, #13]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f040 8170 	bne.w	80063ce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80060ee:	7b7a      	ldrb	r2, [r7, #13]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80060f6:	7b7a      	ldrb	r2, [r7, #13]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	32ae      	adds	r2, #174	@ 0xae
 80060fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 8163 	beq.w	80063ce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006108:	7b7a      	ldrb	r2, [r7, #13]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	32ae      	adds	r2, #174	@ 0xae
 800610e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	4798      	blx	r3
 800611a:	4603      	mov	r3, r0
 800611c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800611e:	e156      	b.n	80063ce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	785b      	ldrb	r3, [r3, #1]
 8006124:	2b03      	cmp	r3, #3
 8006126:	d008      	beq.n	800613a <USBD_StdEPReq+0x9a>
 8006128:	2b03      	cmp	r3, #3
 800612a:	f300 8145 	bgt.w	80063b8 <USBD_StdEPReq+0x318>
 800612e:	2b00      	cmp	r3, #0
 8006130:	f000 809b 	beq.w	800626a <USBD_StdEPReq+0x1ca>
 8006134:	2b01      	cmp	r3, #1
 8006136:	d03c      	beq.n	80061b2 <USBD_StdEPReq+0x112>
 8006138:	e13e      	b.n	80063b8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b02      	cmp	r3, #2
 8006144:	d002      	beq.n	800614c <USBD_StdEPReq+0xac>
 8006146:	2b03      	cmp	r3, #3
 8006148:	d016      	beq.n	8006178 <USBD_StdEPReq+0xd8>
 800614a:	e02c      	b.n	80061a6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800614c:	7bbb      	ldrb	r3, [r7, #14]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00d      	beq.n	800616e <USBD_StdEPReq+0xce>
 8006152:	7bbb      	ldrb	r3, [r7, #14]
 8006154:	2b80      	cmp	r3, #128	@ 0x80
 8006156:	d00a      	beq.n	800616e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006158:	7bbb      	ldrb	r3, [r7, #14]
 800615a:	4619      	mov	r1, r3
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f001 f9f3 	bl	8007548 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006162:	2180      	movs	r1, #128	@ 0x80
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f001 f9ef 	bl	8007548 <USBD_LL_StallEP>
 800616a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800616c:	e020      	b.n	80061b0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800616e:	6839      	ldr	r1, [r7, #0]
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fca4 	bl	8006abe <USBD_CtlError>
              break;
 8006176:	e01b      	b.n	80061b0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	885b      	ldrh	r3, [r3, #2]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10e      	bne.n	800619e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006180:	7bbb      	ldrb	r3, [r7, #14]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00b      	beq.n	800619e <USBD_StdEPReq+0xfe>
 8006186:	7bbb      	ldrb	r3, [r7, #14]
 8006188:	2b80      	cmp	r3, #128	@ 0x80
 800618a:	d008      	beq.n	800619e <USBD_StdEPReq+0xfe>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	88db      	ldrh	r3, [r3, #6]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d104      	bne.n	800619e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006194:	7bbb      	ldrb	r3, [r7, #14]
 8006196:	4619      	mov	r1, r3
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f001 f9d5 	bl	8007548 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fd58 	bl	8006c54 <USBD_CtlSendStatus>

              break;
 80061a4:	e004      	b.n	80061b0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80061a6:	6839      	ldr	r1, [r7, #0]
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 fc88 	bl	8006abe <USBD_CtlError>
              break;
 80061ae:	bf00      	nop
          }
          break;
 80061b0:	e107      	b.n	80063c2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d002      	beq.n	80061c4 <USBD_StdEPReq+0x124>
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d016      	beq.n	80061f0 <USBD_StdEPReq+0x150>
 80061c2:	e04b      	b.n	800625c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061c4:	7bbb      	ldrb	r3, [r7, #14]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00d      	beq.n	80061e6 <USBD_StdEPReq+0x146>
 80061ca:	7bbb      	ldrb	r3, [r7, #14]
 80061cc:	2b80      	cmp	r3, #128	@ 0x80
 80061ce:	d00a      	beq.n	80061e6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80061d0:	7bbb      	ldrb	r3, [r7, #14]
 80061d2:	4619      	mov	r1, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f001 f9b7 	bl	8007548 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80061da:	2180      	movs	r1, #128	@ 0x80
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f001 f9b3 	bl	8007548 <USBD_LL_StallEP>
 80061e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80061e4:	e040      	b.n	8006268 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80061e6:	6839      	ldr	r1, [r7, #0]
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 fc68 	bl	8006abe <USBD_CtlError>
              break;
 80061ee:	e03b      	b.n	8006268 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	885b      	ldrh	r3, [r3, #2]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d136      	bne.n	8006266 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80061f8:	7bbb      	ldrb	r3, [r7, #14]
 80061fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d004      	beq.n	800620c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006202:	7bbb      	ldrb	r3, [r7, #14]
 8006204:	4619      	mov	r1, r3
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f001 f9bd 	bl	8007586 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fd21 	bl	8006c54 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006212:	7bbb      	ldrb	r3, [r7, #14]
 8006214:	4619      	mov	r1, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7ff fde4 	bl	8005de4 <USBD_CoreFindEP>
 800621c:	4603      	mov	r3, r0
 800621e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006220:	7b7b      	ldrb	r3, [r7, #13]
 8006222:	2bff      	cmp	r3, #255	@ 0xff
 8006224:	d01f      	beq.n	8006266 <USBD_StdEPReq+0x1c6>
 8006226:	7b7b      	ldrb	r3, [r7, #13]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d11c      	bne.n	8006266 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800622c:	7b7a      	ldrb	r2, [r7, #13]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006234:	7b7a      	ldrb	r2, [r7, #13]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	32ae      	adds	r2, #174	@ 0xae
 800623a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d010      	beq.n	8006266 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006244:	7b7a      	ldrb	r2, [r7, #13]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	32ae      	adds	r2, #174	@ 0xae
 800624a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	6839      	ldr	r1, [r7, #0]
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	4798      	blx	r3
 8006256:	4603      	mov	r3, r0
 8006258:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800625a:	e004      	b.n	8006266 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800625c:	6839      	ldr	r1, [r7, #0]
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fc2d 	bl	8006abe <USBD_CtlError>
              break;
 8006264:	e000      	b.n	8006268 <USBD_StdEPReq+0x1c8>
              break;
 8006266:	bf00      	nop
          }
          break;
 8006268:	e0ab      	b.n	80063c2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b02      	cmp	r3, #2
 8006274:	d002      	beq.n	800627c <USBD_StdEPReq+0x1dc>
 8006276:	2b03      	cmp	r3, #3
 8006278:	d032      	beq.n	80062e0 <USBD_StdEPReq+0x240>
 800627a:	e097      	b.n	80063ac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800627c:	7bbb      	ldrb	r3, [r7, #14]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d007      	beq.n	8006292 <USBD_StdEPReq+0x1f2>
 8006282:	7bbb      	ldrb	r3, [r7, #14]
 8006284:	2b80      	cmp	r3, #128	@ 0x80
 8006286:	d004      	beq.n	8006292 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006288:	6839      	ldr	r1, [r7, #0]
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fc17 	bl	8006abe <USBD_CtlError>
                break;
 8006290:	e091      	b.n	80063b6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006292:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006296:	2b00      	cmp	r3, #0
 8006298:	da0b      	bge.n	80062b2 <USBD_StdEPReq+0x212>
 800629a:	7bbb      	ldrb	r3, [r7, #14]
 800629c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80062a0:	4613      	mov	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	3310      	adds	r3, #16
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	4413      	add	r3, r2
 80062ae:	3304      	adds	r3, #4
 80062b0:	e00b      	b.n	80062ca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80062b2:	7bbb      	ldrb	r3, [r7, #14]
 80062b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062b8:	4613      	mov	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	4413      	add	r3, r2
 80062c8:	3304      	adds	r3, #4
 80062ca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2200      	movs	r2, #0
 80062d0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	2202      	movs	r2, #2
 80062d6:	4619      	mov	r1, r3
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 fc61 	bl	8006ba0 <USBD_CtlSendData>
              break;
 80062de:	e06a      	b.n	80063b6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80062e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	da11      	bge.n	800630c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80062e8:	7bbb      	ldrb	r3, [r7, #14]
 80062ea:	f003 020f 	and.w	r2, r3, #15
 80062ee:	6879      	ldr	r1, [r7, #4]
 80062f0:	4613      	mov	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	440b      	add	r3, r1
 80062fa:	3324      	adds	r3, #36	@ 0x24
 80062fc:	881b      	ldrh	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d117      	bne.n	8006332 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006302:	6839      	ldr	r1, [r7, #0]
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 fbda 	bl	8006abe <USBD_CtlError>
                  break;
 800630a:	e054      	b.n	80063b6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800630c:	7bbb      	ldrb	r3, [r7, #14]
 800630e:	f003 020f 	and.w	r2, r3, #15
 8006312:	6879      	ldr	r1, [r7, #4]
 8006314:	4613      	mov	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4413      	add	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	440b      	add	r3, r1
 800631e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006322:	881b      	ldrh	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d104      	bne.n	8006332 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006328:	6839      	ldr	r1, [r7, #0]
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fbc7 	bl	8006abe <USBD_CtlError>
                  break;
 8006330:	e041      	b.n	80063b6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006332:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006336:	2b00      	cmp	r3, #0
 8006338:	da0b      	bge.n	8006352 <USBD_StdEPReq+0x2b2>
 800633a:	7bbb      	ldrb	r3, [r7, #14]
 800633c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006340:	4613      	mov	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	3310      	adds	r3, #16
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	4413      	add	r3, r2
 800634e:	3304      	adds	r3, #4
 8006350:	e00b      	b.n	800636a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006352:	7bbb      	ldrb	r3, [r7, #14]
 8006354:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006358:	4613      	mov	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4413      	add	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	4413      	add	r3, r2
 8006368:	3304      	adds	r3, #4
 800636a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800636c:	7bbb      	ldrb	r3, [r7, #14]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <USBD_StdEPReq+0x2d8>
 8006372:	7bbb      	ldrb	r3, [r7, #14]
 8006374:	2b80      	cmp	r3, #128	@ 0x80
 8006376:	d103      	bne.n	8006380 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2200      	movs	r2, #0
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	e00e      	b.n	800639e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006380:	7bbb      	ldrb	r3, [r7, #14]
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f001 f91d 	bl	80075c4 <USBD_LL_IsStallEP>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d003      	beq.n	8006398 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	2201      	movs	r2, #1
 8006394:	601a      	str	r2, [r3, #0]
 8006396:	e002      	b.n	800639e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	2200      	movs	r2, #0
 800639c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2202      	movs	r2, #2
 80063a2:	4619      	mov	r1, r3
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 fbfb 	bl	8006ba0 <USBD_CtlSendData>
              break;
 80063aa:	e004      	b.n	80063b6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80063ac:	6839      	ldr	r1, [r7, #0]
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fb85 	bl	8006abe <USBD_CtlError>
              break;
 80063b4:	bf00      	nop
          }
          break;
 80063b6:	e004      	b.n	80063c2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80063b8:	6839      	ldr	r1, [r7, #0]
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fb7f 	bl	8006abe <USBD_CtlError>
          break;
 80063c0:	bf00      	nop
      }
      break;
 80063c2:	e005      	b.n	80063d0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80063c4:	6839      	ldr	r1, [r7, #0]
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fb79 	bl	8006abe <USBD_CtlError>
      break;
 80063cc:	e000      	b.n	80063d0 <USBD_StdEPReq+0x330>
      break;
 80063ce:	bf00      	nop
  }

  return ret;
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
	...

080063dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80063ea:	2300      	movs	r3, #0
 80063ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	885b      	ldrh	r3, [r3, #2]
 80063f6:	0a1b      	lsrs	r3, r3, #8
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	3b01      	subs	r3, #1
 80063fc:	2b0e      	cmp	r3, #14
 80063fe:	f200 8152 	bhi.w	80066a6 <USBD_GetDescriptor+0x2ca>
 8006402:	a201      	add	r2, pc, #4	@ (adr r2, 8006408 <USBD_GetDescriptor+0x2c>)
 8006404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006408:	08006479 	.word	0x08006479
 800640c:	08006491 	.word	0x08006491
 8006410:	080064d1 	.word	0x080064d1
 8006414:	080066a7 	.word	0x080066a7
 8006418:	080066a7 	.word	0x080066a7
 800641c:	08006647 	.word	0x08006647
 8006420:	08006673 	.word	0x08006673
 8006424:	080066a7 	.word	0x080066a7
 8006428:	080066a7 	.word	0x080066a7
 800642c:	080066a7 	.word	0x080066a7
 8006430:	080066a7 	.word	0x080066a7
 8006434:	080066a7 	.word	0x080066a7
 8006438:	080066a7 	.word	0x080066a7
 800643c:	080066a7 	.word	0x080066a7
 8006440:	08006445 	.word	0x08006445
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800644a:	69db      	ldr	r3, [r3, #28]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00b      	beq.n	8006468 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006456:	69db      	ldr	r3, [r3, #28]
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	7c12      	ldrb	r2, [r2, #16]
 800645c:	f107 0108 	add.w	r1, r7, #8
 8006460:	4610      	mov	r0, r2
 8006462:	4798      	blx	r3
 8006464:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006466:	e126      	b.n	80066b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006468:	6839      	ldr	r1, [r7, #0]
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fb27 	bl	8006abe <USBD_CtlError>
        err++;
 8006470:	7afb      	ldrb	r3, [r7, #11]
 8006472:	3301      	adds	r3, #1
 8006474:	72fb      	strb	r3, [r7, #11]
      break;
 8006476:	e11e      	b.n	80066b6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	7c12      	ldrb	r2, [r2, #16]
 8006484:	f107 0108 	add.w	r1, r7, #8
 8006488:	4610      	mov	r0, r2
 800648a:	4798      	blx	r3
 800648c:	60f8      	str	r0, [r7, #12]
      break;
 800648e:	e112      	b.n	80066b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	7c1b      	ldrb	r3, [r3, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10d      	bne.n	80064b4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800649e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a0:	f107 0208 	add.w	r2, r7, #8
 80064a4:	4610      	mov	r0, r2
 80064a6:	4798      	blx	r3
 80064a8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	3301      	adds	r3, #1
 80064ae:	2202      	movs	r2, #2
 80064b0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80064b2:	e100      	b.n	80066b6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064bc:	f107 0208 	add.w	r2, r7, #8
 80064c0:	4610      	mov	r0, r2
 80064c2:	4798      	blx	r3
 80064c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	3301      	adds	r3, #1
 80064ca:	2202      	movs	r2, #2
 80064cc:	701a      	strb	r2, [r3, #0]
      break;
 80064ce:	e0f2      	b.n	80066b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	885b      	ldrh	r3, [r3, #2]
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b05      	cmp	r3, #5
 80064d8:	f200 80ac 	bhi.w	8006634 <USBD_GetDescriptor+0x258>
 80064dc:	a201      	add	r2, pc, #4	@ (adr r2, 80064e4 <USBD_GetDescriptor+0x108>)
 80064de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e2:	bf00      	nop
 80064e4:	080064fd 	.word	0x080064fd
 80064e8:	08006531 	.word	0x08006531
 80064ec:	08006565 	.word	0x08006565
 80064f0:	08006599 	.word	0x08006599
 80064f4:	080065cd 	.word	0x080065cd
 80064f8:	08006601 	.word	0x08006601
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00b      	beq.n	8006520 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	7c12      	ldrb	r2, [r2, #16]
 8006514:	f107 0108 	add.w	r1, r7, #8
 8006518:	4610      	mov	r0, r2
 800651a:	4798      	blx	r3
 800651c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800651e:	e091      	b.n	8006644 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006520:	6839      	ldr	r1, [r7, #0]
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 facb 	bl	8006abe <USBD_CtlError>
            err++;
 8006528:	7afb      	ldrb	r3, [r7, #11]
 800652a:	3301      	adds	r3, #1
 800652c:	72fb      	strb	r3, [r7, #11]
          break;
 800652e:	e089      	b.n	8006644 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00b      	beq.n	8006554 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	7c12      	ldrb	r2, [r2, #16]
 8006548:	f107 0108 	add.w	r1, r7, #8
 800654c:	4610      	mov	r0, r2
 800654e:	4798      	blx	r3
 8006550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006552:	e077      	b.n	8006644 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006554:	6839      	ldr	r1, [r7, #0]
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fab1 	bl	8006abe <USBD_CtlError>
            err++;
 800655c:	7afb      	ldrb	r3, [r7, #11]
 800655e:	3301      	adds	r3, #1
 8006560:	72fb      	strb	r3, [r7, #11]
          break;
 8006562:	e06f      	b.n	8006644 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00b      	beq.n	8006588 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	7c12      	ldrb	r2, [r2, #16]
 800657c:	f107 0108 	add.w	r1, r7, #8
 8006580:	4610      	mov	r0, r2
 8006582:	4798      	blx	r3
 8006584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006586:	e05d      	b.n	8006644 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006588:	6839      	ldr	r1, [r7, #0]
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fa97 	bl	8006abe <USBD_CtlError>
            err++;
 8006590:	7afb      	ldrb	r3, [r7, #11]
 8006592:	3301      	adds	r3, #1
 8006594:	72fb      	strb	r3, [r7, #11]
          break;
 8006596:	e055      	b.n	8006644 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00b      	beq.n	80065bc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	7c12      	ldrb	r2, [r2, #16]
 80065b0:	f107 0108 	add.w	r1, r7, #8
 80065b4:	4610      	mov	r0, r2
 80065b6:	4798      	blx	r3
 80065b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065ba:	e043      	b.n	8006644 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80065bc:	6839      	ldr	r1, [r7, #0]
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 fa7d 	bl	8006abe <USBD_CtlError>
            err++;
 80065c4:	7afb      	ldrb	r3, [r7, #11]
 80065c6:	3301      	adds	r3, #1
 80065c8:	72fb      	strb	r3, [r7, #11]
          break;
 80065ca:	e03b      	b.n	8006644 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00b      	beq.n	80065f0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	7c12      	ldrb	r2, [r2, #16]
 80065e4:	f107 0108 	add.w	r1, r7, #8
 80065e8:	4610      	mov	r0, r2
 80065ea:	4798      	blx	r3
 80065ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065ee:	e029      	b.n	8006644 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80065f0:	6839      	ldr	r1, [r7, #0]
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 fa63 	bl	8006abe <USBD_CtlError>
            err++;
 80065f8:	7afb      	ldrb	r3, [r7, #11]
 80065fa:	3301      	adds	r3, #1
 80065fc:	72fb      	strb	r3, [r7, #11]
          break;
 80065fe:	e021      	b.n	8006644 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00b      	beq.n	8006624 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	7c12      	ldrb	r2, [r2, #16]
 8006618:	f107 0108 	add.w	r1, r7, #8
 800661c:	4610      	mov	r0, r2
 800661e:	4798      	blx	r3
 8006620:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006622:	e00f      	b.n	8006644 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006624:	6839      	ldr	r1, [r7, #0]
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fa49 	bl	8006abe <USBD_CtlError>
            err++;
 800662c:	7afb      	ldrb	r3, [r7, #11]
 800662e:	3301      	adds	r3, #1
 8006630:	72fb      	strb	r3, [r7, #11]
          break;
 8006632:	e007      	b.n	8006644 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006634:	6839      	ldr	r1, [r7, #0]
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fa41 	bl	8006abe <USBD_CtlError>
          err++;
 800663c:	7afb      	ldrb	r3, [r7, #11]
 800663e:	3301      	adds	r3, #1
 8006640:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006642:	bf00      	nop
      }
      break;
 8006644:	e037      	b.n	80066b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	7c1b      	ldrb	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d109      	bne.n	8006662 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006656:	f107 0208 	add.w	r2, r7, #8
 800665a:	4610      	mov	r0, r2
 800665c:	4798      	blx	r3
 800665e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006660:	e029      	b.n	80066b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006662:	6839      	ldr	r1, [r7, #0]
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fa2a 	bl	8006abe <USBD_CtlError>
        err++;
 800666a:	7afb      	ldrb	r3, [r7, #11]
 800666c:	3301      	adds	r3, #1
 800666e:	72fb      	strb	r3, [r7, #11]
      break;
 8006670:	e021      	b.n	80066b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	7c1b      	ldrb	r3, [r3, #16]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10d      	bne.n	8006696 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006682:	f107 0208 	add.w	r2, r7, #8
 8006686:	4610      	mov	r0, r2
 8006688:	4798      	blx	r3
 800668a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	3301      	adds	r3, #1
 8006690:	2207      	movs	r2, #7
 8006692:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006694:	e00f      	b.n	80066b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006696:	6839      	ldr	r1, [r7, #0]
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 fa10 	bl	8006abe <USBD_CtlError>
        err++;
 800669e:	7afb      	ldrb	r3, [r7, #11]
 80066a0:	3301      	adds	r3, #1
 80066a2:	72fb      	strb	r3, [r7, #11]
      break;
 80066a4:	e007      	b.n	80066b6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fa08 	bl	8006abe <USBD_CtlError>
      err++;
 80066ae:	7afb      	ldrb	r3, [r7, #11]
 80066b0:	3301      	adds	r3, #1
 80066b2:	72fb      	strb	r3, [r7, #11]
      break;
 80066b4:	bf00      	nop
  }

  if (err != 0U)
 80066b6:	7afb      	ldrb	r3, [r7, #11]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d11e      	bne.n	80066fa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	88db      	ldrh	r3, [r3, #6]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d016      	beq.n	80066f2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80066c4:	893b      	ldrh	r3, [r7, #8]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00e      	beq.n	80066e8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	88da      	ldrh	r2, [r3, #6]
 80066ce:	893b      	ldrh	r3, [r7, #8]
 80066d0:	4293      	cmp	r3, r2
 80066d2:	bf28      	it	cs
 80066d4:	4613      	movcs	r3, r2
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80066da:	893b      	ldrh	r3, [r7, #8]
 80066dc:	461a      	mov	r2, r3
 80066de:	68f9      	ldr	r1, [r7, #12]
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fa5d 	bl	8006ba0 <USBD_CtlSendData>
 80066e6:	e009      	b.n	80066fc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80066e8:	6839      	ldr	r1, [r7, #0]
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f9e7 	bl	8006abe <USBD_CtlError>
 80066f0:	e004      	b.n	80066fc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 faae 	bl	8006c54 <USBD_CtlSendStatus>
 80066f8:	e000      	b.n	80066fc <USBD_GetDescriptor+0x320>
    return;
 80066fa:	bf00      	nop
  }
}
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop

08006704 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	889b      	ldrh	r3, [r3, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d131      	bne.n	800677a <USBD_SetAddress+0x76>
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	88db      	ldrh	r3, [r3, #6]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d12d      	bne.n	800677a <USBD_SetAddress+0x76>
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	885b      	ldrh	r3, [r3, #2]
 8006722:	2b7f      	cmp	r3, #127	@ 0x7f
 8006724:	d829      	bhi.n	800677a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	885b      	ldrh	r3, [r3, #2]
 800672a:	b2db      	uxtb	r3, r3
 800672c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006730:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b03      	cmp	r3, #3
 800673c:	d104      	bne.n	8006748 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800673e:	6839      	ldr	r1, [r7, #0]
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f9bc 	bl	8006abe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006746:	e01d      	b.n	8006784 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	7bfa      	ldrb	r2, [r7, #15]
 800674c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006750:	7bfb      	ldrb	r3, [r7, #15]
 8006752:	4619      	mov	r1, r3
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 ff61 	bl	800761c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fa7a 	bl	8006c54 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006760:	7bfb      	ldrb	r3, [r7, #15]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d004      	beq.n	8006770 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2202      	movs	r2, #2
 800676a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800676e:	e009      	b.n	8006784 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006778:	e004      	b.n	8006784 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800677a:	6839      	ldr	r1, [r7, #0]
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f99e 	bl	8006abe <USBD_CtlError>
  }
}
 8006782:	bf00      	nop
 8006784:	bf00      	nop
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	885b      	ldrh	r3, [r3, #2]
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	4b4e      	ldr	r3, [pc, #312]	@ (80068dc <USBD_SetConfig+0x150>)
 80067a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80067a4:	4b4d      	ldr	r3, [pc, #308]	@ (80068dc <USBD_SetConfig+0x150>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d905      	bls.n	80067b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f985 	bl	8006abe <USBD_CtlError>
    return USBD_FAIL;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e08c      	b.n	80068d2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d002      	beq.n	80067ca <USBD_SetConfig+0x3e>
 80067c4:	2b03      	cmp	r3, #3
 80067c6:	d029      	beq.n	800681c <USBD_SetConfig+0x90>
 80067c8:	e075      	b.n	80068b6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80067ca:	4b44      	ldr	r3, [pc, #272]	@ (80068dc <USBD_SetConfig+0x150>)
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d020      	beq.n	8006814 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80067d2:	4b42      	ldr	r3, [pc, #264]	@ (80068dc <USBD_SetConfig+0x150>)
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	461a      	mov	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80067dc:	4b3f      	ldr	r3, [pc, #252]	@ (80068dc <USBD_SetConfig+0x150>)
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	4619      	mov	r1, r3
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7fe ffb9 	bl	800575a <USBD_SetClassConfig>
 80067e8:	4603      	mov	r3, r0
 80067ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80067ec:	7bfb      	ldrb	r3, [r7, #15]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d008      	beq.n	8006804 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f962 	bl	8006abe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2202      	movs	r2, #2
 80067fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006802:	e065      	b.n	80068d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fa25 	bl	8006c54 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2203      	movs	r2, #3
 800680e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006812:	e05d      	b.n	80068d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fa1d 	bl	8006c54 <USBD_CtlSendStatus>
      break;
 800681a:	e059      	b.n	80068d0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800681c:	4b2f      	ldr	r3, [pc, #188]	@ (80068dc <USBD_SetConfig+0x150>)
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d112      	bne.n	800684a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2202      	movs	r2, #2
 8006828:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800682c:	4b2b      	ldr	r3, [pc, #172]	@ (80068dc <USBD_SetConfig+0x150>)
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	461a      	mov	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006836:	4b29      	ldr	r3, [pc, #164]	@ (80068dc <USBD_SetConfig+0x150>)
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	4619      	mov	r1, r3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7fe ffa8 	bl	8005792 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fa06 	bl	8006c54 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006848:	e042      	b.n	80068d0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800684a:	4b24      	ldr	r3, [pc, #144]	@ (80068dc <USBD_SetConfig+0x150>)
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	429a      	cmp	r2, r3
 8006856:	d02a      	beq.n	80068ae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	b2db      	uxtb	r3, r3
 800685e:	4619      	mov	r1, r3
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f7fe ff96 	bl	8005792 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006866:	4b1d      	ldr	r3, [pc, #116]	@ (80068dc <USBD_SetConfig+0x150>)
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	461a      	mov	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006870:	4b1a      	ldr	r3, [pc, #104]	@ (80068dc <USBD_SetConfig+0x150>)
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	4619      	mov	r1, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7fe ff6f 	bl	800575a <USBD_SetClassConfig>
 800687c:	4603      	mov	r3, r0
 800687e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006880:	7bfb      	ldrb	r3, [r7, #15]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00f      	beq.n	80068a6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006886:	6839      	ldr	r1, [r7, #0]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f918 	bl	8006abe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	b2db      	uxtb	r3, r3
 8006894:	4619      	mov	r1, r3
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7fe ff7b 	bl	8005792 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80068a4:	e014      	b.n	80068d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f9d4 	bl	8006c54 <USBD_CtlSendStatus>
      break;
 80068ac:	e010      	b.n	80068d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f9d0 	bl	8006c54 <USBD_CtlSendStatus>
      break;
 80068b4:	e00c      	b.n	80068d0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80068b6:	6839      	ldr	r1, [r7, #0]
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f900 	bl	8006abe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80068be:	4b07      	ldr	r3, [pc, #28]	@ (80068dc <USBD_SetConfig+0x150>)
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f7fe ff64 	bl	8005792 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80068ca:	2303      	movs	r3, #3
 80068cc:	73fb      	strb	r3, [r7, #15]
      break;
 80068ce:	bf00      	nop
  }

  return ret;
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	200001e8 	.word	0x200001e8

080068e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	88db      	ldrh	r3, [r3, #6]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d004      	beq.n	80068fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f8e2 	bl	8006abe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80068fa:	e023      	b.n	8006944 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b02      	cmp	r3, #2
 8006906:	dc02      	bgt.n	800690e <USBD_GetConfig+0x2e>
 8006908:	2b00      	cmp	r3, #0
 800690a:	dc03      	bgt.n	8006914 <USBD_GetConfig+0x34>
 800690c:	e015      	b.n	800693a <USBD_GetConfig+0x5a>
 800690e:	2b03      	cmp	r3, #3
 8006910:	d00b      	beq.n	800692a <USBD_GetConfig+0x4a>
 8006912:	e012      	b.n	800693a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	3308      	adds	r3, #8
 800691e:	2201      	movs	r2, #1
 8006920:	4619      	mov	r1, r3
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f93c 	bl	8006ba0 <USBD_CtlSendData>
        break;
 8006928:	e00c      	b.n	8006944 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	3304      	adds	r3, #4
 800692e:	2201      	movs	r2, #1
 8006930:	4619      	mov	r1, r3
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f934 	bl	8006ba0 <USBD_CtlSendData>
        break;
 8006938:	e004      	b.n	8006944 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800693a:	6839      	ldr	r1, [r7, #0]
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 f8be 	bl	8006abe <USBD_CtlError>
        break;
 8006942:	bf00      	nop
}
 8006944:	bf00      	nop
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800695c:	b2db      	uxtb	r3, r3
 800695e:	3b01      	subs	r3, #1
 8006960:	2b02      	cmp	r3, #2
 8006962:	d81e      	bhi.n	80069a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	88db      	ldrh	r3, [r3, #6]
 8006968:	2b02      	cmp	r3, #2
 800696a:	d004      	beq.n	8006976 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f8a5 	bl	8006abe <USBD_CtlError>
        break;
 8006974:	e01a      	b.n	80069ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006982:	2b00      	cmp	r3, #0
 8006984:	d005      	beq.n	8006992 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	f043 0202 	orr.w	r2, r3, #2
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	330c      	adds	r3, #12
 8006996:	2202      	movs	r2, #2
 8006998:	4619      	mov	r1, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f900 	bl	8006ba0 <USBD_CtlSendData>
      break;
 80069a0:	e004      	b.n	80069ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f88a 	bl	8006abe <USBD_CtlError>
      break;
 80069aa:	bf00      	nop
  }
}
 80069ac:	bf00      	nop
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	885b      	ldrh	r3, [r3, #2]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d107      	bne.n	80069d6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f940 	bl	8006c54 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80069d4:	e013      	b.n	80069fe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	885b      	ldrh	r3, [r3, #2]
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d10b      	bne.n	80069f6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	889b      	ldrh	r3, [r3, #4]
 80069e2:	0a1b      	lsrs	r3, r3, #8
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f930 	bl	8006c54 <USBD_CtlSendStatus>
}
 80069f4:	e003      	b.n	80069fe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f860 	bl	8006abe <USBD_CtlError>
}
 80069fe:	bf00      	nop
 8006a00:	3708      	adds	r7, #8
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b082      	sub	sp, #8
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d80b      	bhi.n	8006a36 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	885b      	ldrh	r3, [r3, #2]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d10c      	bne.n	8006a40 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f910 	bl	8006c54 <USBD_CtlSendStatus>
      }
      break;
 8006a34:	e004      	b.n	8006a40 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f840 	bl	8006abe <USBD_CtlError>
      break;
 8006a3e:	e000      	b.n	8006a42 <USBD_ClrFeature+0x3c>
      break;
 8006a40:	bf00      	nop
  }
}
 8006a42:	bf00      	nop
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b084      	sub	sp, #16
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
 8006a52:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	781a      	ldrb	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	3301      	adds	r3, #1
 8006a64:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	781a      	ldrb	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	3301      	adds	r3, #1
 8006a72:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f7ff fa16 	bl	8005ea6 <SWAPBYTE>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	3301      	adds	r3, #1
 8006a86:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f7ff fa09 	bl	8005ea6 <SWAPBYTE>
 8006a94:	4603      	mov	r3, r0
 8006a96:	461a      	mov	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f7ff f9fc 	bl	8005ea6 <SWAPBYTE>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	80da      	strh	r2, [r3, #6]
}
 8006ab6:	bf00      	nop
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b082      	sub	sp, #8
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ac8:	2180      	movs	r1, #128	@ 0x80
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fd3c 	bl	8007548 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fd38 	bl	8007548 <USBD_LL_StallEP>
}
 8006ad8:	bf00      	nop
 8006ada:	3708      	adds	r7, #8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006aec:	2300      	movs	r3, #0
 8006aee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d036      	beq.n	8006b64 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006afa:	6938      	ldr	r0, [r7, #16]
 8006afc:	f000 f836 	bl	8006b6c <USBD_GetLen>
 8006b00:	4603      	mov	r3, r0
 8006b02:	3301      	adds	r3, #1
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006b0e:	7dfb      	ldrb	r3, [r7, #23]
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	4413      	add	r3, r2
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	7812      	ldrb	r2, [r2, #0]
 8006b18:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b1a:	7dfb      	ldrb	r3, [r7, #23]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	4413      	add	r3, r2
 8006b26:	2203      	movs	r2, #3
 8006b28:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b2a:	7dfb      	ldrb	r3, [r7, #23]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006b30:	e013      	b.n	8006b5a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006b32:	7dfb      	ldrb	r3, [r7, #23]
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	4413      	add	r3, r2
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	7812      	ldrb	r2, [r2, #0]
 8006b3c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	3301      	adds	r3, #1
 8006b42:	613b      	str	r3, [r7, #16]
    idx++;
 8006b44:	7dfb      	ldrb	r3, [r7, #23]
 8006b46:	3301      	adds	r3, #1
 8006b48:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006b4a:	7dfb      	ldrb	r3, [r7, #23]
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	4413      	add	r3, r2
 8006b50:	2200      	movs	r2, #0
 8006b52:	701a      	strb	r2, [r3, #0]
    idx++;
 8006b54:	7dfb      	ldrb	r3, [r7, #23]
 8006b56:	3301      	adds	r3, #1
 8006b58:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1e7      	bne.n	8006b32 <USBD_GetString+0x52>
 8006b62:	e000      	b.n	8006b66 <USBD_GetString+0x86>
    return;
 8006b64:	bf00      	nop
  }
}
 8006b66:	3718      	adds	r7, #24
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006b7c:	e005      	b.n	8006b8a <USBD_GetLen+0x1e>
  {
    len++;
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
 8006b80:	3301      	adds	r3, #1
 8006b82:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	3301      	adds	r3, #1
 8006b88:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1f5      	bne.n	8006b7e <USBD_GetLen+0x12>
  }

  return len;
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 fd47 	bl	800765a <USBD_LL_Transmit>

  return USBD_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b084      	sub	sp, #16
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	60f8      	str	r0, [r7, #12]
 8006bde:	60b9      	str	r1, [r7, #8]
 8006be0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68ba      	ldr	r2, [r7, #8]
 8006be6:	2100      	movs	r1, #0
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 fd36 	bl	800765a <USBD_LL_Transmit>

  return USBD_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2203      	movs	r2, #3
 8006c08:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	2100      	movs	r1, #0
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 fd3a 	bl	800769c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b084      	sub	sp, #16
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	60f8      	str	r0, [r7, #12]
 8006c3a:	60b9      	str	r1, [r7, #8]
 8006c3c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	2100      	movs	r1, #0
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f000 fd29 	bl	800769c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3710      	adds	r7, #16
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2204      	movs	r2, #4
 8006c60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006c64:	2300      	movs	r3, #0
 8006c66:	2200      	movs	r2, #0
 8006c68:	2100      	movs	r1, #0
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fcf5 	bl	800765a <USBD_LL_Transmit>

  return USBD_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b082      	sub	sp, #8
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2205      	movs	r2, #5
 8006c86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	2100      	movs	r1, #0
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fd03 	bl	800769c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <touchscreen_set_contact>:
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */

int touchscreen_set_contact(uint8_t ID, uint16_t x, uint16_t y)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	71fb      	strb	r3, [r7, #7]
 8006caa:	460b      	mov	r3, r1
 8006cac:	80bb      	strh	r3, [r7, #4]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	807b      	strh	r3, [r7, #2]
	if (ID >= MAX_CONTACT_COUNT)
 8006cb2:	79fb      	ldrb	r3, [r7, #7]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d901      	bls.n	8006cbc <touchscreen_set_contact+0x1c>
	{
		return TOUCHSCREEN_FAILURE;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	e027      	b.n	8006d0c <touchscreen_set_contact+0x6c>
	}
	contact_states[ID] = CONTACT_SET;
 8006cbc:	4b16      	ldr	r3, [pc, #88]	@ (8006d18 <touchscreen_set_contact+0x78>)
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	79fb      	ldrb	r3, [r7, #7]
 8006cc2:	b251      	sxtb	r1, r2
 8006cc4:	4a15      	ldr	r2, [pc, #84]	@ (8006d1c <touchscreen_set_contact+0x7c>)
 8006cc6:	54d1      	strb	r1, [r2, r3]
	touchReport.contacts[ID].tip_switch = TIP_SWITCH_SET;
 8006cc8:	4b15      	ldr	r3, [pc, #84]	@ (8006d20 <touchscreen_set_contact+0x80>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	79fa      	ldrb	r2, [r7, #7]
 8006cce:	b2d8      	uxtb	r0, r3
 8006cd0:	4914      	ldr	r1, [pc, #80]	@ (8006d24 <touchscreen_set_contact+0x84>)
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	4413      	add	r3, r2
 8006cd8:	005b      	lsls	r3, r3, #1
 8006cda:	440b      	add	r3, r1
 8006cdc:	3302      	adds	r3, #2
 8006cde:	4602      	mov	r2, r0
 8006ce0:	701a      	strb	r2, [r3, #0]
	touchReport.contacts[ID].x = x;
 8006ce2:	79fa      	ldrb	r2, [r7, #7]
 8006ce4:	490f      	ldr	r1, [pc, #60]	@ (8006d24 <touchscreen_set_contact+0x84>)
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	005b      	lsls	r3, r3, #1
 8006cea:	4413      	add	r3, r2
 8006cec:	005b      	lsls	r3, r3, #1
 8006cee:	440b      	add	r3, r1
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	88ba      	ldrh	r2, [r7, #4]
 8006cf4:	801a      	strh	r2, [r3, #0]
	touchReport.contacts[ID].y = y;
 8006cf6:	79fa      	ldrb	r2, [r7, #7]
 8006cf8:	490a      	ldr	r1, [pc, #40]	@ (8006d24 <touchscreen_set_contact+0x84>)
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	4413      	add	r3, r2
 8006d00:	005b      	lsls	r3, r3, #1
 8006d02:	440b      	add	r3, r1
 8006d04:	3306      	adds	r3, #6
 8006d06:	887a      	ldrh	r2, [r7, #2]
 8006d08:	801a      	strh	r2, [r3, #0]
	return TOUCHSCREEN_SUCCESS;
 8006d0a:	2301      	movs	r3, #1
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	20000090 	.word	0x20000090
 8006d1c:	20000208 	.word	0x20000208
 8006d20:	20000088 	.word	0x20000088
 8006d24:	200001f4 	.word	0x200001f4

08006d28 <touchscreen_remove_contact>:

int touchscreen_remove_contact(uint8_t ID)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	4603      	mov	r3, r0
 8006d30:	71fb      	strb	r3, [r7, #7]
	if (ID >= MAX_CONTACT_COUNT)
 8006d32:	79fb      	ldrb	r3, [r7, #7]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d901      	bls.n	8006d3c <touchscreen_remove_contact+0x14>
	{
		return TOUCHSCREEN_FAILURE;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	e013      	b.n	8006d64 <touchscreen_remove_contact+0x3c>
	}
	contact_states[ID] = CONTACT_REMOVED;
 8006d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8006d70 <touchscreen_remove_contact+0x48>)
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	79fb      	ldrb	r3, [r7, #7]
 8006d42:	b251      	sxtb	r1, r2
 8006d44:	4a0b      	ldr	r2, [pc, #44]	@ (8006d74 <touchscreen_remove_contact+0x4c>)
 8006d46:	54d1      	strb	r1, [r2, r3]
	touchReport.contacts[ID].tip_switch = TIP_SWITCH_RESET;
 8006d48:	4b0b      	ldr	r3, [pc, #44]	@ (8006d78 <touchscreen_remove_contact+0x50>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	79fa      	ldrb	r2, [r7, #7]
 8006d4e:	b2d8      	uxtb	r0, r3
 8006d50:	490a      	ldr	r1, [pc, #40]	@ (8006d7c <touchscreen_remove_contact+0x54>)
 8006d52:	4613      	mov	r3, r2
 8006d54:	005b      	lsls	r3, r3, #1
 8006d56:	4413      	add	r3, r2
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	440b      	add	r3, r1
 8006d5c:	3302      	adds	r3, #2
 8006d5e:	4602      	mov	r2, r0
 8006d60:	701a      	strb	r2, [r3, #0]
	return TOUCHSCREEN_SUCCESS;
 8006d62:	2301      	movs	r3, #1
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	2000008c 	.word	0x2000008c
 8006d74:	20000208 	.word	0x20000208
 8006d78:	200001ec 	.word	0x200001ec
 8006d7c:	200001f4 	.word	0x200001f4

08006d80 <touchscreen_send>:

int touchscreen_send(uint16_t scan_time)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	4603      	mov	r3, r0
 8006d88:	80fb      	strh	r3, [r7, #6]
	touchReport.report_ID = REPORTID_TOUCH;
 8006d8a:	4b28      	ldr	r3, [pc, #160]	@ (8006e2c <touchscreen_send+0xac>)
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	701a      	strb	r2, [r3, #0]
	int count;
	for (int i = 0; i < MAX_CONTACT_COUNT; i++)
 8006d90:	2300      	movs	r3, #0
 8006d92:	613b      	str	r3, [r7, #16]
 8006d94:	e00f      	b.n	8006db6 <touchscreen_send+0x36>
		{
			if (contact_states[i] != CONTACT_RESET)
 8006d96:	4a26      	ldr	r2, [pc, #152]	@ (8006e30 <touchscreen_send+0xb0>)
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f993 3000 	ldrsb.w	r3, [r3]
 8006da0:	461a      	mov	r2, r3
 8006da2:	4b24      	ldr	r3, [pc, #144]	@ (8006e34 <touchscreen_send+0xb4>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d002      	beq.n	8006db0 <touchscreen_send+0x30>
			{
				count++;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	3301      	adds	r3, #1
 8006dae:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < MAX_CONTACT_COUNT; i++)
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	3301      	adds	r3, #1
 8006db4:	613b      	str	r3, [r7, #16]
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	ddec      	ble.n	8006d96 <touchscreen_send+0x16>
			}
		}
	touchReport.contact_count = count;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8006e2c <touchscreen_send+0xac>)
 8006dc2:	741a      	strb	r2, [r3, #16]
	touchReport.scan_time = scan_time;
 8006dc4:	4a19      	ldr	r2, [pc, #100]	@ (8006e2c <touchscreen_send+0xac>)
 8006dc6:	88fb      	ldrh	r3, [r7, #6]
 8006dc8:	81d3      	strh	r3, [r2, #14]
	int result = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t *) &touchReport, sizeof (touchReport));
 8006dca:	2212      	movs	r2, #18
 8006dcc:	4917      	ldr	r1, [pc, #92]	@ (8006e2c <touchscreen_send+0xac>)
 8006dce:	481a      	ldr	r0, [pc, #104]	@ (8006e38 <touchscreen_send+0xb8>)
 8006dd0:	f7fe fabe 	bl	8005350 <USBD_CUSTOM_HID_SendReport>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < MAX_CONTACT_COUNT; i++)
 8006dd8:	2300      	movs	r3, #0
 8006dda:	60fb      	str	r3, [r7, #12]
 8006ddc:	e014      	b.n	8006e08 <touchscreen_send+0x88>
	{
		if (contact_states[i] == CONTACT_REMOVED)
 8006dde:	4a14      	ldr	r2, [pc, #80]	@ (8006e30 <touchscreen_send+0xb0>)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	4413      	add	r3, r2
 8006de4:	f993 3000 	ldrsb.w	r3, [r3]
 8006de8:	461a      	mov	r2, r3
 8006dea:	4b14      	ldr	r3, [pc, #80]	@ (8006e3c <touchscreen_send+0xbc>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d107      	bne.n	8006e02 <touchscreen_send+0x82>
		{
			contact_states[i] = CONTACT_RESET;
 8006df2:	4b10      	ldr	r3, [pc, #64]	@ (8006e34 <touchscreen_send+0xb4>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	b259      	sxtb	r1, r3
 8006df8:	4a0d      	ldr	r2, [pc, #52]	@ (8006e30 <touchscreen_send+0xb0>)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	460a      	mov	r2, r1
 8006e00:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_CONTACT_COUNT; i++)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	3301      	adds	r3, #1
 8006e06:	60fb      	str	r3, [r7, #12]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	dde7      	ble.n	8006dde <touchscreen_send+0x5e>
		}
	}
	HAL_Delay(DELAY_AFTER_SENDING);
 8006e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e40 <touchscreen_send+0xc0>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7f9 fdae 	bl	8000974 <HAL_Delay>
	if (result == USBD_OK)
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <touchscreen_send+0xa2>
	{
		return TOUCHSCREEN_SUCCESS;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e000      	b.n	8006e24 <touchscreen_send+0xa4>
	}
	else
	{
		return TOUCHSCREEN_FAILURE;
 8006e22:	2300      	movs	r3, #0
	}
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3718      	adds	r7, #24
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	200001f4 	.word	0x200001f4
 8006e30:	20000208 	.word	0x20000208
 8006e34:	200001f0 	.word	0x200001f0
 8006e38:	2000020c 	.word	0x2000020c
 8006e3c:	2000008c 	.word	0x2000008c
 8006e40:	20000094 	.word	0x20000094

08006e44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	4912      	ldr	r1, [pc, #72]	@ (8006e94 <MX_USB_DEVICE_Init+0x50>)
 8006e4c:	4812      	ldr	r0, [pc, #72]	@ (8006e98 <MX_USB_DEVICE_Init+0x54>)
 8006e4e:	f7fe fc07 	bl	8005660 <USBD_Init>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d001      	beq.n	8006e5c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e58:	f7f9 fc76 	bl	8000748 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8006e5c:	490f      	ldr	r1, [pc, #60]	@ (8006e9c <MX_USB_DEVICE_Init+0x58>)
 8006e5e:	480e      	ldr	r0, [pc, #56]	@ (8006e98 <MX_USB_DEVICE_Init+0x54>)
 8006e60:	f7fe fc2e 	bl	80056c0 <USBD_RegisterClass>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e6a:	f7f9 fc6d 	bl	8000748 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8006e6e:	490c      	ldr	r1, [pc, #48]	@ (8006ea0 <MX_USB_DEVICE_Init+0x5c>)
 8006e70:	4809      	ldr	r0, [pc, #36]	@ (8006e98 <MX_USB_DEVICE_Init+0x54>)
 8006e72:	f7fe fbdb 	bl	800562c <USBD_CUSTOM_HID_RegisterInterface>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e7c:	f7f9 fc64 	bl	8000748 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e80:	4805      	ldr	r0, [pc, #20]	@ (8006e98 <MX_USB_DEVICE_Init+0x54>)
 8006e82:	f7fe fc53 	bl	800572c <USBD_Start>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e8c:	f7f9 fc5c 	bl	8000748 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e90:	bf00      	nop
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	20000168 	.word	0x20000168
 8006e98:	2000020c 	.word	0x2000020c
 8006e9c:	2000000c 	.word	0x2000000c
 8006ea0:	20000158 	.word	0x20000158

08006ea4 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006ea8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8006eb8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	460a      	mov	r2, r1
 8006ece:	71fb      	strb	r3, [r7, #7]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8006ed4:	4806      	ldr	r0, [pc, #24]	@ (8006ef0 <CUSTOM_HID_OutEvent_FS+0x2c>)
 8006ed6:	f7fe fb47 	bl	8005568 <USBD_CUSTOM_HID_ReceivePacket>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d002      	beq.n	8006ee6 <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 8006ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee4:	e000      	b.n	8006ee8 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 8006ee6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3708      	adds	r7, #8
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	2000020c 	.word	0x2000020c

08006ef4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	4603      	mov	r3, r0
 8006efc:	6039      	str	r1, [r7, #0]
 8006efe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	2212      	movs	r2, #18
 8006f04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006f06:	4b03      	ldr	r3, [pc, #12]	@ (8006f14 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	20000188 	.word	0x20000188

08006f18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	4603      	mov	r3, r0
 8006f20:	6039      	str	r1, [r7, #0]
 8006f22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	2204      	movs	r2, #4
 8006f28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f2a:	4b03      	ldr	r3, [pc, #12]	@ (8006f38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	200001a8 	.word	0x200001a8

08006f3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	4603      	mov	r3, r0
 8006f44:	6039      	str	r1, [r7, #0]
 8006f46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f48:	79fb      	ldrb	r3, [r7, #7]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d105      	bne.n	8006f5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	4907      	ldr	r1, [pc, #28]	@ (8006f70 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f52:	4808      	ldr	r0, [pc, #32]	@ (8006f74 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f54:	f7ff fdc4 	bl	8006ae0 <USBD_GetString>
 8006f58:	e004      	b.n	8006f64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	4904      	ldr	r1, [pc, #16]	@ (8006f70 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f5e:	4805      	ldr	r0, [pc, #20]	@ (8006f74 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f60:	f7ff fdbe 	bl	8006ae0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f64:	4b02      	ldr	r3, [pc, #8]	@ (8006f70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	200004e8 	.word	0x200004e8
 8006f74:	08007990 	.word	0x08007990

08006f78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	4603      	mov	r3, r0
 8006f80:	6039      	str	r1, [r7, #0]
 8006f82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	4904      	ldr	r1, [pc, #16]	@ (8006f98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006f88:	4804      	ldr	r0, [pc, #16]	@ (8006f9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006f8a:	f7ff fda9 	bl	8006ae0 <USBD_GetString>
  return USBD_StrDesc;
 8006f8e:	4b02      	ldr	r3, [pc, #8]	@ (8006f98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	200004e8 	.word	0x200004e8
 8006f9c:	080079b0 	.word	0x080079b0

08006fa0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	6039      	str	r1, [r7, #0]
 8006faa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	221a      	movs	r2, #26
 8006fb0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006fb2:	f000 f855 	bl	8007060 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006fb6:	4b02      	ldr	r3, [pc, #8]	@ (8006fc0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3708      	adds	r7, #8
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	200001ac 	.word	0x200001ac

08006fc4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	4603      	mov	r3, r0
 8006fcc:	6039      	str	r1, [r7, #0]
 8006fce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006fd0:	79fb      	ldrb	r3, [r7, #7]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d105      	bne.n	8006fe2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	4907      	ldr	r1, [pc, #28]	@ (8006ff8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006fda:	4808      	ldr	r0, [pc, #32]	@ (8006ffc <USBD_FS_ConfigStrDescriptor+0x38>)
 8006fdc:	f7ff fd80 	bl	8006ae0 <USBD_GetString>
 8006fe0:	e004      	b.n	8006fec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	4904      	ldr	r1, [pc, #16]	@ (8006ff8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006fe6:	4805      	ldr	r0, [pc, #20]	@ (8006ffc <USBD_FS_ConfigStrDescriptor+0x38>)
 8006fe8:	f7ff fd7a 	bl	8006ae0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fec:	4b02      	ldr	r3, [pc, #8]	@ (8006ff8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	200004e8 	.word	0x200004e8
 8006ffc:	080079c4 	.word	0x080079c4

08007000 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	4603      	mov	r3, r0
 8007008:	6039      	str	r1, [r7, #0]
 800700a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800700c:	79fb      	ldrb	r3, [r7, #7]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d105      	bne.n	800701e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007012:	683a      	ldr	r2, [r7, #0]
 8007014:	4907      	ldr	r1, [pc, #28]	@ (8007034 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007016:	4808      	ldr	r0, [pc, #32]	@ (8007038 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007018:	f7ff fd62 	bl	8006ae0 <USBD_GetString>
 800701c:	e004      	b.n	8007028 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	4904      	ldr	r1, [pc, #16]	@ (8007034 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007022:	4805      	ldr	r0, [pc, #20]	@ (8007038 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007024:	f7ff fd5c 	bl	8006ae0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007028:	4b02      	ldr	r3, [pc, #8]	@ (8007034 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800702a:	4618      	mov	r0, r3
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	200004e8 	.word	0x200004e8
 8007038:	080079d8 	.word	0x080079d8

0800703c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	4603      	mov	r3, r0
 8007044:	6039      	str	r1, [r7, #0]
 8007046:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	220c      	movs	r2, #12
 800704c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800704e:	4b03      	ldr	r3, [pc, #12]	@ (800705c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007050:	4618      	mov	r0, r3
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	2000019c 	.word	0x2000019c

08007060 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007066:	4b0f      	ldr	r3, [pc, #60]	@ (80070a4 <Get_SerialNum+0x44>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800706c:	4b0e      	ldr	r3, [pc, #56]	@ (80070a8 <Get_SerialNum+0x48>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007072:	4b0e      	ldr	r3, [pc, #56]	@ (80070ac <Get_SerialNum+0x4c>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4413      	add	r3, r2
 800707e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d009      	beq.n	800709a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007086:	2208      	movs	r2, #8
 8007088:	4909      	ldr	r1, [pc, #36]	@ (80070b0 <Get_SerialNum+0x50>)
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f000 f814 	bl	80070b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007090:	2204      	movs	r2, #4
 8007092:	4908      	ldr	r1, [pc, #32]	@ (80070b4 <Get_SerialNum+0x54>)
 8007094:	68b8      	ldr	r0, [r7, #8]
 8007096:	f000 f80f 	bl	80070b8 <IntToUnicode>
  }
}
 800709a:	bf00      	nop
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	1fff7a10 	.word	0x1fff7a10
 80070a8:	1fff7a14 	.word	0x1fff7a14
 80070ac:	1fff7a18 	.word	0x1fff7a18
 80070b0:	200001ae 	.word	0x200001ae
 80070b4:	200001be 	.word	0x200001be

080070b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	4613      	mov	r3, r2
 80070c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80070ca:	2300      	movs	r3, #0
 80070cc:	75fb      	strb	r3, [r7, #23]
 80070ce:	e027      	b.n	8007120 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	0f1b      	lsrs	r3, r3, #28
 80070d4:	2b09      	cmp	r3, #9
 80070d6:	d80b      	bhi.n	80070f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	0f1b      	lsrs	r3, r3, #28
 80070dc:	b2da      	uxtb	r2, r3
 80070de:	7dfb      	ldrb	r3, [r7, #23]
 80070e0:	005b      	lsls	r3, r3, #1
 80070e2:	4619      	mov	r1, r3
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	440b      	add	r3, r1
 80070e8:	3230      	adds	r2, #48	@ 0x30
 80070ea:	b2d2      	uxtb	r2, r2
 80070ec:	701a      	strb	r2, [r3, #0]
 80070ee:	e00a      	b.n	8007106 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	0f1b      	lsrs	r3, r3, #28
 80070f4:	b2da      	uxtb	r2, r3
 80070f6:	7dfb      	ldrb	r3, [r7, #23]
 80070f8:	005b      	lsls	r3, r3, #1
 80070fa:	4619      	mov	r1, r3
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	440b      	add	r3, r1
 8007100:	3237      	adds	r2, #55	@ 0x37
 8007102:	b2d2      	uxtb	r2, r2
 8007104:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	011b      	lsls	r3, r3, #4
 800710a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800710c:	7dfb      	ldrb	r3, [r7, #23]
 800710e:	005b      	lsls	r3, r3, #1
 8007110:	3301      	adds	r3, #1
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	4413      	add	r3, r2
 8007116:	2200      	movs	r2, #0
 8007118:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800711a:	7dfb      	ldrb	r3, [r7, #23]
 800711c:	3301      	adds	r3, #1
 800711e:	75fb      	strb	r3, [r7, #23]
 8007120:	7dfa      	ldrb	r2, [r7, #23]
 8007122:	79fb      	ldrb	r3, [r7, #7]
 8007124:	429a      	cmp	r2, r3
 8007126:	d3d3      	bcc.n	80070d0 <IntToUnicode+0x18>
  }
}
 8007128:	bf00      	nop
 800712a:	bf00      	nop
 800712c:	371c      	adds	r7, #28
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
	...

08007138 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b0a0      	sub	sp, #128	@ 0x80
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007140:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007144:	2200      	movs	r2, #0
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	605a      	str	r2, [r3, #4]
 800714a:	609a      	str	r2, [r3, #8]
 800714c:	60da      	str	r2, [r3, #12]
 800714e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007150:	f107 0310 	add.w	r3, r7, #16
 8007154:	225c      	movs	r2, #92	@ 0x5c
 8007156:	2100      	movs	r1, #0
 8007158:	4618      	mov	r0, r3
 800715a:	f000 fb53 	bl	8007804 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007166:	d149      	bne.n	80071fc <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8007168:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800716c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800716e:	2300      	movs	r3, #0
 8007170:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007172:	f107 0310 	add.w	r3, r7, #16
 8007176:	4618      	mov	r0, r3
 8007178:	f7fb fa6e 	bl	8002658 <HAL_RCCEx_PeriphCLKConfig>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8007182:	f7f9 fae1 	bl	8000748 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007186:	2300      	movs	r3, #0
 8007188:	60fb      	str	r3, [r7, #12]
 800718a:	4b1e      	ldr	r3, [pc, #120]	@ (8007204 <HAL_PCD_MspInit+0xcc>)
 800718c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800718e:	4a1d      	ldr	r2, [pc, #116]	@ (8007204 <HAL_PCD_MspInit+0xcc>)
 8007190:	f043 0301 	orr.w	r3, r3, #1
 8007194:	6313      	str	r3, [r2, #48]	@ 0x30
 8007196:	4b1b      	ldr	r3, [pc, #108]	@ (8007204 <HAL_PCD_MspInit+0xcc>)
 8007198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	60fb      	str	r3, [r7, #12]
 80071a0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80071a2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80071a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071a8:	2302      	movs	r3, #2
 80071aa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ac:	2300      	movs	r3, #0
 80071ae:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071b0:	2303      	movs	r3, #3
 80071b2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80071b4:	230a      	movs	r3, #10
 80071b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071b8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80071bc:	4619      	mov	r1, r3
 80071be:	4812      	ldr	r0, [pc, #72]	@ (8007208 <HAL_PCD_MspInit+0xd0>)
 80071c0:	f7f9 fd0e 	bl	8000be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80071c4:	4b0f      	ldr	r3, [pc, #60]	@ (8007204 <HAL_PCD_MspInit+0xcc>)
 80071c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071c8:	4a0e      	ldr	r2, [pc, #56]	@ (8007204 <HAL_PCD_MspInit+0xcc>)
 80071ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071ce:	6353      	str	r3, [r2, #52]	@ 0x34
 80071d0:	2300      	movs	r3, #0
 80071d2:	60bb      	str	r3, [r7, #8]
 80071d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007204 <HAL_PCD_MspInit+0xcc>)
 80071d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071d8:	4a0a      	ldr	r2, [pc, #40]	@ (8007204 <HAL_PCD_MspInit+0xcc>)
 80071da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80071de:	6453      	str	r3, [r2, #68]	@ 0x44
 80071e0:	4b08      	ldr	r3, [pc, #32]	@ (8007204 <HAL_PCD_MspInit+0xcc>)
 80071e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071e8:	60bb      	str	r3, [r7, #8]
 80071ea:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80071ec:	2200      	movs	r2, #0
 80071ee:	2100      	movs	r1, #0
 80071f0:	2043      	movs	r0, #67	@ 0x43
 80071f2:	f7f9 fcbe 	bl	8000b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80071f6:	2043      	movs	r0, #67	@ 0x43
 80071f8:	f7f9 fcd7 	bl	8000baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80071fc:	bf00      	nop
 80071fe:	3780      	adds	r7, #128	@ 0x80
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	40023800 	.word	0x40023800
 8007208:	40020000 	.word	0x40020000

0800720c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007220:	4619      	mov	r1, r3
 8007222:	4610      	mov	r0, r2
 8007224:	f7fe facf 	bl	80057c6 <USBD_LL_SetupStage>
}
 8007228:	bf00      	nop
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	460b      	mov	r3, r1
 800723a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007242:	78fa      	ldrb	r2, [r7, #3]
 8007244:	6879      	ldr	r1, [r7, #4]
 8007246:	4613      	mov	r3, r2
 8007248:	00db      	lsls	r3, r3, #3
 800724a:	4413      	add	r3, r2
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	440b      	add	r3, r1
 8007250:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	78fb      	ldrb	r3, [r7, #3]
 8007258:	4619      	mov	r1, r3
 800725a:	f7fe fb09 	bl	8005870 <USBD_LL_DataOutStage>
}
 800725e:	bf00      	nop
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b082      	sub	sp, #8
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	460b      	mov	r3, r1
 8007270:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007278:	78fa      	ldrb	r2, [r7, #3]
 800727a:	6879      	ldr	r1, [r7, #4]
 800727c:	4613      	mov	r3, r2
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	4413      	add	r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	440b      	add	r3, r1
 8007286:	3320      	adds	r3, #32
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	78fb      	ldrb	r3, [r7, #3]
 800728c:	4619      	mov	r1, r3
 800728e:	f7fe fba2 	bl	80059d6 <USBD_LL_DataInStage>
}
 8007292:	bf00      	nop
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b082      	sub	sp, #8
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7fe fcdc 	bl	8005c66 <USBD_LL_SOF>
}
 80072ae:	bf00      	nop
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b084      	sub	sp, #16
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80072be:	2301      	movs	r3, #1
 80072c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	79db      	ldrb	r3, [r3, #7]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d102      	bne.n	80072d0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80072ca:	2300      	movs	r3, #0
 80072cc:	73fb      	strb	r3, [r7, #15]
 80072ce:	e008      	b.n	80072e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	79db      	ldrb	r3, [r3, #7]
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d102      	bne.n	80072de <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80072d8:	2301      	movs	r3, #1
 80072da:	73fb      	strb	r3, [r7, #15]
 80072dc:	e001      	b.n	80072e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80072de:	f7f9 fa33 	bl	8000748 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80072e8:	7bfa      	ldrb	r2, [r7, #15]
 80072ea:	4611      	mov	r1, r2
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7fe fc76 	bl	8005bde <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7fe fc1e 	bl	8005b3a <USBD_LL_Reset>
}
 80072fe:	bf00      	nop
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
	...

08007308 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007316:	4618      	mov	r0, r3
 8007318:	f7fe fc71 	bl	8005bfe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	6812      	ldr	r2, [r2, #0]
 800732a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800732e:	f043 0301 	orr.w	r3, r3, #1
 8007332:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	7adb      	ldrb	r3, [r3, #11]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d005      	beq.n	8007348 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800733c:	4b04      	ldr	r3, [pc, #16]	@ (8007350 <HAL_PCD_SuspendCallback+0x48>)
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	4a03      	ldr	r2, [pc, #12]	@ (8007350 <HAL_PCD_SuspendCallback+0x48>)
 8007342:	f043 0306 	orr.w	r3, r3, #6
 8007346:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007348:	bf00      	nop
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	e000ed00 	.word	0xe000ed00

08007354 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007362:	4618      	mov	r0, r3
 8007364:	f7fe fc67 	bl	8005c36 <USBD_LL_Resume>
}
 8007368:	bf00      	nop
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	460b      	mov	r3, r1
 800737a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007382:	78fa      	ldrb	r2, [r7, #3]
 8007384:	4611      	mov	r1, r2
 8007386:	4618      	mov	r0, r3
 8007388:	f7fe fcbf 	bl	8005d0a <USBD_LL_IsoOUTIncomplete>
}
 800738c:	bf00      	nop
 800738e:	3708      	adds	r7, #8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	460b      	mov	r3, r1
 800739e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80073a6:	78fa      	ldrb	r2, [r7, #3]
 80073a8:	4611      	mov	r1, r2
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fe fc7b 	bl	8005ca6 <USBD_LL_IsoINIncomplete>
}
 80073b0:	bf00      	nop
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fe fcd1 	bl	8005d6e <USBD_LL_DevConnected>
}
 80073cc:	bf00      	nop
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fe fcce 	bl	8005d84 <USBD_LL_DevDisconnected>
}
 80073e8:	bf00      	nop
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d13c      	bne.n	800747a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007400:	4a20      	ldr	r2, [pc, #128]	@ (8007484 <USBD_LL_Init+0x94>)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a1e      	ldr	r2, [pc, #120]	@ (8007484 <USBD_LL_Init+0x94>)
 800740c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007410:	4b1c      	ldr	r3, [pc, #112]	@ (8007484 <USBD_LL_Init+0x94>)
 8007412:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007416:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007418:	4b1a      	ldr	r3, [pc, #104]	@ (8007484 <USBD_LL_Init+0x94>)
 800741a:	2206      	movs	r2, #6
 800741c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800741e:	4b19      	ldr	r3, [pc, #100]	@ (8007484 <USBD_LL_Init+0x94>)
 8007420:	2202      	movs	r2, #2
 8007422:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007424:	4b17      	ldr	r3, [pc, #92]	@ (8007484 <USBD_LL_Init+0x94>)
 8007426:	2200      	movs	r2, #0
 8007428:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800742a:	4b16      	ldr	r3, [pc, #88]	@ (8007484 <USBD_LL_Init+0x94>)
 800742c:	2202      	movs	r2, #2
 800742e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007430:	4b14      	ldr	r3, [pc, #80]	@ (8007484 <USBD_LL_Init+0x94>)
 8007432:	2200      	movs	r2, #0
 8007434:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007436:	4b13      	ldr	r3, [pc, #76]	@ (8007484 <USBD_LL_Init+0x94>)
 8007438:	2200      	movs	r2, #0
 800743a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800743c:	4b11      	ldr	r3, [pc, #68]	@ (8007484 <USBD_LL_Init+0x94>)
 800743e:	2200      	movs	r2, #0
 8007440:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007442:	4b10      	ldr	r3, [pc, #64]	@ (8007484 <USBD_LL_Init+0x94>)
 8007444:	2200      	movs	r2, #0
 8007446:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007448:	4b0e      	ldr	r3, [pc, #56]	@ (8007484 <USBD_LL_Init+0x94>)
 800744a:	2200      	movs	r2, #0
 800744c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800744e:	480d      	ldr	r0, [pc, #52]	@ (8007484 <USBD_LL_Init+0x94>)
 8007450:	f7f9 fd8b 	bl	8000f6a <HAL_PCD_Init>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800745a:	f7f9 f975 	bl	8000748 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800745e:	2180      	movs	r1, #128	@ 0x80
 8007460:	4808      	ldr	r0, [pc, #32]	@ (8007484 <USBD_LL_Init+0x94>)
 8007462:	f7fa ffd2 	bl	800240a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007466:	2240      	movs	r2, #64	@ 0x40
 8007468:	2100      	movs	r1, #0
 800746a:	4806      	ldr	r0, [pc, #24]	@ (8007484 <USBD_LL_Init+0x94>)
 800746c:	f7fa ff86 	bl	800237c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007470:	2280      	movs	r2, #128	@ 0x80
 8007472:	2101      	movs	r1, #1
 8007474:	4803      	ldr	r0, [pc, #12]	@ (8007484 <USBD_LL_Init+0x94>)
 8007476:	f7fa ff81 	bl	800237c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	200006e8 	.word	0x200006e8

08007488 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800749e:	4618      	mov	r0, r3
 80074a0:	f7f9 fe79 	bl	8001196 <HAL_PCD_Start>
 80074a4:	4603      	mov	r3, r0
 80074a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 f97e 	bl	80077ac <USBD_Get_USB_Status>
 80074b0:	4603      	mov	r3, r0
 80074b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b084      	sub	sp, #16
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	4608      	mov	r0, r1
 80074c8:	4611      	mov	r1, r2
 80074ca:	461a      	mov	r2, r3
 80074cc:	4603      	mov	r3, r0
 80074ce:	70fb      	strb	r3, [r7, #3]
 80074d0:	460b      	mov	r3, r1
 80074d2:	70bb      	strb	r3, [r7, #2]
 80074d4:	4613      	mov	r3, r2
 80074d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074d8:	2300      	movs	r3, #0
 80074da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074dc:	2300      	movs	r3, #0
 80074de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80074e6:	78bb      	ldrb	r3, [r7, #2]
 80074e8:	883a      	ldrh	r2, [r7, #0]
 80074ea:	78f9      	ldrb	r1, [r7, #3]
 80074ec:	f7fa fb7a 	bl	8001be4 <HAL_PCD_EP_Open>
 80074f0:	4603      	mov	r3, r0
 80074f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
 80074f6:	4618      	mov	r0, r3
 80074f8:	f000 f958 	bl	80077ac <USBD_Get_USB_Status>
 80074fc:	4603      	mov	r3, r0
 80074fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007500:	7bbb      	ldrb	r3, [r7, #14]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b084      	sub	sp, #16
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	460b      	mov	r3, r1
 8007514:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800751a:	2300      	movs	r3, #0
 800751c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007524:	78fa      	ldrb	r2, [r7, #3]
 8007526:	4611      	mov	r1, r2
 8007528:	4618      	mov	r0, r3
 800752a:	f7fa fbc3 	bl	8001cb4 <HAL_PCD_EP_Close>
 800752e:	4603      	mov	r3, r0
 8007530:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007532:	7bfb      	ldrb	r3, [r7, #15]
 8007534:	4618      	mov	r0, r3
 8007536:	f000 f939 	bl	80077ac <USBD_Get_USB_Status>
 800753a:	4603      	mov	r3, r0
 800753c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800753e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	460b      	mov	r3, r1
 8007552:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007554:	2300      	movs	r3, #0
 8007556:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007558:	2300      	movs	r3, #0
 800755a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007562:	78fa      	ldrb	r2, [r7, #3]
 8007564:	4611      	mov	r1, r2
 8007566:	4618      	mov	r0, r3
 8007568:	f7fa fc63 	bl	8001e32 <HAL_PCD_EP_SetStall>
 800756c:	4603      	mov	r3, r0
 800756e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007570:	7bfb      	ldrb	r3, [r7, #15]
 8007572:	4618      	mov	r0, r3
 8007574:	f000 f91a 	bl	80077ac <USBD_Get_USB_Status>
 8007578:	4603      	mov	r3, r0
 800757a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800757c:	7bbb      	ldrb	r3, [r7, #14]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b084      	sub	sp, #16
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	460b      	mov	r3, r1
 8007590:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80075a0:	78fa      	ldrb	r2, [r7, #3]
 80075a2:	4611      	mov	r1, r2
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fa fca7 	bl	8001ef8 <HAL_PCD_EP_ClrStall>
 80075aa:	4603      	mov	r3, r0
 80075ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075ae:	7bfb      	ldrb	r3, [r7, #15]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f000 f8fb 	bl	80077ac <USBD_Get_USB_Status>
 80075b6:	4603      	mov	r3, r0
 80075b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80075d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80075d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	da0b      	bge.n	80075f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80075e0:	78fb      	ldrb	r3, [r7, #3]
 80075e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80075e6:	68f9      	ldr	r1, [r7, #12]
 80075e8:	4613      	mov	r3, r2
 80075ea:	00db      	lsls	r3, r3, #3
 80075ec:	4413      	add	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	440b      	add	r3, r1
 80075f2:	3316      	adds	r3, #22
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	e00b      	b.n	8007610 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80075f8:	78fb      	ldrb	r3, [r7, #3]
 80075fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80075fe:	68f9      	ldr	r1, [r7, #12]
 8007600:	4613      	mov	r3, r2
 8007602:	00db      	lsls	r3, r3, #3
 8007604:	4413      	add	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	440b      	add	r3, r1
 800760a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800760e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007610:	4618      	mov	r0, r3
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007628:	2300      	movs	r3, #0
 800762a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800762c:	2300      	movs	r3, #0
 800762e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007636:	78fa      	ldrb	r2, [r7, #3]
 8007638:	4611      	mov	r1, r2
 800763a:	4618      	mov	r0, r3
 800763c:	f7fa faae 	bl	8001b9c <HAL_PCD_SetAddress>
 8007640:	4603      	mov	r3, r0
 8007642:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007644:	7bfb      	ldrb	r3, [r7, #15]
 8007646:	4618      	mov	r0, r3
 8007648:	f000 f8b0 	bl	80077ac <USBD_Get_USB_Status>
 800764c:	4603      	mov	r3, r0
 800764e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007650:	7bbb      	ldrb	r3, [r7, #14]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b086      	sub	sp, #24
 800765e:	af00      	add	r7, sp, #0
 8007660:	60f8      	str	r0, [r7, #12]
 8007662:	607a      	str	r2, [r7, #4]
 8007664:	603b      	str	r3, [r7, #0]
 8007666:	460b      	mov	r3, r1
 8007668:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007678:	7af9      	ldrb	r1, [r7, #11]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	f7fa fb9e 	bl	8001dbe <HAL_PCD_EP_Transmit>
 8007682:	4603      	mov	r3, r0
 8007684:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007686:	7dfb      	ldrb	r3, [r7, #23]
 8007688:	4618      	mov	r0, r3
 800768a:	f000 f88f 	bl	80077ac <USBD_Get_USB_Status>
 800768e:	4603      	mov	r3, r0
 8007690:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007692:	7dbb      	ldrb	r3, [r7, #22]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3718      	adds	r7, #24
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	607a      	str	r2, [r7, #4]
 80076a6:	603b      	str	r3, [r7, #0]
 80076a8:	460b      	mov	r3, r1
 80076aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076ac:	2300      	movs	r3, #0
 80076ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076b0:	2300      	movs	r3, #0
 80076b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80076ba:	7af9      	ldrb	r1, [r7, #11]
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	f7fa fb42 	bl	8001d48 <HAL_PCD_EP_Receive>
 80076c4:	4603      	mov	r3, r0
 80076c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076c8:	7dfb      	ldrb	r3, [r7, #23]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f000 f86e 	bl	80077ac <USBD_Get_USB_Status>
 80076d0:	4603      	mov	r3, r0
 80076d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80076d4:	7dbb      	ldrb	r3, [r7, #22]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3718      	adds	r7, #24
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
	...

080076e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	460b      	mov	r3, r1
 80076ea:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80076ec:	78fb      	ldrb	r3, [r7, #3]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d002      	beq.n	80076f8 <HAL_PCDEx_LPM_Callback+0x18>
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d01f      	beq.n	8007736 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80076f6:	e03b      	b.n	8007770 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	7adb      	ldrb	r3, [r3, #11]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d007      	beq.n	8007710 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8007700:	f7f8 ff48 	bl	8000594 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007704:	4b1c      	ldr	r3, [pc, #112]	@ (8007778 <HAL_PCDEx_LPM_Callback+0x98>)
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	4a1b      	ldr	r2, [pc, #108]	@ (8007778 <HAL_PCDEx_LPM_Callback+0x98>)
 800770a:	f023 0306 	bic.w	r3, r3, #6
 800770e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	6812      	ldr	r2, [r2, #0]
 800771e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007722:	f023 0301 	bic.w	r3, r3, #1
 8007726:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800772e:	4618      	mov	r0, r3
 8007730:	f7fe fa81 	bl	8005c36 <USBD_LL_Resume>
    break;
 8007734:	e01c      	b.n	8007770 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	6812      	ldr	r2, [r2, #0]
 8007744:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007748:	f043 0301 	orr.w	r3, r3, #1
 800774c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007754:	4618      	mov	r0, r3
 8007756:	f7fe fa52 	bl	8005bfe <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	7adb      	ldrb	r3, [r3, #11]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d005      	beq.n	800776e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007762:	4b05      	ldr	r3, [pc, #20]	@ (8007778 <HAL_PCDEx_LPM_Callback+0x98>)
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	4a04      	ldr	r2, [pc, #16]	@ (8007778 <HAL_PCDEx_LPM_Callback+0x98>)
 8007768:	f043 0306 	orr.w	r3, r3, #6
 800776c:	6113      	str	r3, [r2, #16]
    break;
 800776e:	bf00      	nop
}
 8007770:	bf00      	nop
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	e000ed00 	.word	0xe000ed00

0800777c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8007784:	4b03      	ldr	r3, [pc, #12]	@ (8007794 <USBD_static_malloc+0x18>)
}
 8007786:	4618      	mov	r0, r3
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	20000bcc 	.word	0x20000bcc

08007798 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]

}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	4603      	mov	r3, r0
 80077b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80077ba:	79fb      	ldrb	r3, [r7, #7]
 80077bc:	2b03      	cmp	r3, #3
 80077be:	d817      	bhi.n	80077f0 <USBD_Get_USB_Status+0x44>
 80077c0:	a201      	add	r2, pc, #4	@ (adr r2, 80077c8 <USBD_Get_USB_Status+0x1c>)
 80077c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c6:	bf00      	nop
 80077c8:	080077d9 	.word	0x080077d9
 80077cc:	080077df 	.word	0x080077df
 80077d0:	080077e5 	.word	0x080077e5
 80077d4:	080077eb 	.word	0x080077eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80077d8:	2300      	movs	r3, #0
 80077da:	73fb      	strb	r3, [r7, #15]
    break;
 80077dc:	e00b      	b.n	80077f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80077de:	2303      	movs	r3, #3
 80077e0:	73fb      	strb	r3, [r7, #15]
    break;
 80077e2:	e008      	b.n	80077f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80077e4:	2301      	movs	r3, #1
 80077e6:	73fb      	strb	r3, [r7, #15]
    break;
 80077e8:	e005      	b.n	80077f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80077ea:	2303      	movs	r3, #3
 80077ec:	73fb      	strb	r3, [r7, #15]
    break;
 80077ee:	e002      	b.n	80077f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80077f0:	2303      	movs	r3, #3
 80077f2:	73fb      	strb	r3, [r7, #15]
    break;
 80077f4:	bf00      	nop
  }
  return usb_status;
 80077f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <memset>:
 8007804:	4402      	add	r2, r0
 8007806:	4603      	mov	r3, r0
 8007808:	4293      	cmp	r3, r2
 800780a:	d100      	bne.n	800780e <memset+0xa>
 800780c:	4770      	bx	lr
 800780e:	f803 1b01 	strb.w	r1, [r3], #1
 8007812:	e7f9      	b.n	8007808 <memset+0x4>

08007814 <__libc_init_array>:
 8007814:	b570      	push	{r4, r5, r6, lr}
 8007816:	4d0d      	ldr	r5, [pc, #52]	@ (800784c <__libc_init_array+0x38>)
 8007818:	4c0d      	ldr	r4, [pc, #52]	@ (8007850 <__libc_init_array+0x3c>)
 800781a:	1b64      	subs	r4, r4, r5
 800781c:	10a4      	asrs	r4, r4, #2
 800781e:	2600      	movs	r6, #0
 8007820:	42a6      	cmp	r6, r4
 8007822:	d109      	bne.n	8007838 <__libc_init_array+0x24>
 8007824:	4d0b      	ldr	r5, [pc, #44]	@ (8007854 <__libc_init_array+0x40>)
 8007826:	4c0c      	ldr	r4, [pc, #48]	@ (8007858 <__libc_init_array+0x44>)
 8007828:	f000 f826 	bl	8007878 <_init>
 800782c:	1b64      	subs	r4, r4, r5
 800782e:	10a4      	asrs	r4, r4, #2
 8007830:	2600      	movs	r6, #0
 8007832:	42a6      	cmp	r6, r4
 8007834:	d105      	bne.n	8007842 <__libc_init_array+0x2e>
 8007836:	bd70      	pop	{r4, r5, r6, pc}
 8007838:	f855 3b04 	ldr.w	r3, [r5], #4
 800783c:	4798      	blx	r3
 800783e:	3601      	adds	r6, #1
 8007840:	e7ee      	b.n	8007820 <__libc_init_array+0xc>
 8007842:	f855 3b04 	ldr.w	r3, [r5], #4
 8007846:	4798      	blx	r3
 8007848:	3601      	adds	r6, #1
 800784a:	e7f2      	b.n	8007832 <__libc_init_array+0x1e>
 800784c:	08007a08 	.word	0x08007a08
 8007850:	08007a08 	.word	0x08007a08
 8007854:	08007a08 	.word	0x08007a08
 8007858:	08007a0c 	.word	0x08007a0c

0800785c <memcpy>:
 800785c:	440a      	add	r2, r1
 800785e:	4291      	cmp	r1, r2
 8007860:	f100 33ff 	add.w	r3, r0, #4294967295
 8007864:	d100      	bne.n	8007868 <memcpy+0xc>
 8007866:	4770      	bx	lr
 8007868:	b510      	push	{r4, lr}
 800786a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800786e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007872:	4291      	cmp	r1, r2
 8007874:	d1f9      	bne.n	800786a <memcpy+0xe>
 8007876:	bd10      	pop	{r4, pc}

08007878 <_init>:
 8007878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787a:	bf00      	nop
 800787c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800787e:	bc08      	pop	{r3}
 8007880:	469e      	mov	lr, r3
 8007882:	4770      	bx	lr

08007884 <_fini>:
 8007884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007886:	bf00      	nop
 8007888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800788a:	bc08      	pop	{r3}
 800788c:	469e      	mov	lr, r3
 800788e:	4770      	bx	lr
