
stm-usb-touchscreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007514  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080076d8  080076d8  000086d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007748  08007748  000093c8  2**0
                  CONTENTS
  4 .ARM          00000008  08007748  08007748  00008748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007750  08007750  000093c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007750  08007750  00008750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007754  08007754  00008754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003c8  20000000  08007758  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a24  200003c8  08007b20  000093c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dec  08007b20  00009dec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000093c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de74  00000000  00000000  000093f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bd1  00000000  00000000  0001726c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  00019e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b9  00000000  00000000  0001aa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023552  00000000  00000000  0001b2c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a6a  00000000  00000000  0003e81b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9c8b  00000000  00000000  0004f285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118f10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002eec  00000000  00000000  00118f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0011be40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200003c8 	.word	0x200003c8
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080076c0 	.word	0x080076c0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200003cc 	.word	0x200003cc
 8000200:	080076c0 	.word	0x080076c0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 f9e5 	bl	80008c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f865 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f8cf 	bl	80006a4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000506:	f006 fbcf 	bl	8006ca8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  int user_button_pressed = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
  touchscreen_init();
 800050e:	f006 fafd 	bl	8006b0c <touchscreen_init>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
			if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 8000512:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000516:	482b      	ldr	r0, [pc, #172]	@ (80005c4 <main+0xd0>)
 8000518:	f000 fd12 	bl	8000f40 <HAL_GPIO_ReadPin>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d002      	beq.n	8000528 <main+0x34>
			{
				user_button_pressed = 1;
 8000522:	2301      	movs	r3, #1
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	e7f4      	b.n	8000512 <main+0x1e>
			}
			else if (user_button_pressed)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d0f1      	beq.n	8000512 <main+0x1e>
			{
				HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 800052e:	2201      	movs	r2, #1
 8000530:	2101      	movs	r1, #1
 8000532:	4825      	ldr	r0, [pc, #148]	@ (80005c8 <main+0xd4>)
 8000534:	f000 fd1c 	bl	8000f70 <HAL_GPIO_WritePin>
				HAL_Delay(250);
 8000538:	20fa      	movs	r0, #250	@ 0xfa
 800053a:	f000 fa37 	bl	80009ac <HAL_Delay>
				HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	2101      	movs	r1, #1
 8000542:	4821      	ldr	r0, [pc, #132]	@ (80005c8 <main+0xd4>)
 8000544:	f000 fd14 	bl	8000f70 <HAL_GPIO_WritePin>
				user_button_pressed = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
//				touchscreen_update((uint16_t)(HAL_GetTick() * 10));
//				HAL_Delay(50);
//				touchscreen_reset(0);
//				touchscreen_update((uint16_t)(HAL_GetTick() * 10));

				touchscreen_set(0, 600, 600);
 800054c:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000550:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8000554:	2000      	movs	r0, #0
 8000556:	f006 fb05 	bl	8006b64 <touchscreen_set>
				touchscreen_update((uint16_t)(HAL_GetTick() * 10));
 800055a:	f000 fa1b 	bl	8000994 <HAL_GetTick>
 800055e:	4603      	mov	r3, r0
 8000560:	b29b      	uxth	r3, r3
 8000562:	461a      	mov	r2, r3
 8000564:	0092      	lsls	r2, r2, #2
 8000566:	4413      	add	r3, r2
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	b29b      	uxth	r3, r3
 800056c:	4618      	mov	r0, r3
 800056e:	f006 fb5b 	bl	8006c28 <touchscreen_update>
				HAL_Delay(500);
 8000572:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000576:	f000 fa19 	bl	80009ac <HAL_Delay>
				touchscreen_reset(0);
 800057a:	2000      	movs	r0, #0
 800057c:	f006 fb36 	bl	8006bec <touchscreen_reset>
				touchscreen_update((uint16_t)(HAL_GetTick() * 10));
 8000580:	f000 fa08 	bl	8000994 <HAL_GetTick>
 8000584:	4603      	mov	r3, r0
 8000586:	b29b      	uxth	r3, r3
 8000588:	461a      	mov	r2, r3
 800058a:	0092      	lsls	r2, r2, #2
 800058c:	4413      	add	r3, r2
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	b29b      	uxth	r3, r3
 8000592:	4618      	mov	r0, r3
 8000594:	f006 fb48 	bl	8006c28 <touchscreen_update>
				touchscreen_reset(0);
 8000598:	2000      	movs	r0, #0
 800059a:	f006 fb27 	bl	8006bec <touchscreen_reset>
				HAL_Delay(100);
 800059e:	2064      	movs	r0, #100	@ 0x64
 80005a0:	f000 fa04 	bl	80009ac <HAL_Delay>
				touchscreen_update((uint16_t)(HAL_GetTick() * 10));
 80005a4:	f000 f9f6 	bl	8000994 <HAL_GetTick>
 80005a8:	4603      	mov	r3, r0
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	461a      	mov	r2, r3
 80005ae:	0092      	lsls	r2, r2, #2
 80005b0:	4413      	add	r3, r2
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	4618      	mov	r0, r3
 80005b8:	f006 fb36 	bl	8006c28 <touchscreen_update>
				HAL_Delay(250);
 80005bc:	20fa      	movs	r0, #250	@ 0xfa
 80005be:	f000 f9f5 	bl	80009ac <HAL_Delay>
			if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin))
 80005c2:	e7a6      	b.n	8000512 <main+0x1e>
 80005c4:	40020800 	.word	0x40020800
 80005c8:	40020400 	.word	0x40020400

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	@ 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 031c 	add.w	r3, r7, #28
 80005d6:	2234      	movs	r2, #52	@ 0x34
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f007 f844 	bl	8007668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 0308 	add.w	r3, r7, #8
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	4b29      	ldr	r3, [pc, #164]	@ (800069c <SystemClock_Config+0xd0>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f8:	4a28      	ldr	r2, [pc, #160]	@ (800069c <SystemClock_Config+0xd0>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000600:	4b26      	ldr	r3, [pc, #152]	@ (800069c <SystemClock_Config+0xd0>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	2300      	movs	r3, #0
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	4b23      	ldr	r3, [pc, #140]	@ (80006a0 <SystemClock_Config+0xd4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a22      	ldr	r2, [pc, #136]	@ (80006a0 <SystemClock_Config+0xd4>)
 8000616:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b20      	ldr	r3, [pc, #128]	@ (80006a0 <SystemClock_Config+0xd4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000624:	603b      	str	r3, [r7, #0]
 8000626:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000628:	2301      	movs	r3, #1
 800062a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000630:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000636:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800063a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000640:	23a8      	movs	r3, #168	@ 0xa8
 8000642:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000648:	2307      	movs	r3, #7
 800064a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800064c:	2302      	movs	r3, #2
 800064e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 031c 	add.w	r3, r7, #28
 8000654:	4618      	mov	r0, r3
 8000656:	f002 fd75 	bl	8003144 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000660:	f000 f88e 	bl	8000780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2302      	movs	r3, #2
 800066a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000670:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000674:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000676:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800067a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	2105      	movs	r1, #5
 8000682:	4618      	mov	r0, r3
 8000684:	f001 ff12 	bl	80024ac <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800068e:	f000 f877 	bl	8000780 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3750      	adds	r7, #80	@ 0x50
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	@ 0x28
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <MX_GPIO_Init+0xd0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	4a2c      	ldr	r2, [pc, #176]	@ (8000774 <MX_GPIO_Init+0xd0>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000774 <MX_GPIO_Init+0xd0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	4b26      	ldr	r3, [pc, #152]	@ (8000774 <MX_GPIO_Init+0xd0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a25      	ldr	r2, [pc, #148]	@ (8000774 <MX_GPIO_Init+0xd0>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <MX_GPIO_Init+0xd0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000774 <MX_GPIO_Init+0xd0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a1e      	ldr	r2, [pc, #120]	@ (8000774 <MX_GPIO_Init+0xd0>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b1c      	ldr	r3, [pc, #112]	@ (8000774 <MX_GPIO_Init+0xd0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <MX_GPIO_Init+0xd0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a17      	ldr	r2, [pc, #92]	@ (8000774 <MX_GPIO_Init+0xd0>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <MX_GPIO_Init+0xd0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2101      	movs	r1, #1
 800072e:	4812      	ldr	r0, [pc, #72]	@ (8000778 <MX_GPIO_Init+0xd4>)
 8000730:	f000 fc1e 	bl	8000f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000734:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800073a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800073e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4619      	mov	r1, r3
 800074a:	480c      	ldr	r0, [pc, #48]	@ (800077c <MX_GPIO_Init+0xd8>)
 800074c:	f000 fa64 	bl	8000c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000750:	2301      	movs	r3, #1
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	2301      	movs	r3, #1
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	4804      	ldr	r0, [pc, #16]	@ (8000778 <MX_GPIO_Init+0xd4>)
 8000768:	f000 fa56 	bl	8000c18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800076c:	bf00      	nop
 800076e:	3728      	adds	r7, #40	@ 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40023800 	.word	0x40023800
 8000778:	40020400 	.word	0x40020400
 800077c:	40020800 	.word	0x40020800

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <Error_Handler+0x8>

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b10      	ldr	r3, [pc, #64]	@ (80007d8 <HAL_MspInit+0x4c>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800079a:	4a0f      	ldr	r2, [pc, #60]	@ (80007d8 <HAL_MspInit+0x4c>)
 800079c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007a2:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b6:	4a08      	ldr	r2, [pc, #32]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80007be:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800

080007dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <NMI_Handler+0x4>

080007e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <HardFault_Handler+0x4>

080007ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <MemManage_Handler+0x4>

080007f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <BusFault_Handler+0x4>

080007fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <UsageFault_Handler+0x4>

08000804 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000832:	f000 f89b 	bl	800096c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000840:	4802      	ldr	r0, [pc, #8]	@ (800084c <OTG_FS_IRQHandler+0x10>)
 8000842:	f000 fcf9 	bl	8001238 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200008ec 	.word	0x200008ec

08000850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <SystemInit+0x20>)
 8000856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800085a:	4a05      	ldr	r2, [pc, #20]	@ (8000870 <SystemInit+0x20>)
 800085c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000860:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000874:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000878:	f7ff ffea 	bl	8000850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800087c:	480c      	ldr	r0, [pc, #48]	@ (80008b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800087e:	490d      	ldr	r1, [pc, #52]	@ (80008b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000880:	4a0d      	ldr	r2, [pc, #52]	@ (80008b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000884:	e002      	b.n	800088c <LoopCopyDataInit>

08000886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088a:	3304      	adds	r3, #4

0800088c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800088c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000890:	d3f9      	bcc.n	8000886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000892:	4a0a      	ldr	r2, [pc, #40]	@ (80008bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000894:	4c0a      	ldr	r4, [pc, #40]	@ (80008c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000898:	e001      	b.n	800089e <LoopFillZerobss>

0800089a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800089c:	3204      	adds	r2, #4

0800089e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a0:	d3fb      	bcc.n	800089a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80008a2:	f006 fee9 	bl	8007678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008a6:	f7ff fe25 	bl	80004f4 <main>
  bx  lr    
 80008aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b4:	200003c8 	.word	0x200003c8
  ldr r2, =_sidata
 80008b8:	08007758 	.word	0x08007758
  ldr r2, =_sbss
 80008bc:	200003c8 	.word	0x200003c8
  ldr r4, =_ebss
 80008c0:	20000dec 	.word	0x20000dec

080008c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008c4:	e7fe      	b.n	80008c4 <ADC_IRQHandler>
	...

080008c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <HAL_Init+0x40>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000908 <HAL_Init+0x40>)
 80008d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <HAL_Init+0x40>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000908 <HAL_Init+0x40>)
 80008de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e4:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <HAL_Init+0x40>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a07      	ldr	r2, [pc, #28]	@ (8000908 <HAL_Init+0x40>)
 80008ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f0:	2003      	movs	r0, #3
 80008f2:	f000 f94f 	bl	8000b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008f6:	2000      	movs	r0, #0
 80008f8:	f000 f808 	bl	800090c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008fc:	f7ff ff46 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023c00 	.word	0x40023c00

0800090c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <HAL_InitTick+0x54>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <HAL_InitTick+0x58>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4619      	mov	r1, r3
 800091e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000922:	fbb3 f3f1 	udiv	r3, r3, r1
 8000926:	fbb2 f3f3 	udiv	r3, r2, r3
 800092a:	4618      	mov	r0, r3
 800092c:	f000 f967 	bl	8000bfe <HAL_SYSTICK_Config>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	e00e      	b.n	8000958 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b0f      	cmp	r3, #15
 800093e:	d80a      	bhi.n	8000956 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000940:	2200      	movs	r2, #0
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	f000 f92f 	bl	8000baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800094c:	4a06      	ldr	r2, [pc, #24]	@ (8000968 <HAL_InitTick+0x5c>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000952:	2300      	movs	r3, #0
 8000954:	e000      	b.n	8000958 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000000 	.word	0x20000000
 8000964:	20000008 	.word	0x20000008
 8000968:	20000004 	.word	0x20000004

0800096c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000970:	4b06      	ldr	r3, [pc, #24]	@ (800098c <HAL_IncTick+0x20>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <HAL_IncTick+0x24>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4413      	add	r3, r2
 800097c:	4a04      	ldr	r2, [pc, #16]	@ (8000990 <HAL_IncTick+0x24>)
 800097e:	6013      	str	r3, [r2, #0]
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20000008 	.word	0x20000008
 8000990:	200003e4 	.word	0x200003e4

08000994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return uwTick;
 8000998:	4b03      	ldr	r3, [pc, #12]	@ (80009a8 <HAL_GetTick+0x14>)
 800099a:	681b      	ldr	r3, [r3, #0]
}
 800099c:	4618      	mov	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	200003e4 	.word	0x200003e4

080009ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b4:	f7ff ffee 	bl	8000994 <HAL_GetTick>
 80009b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c4:	d005      	beq.n	80009d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009c6:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <HAL_Delay+0x44>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	461a      	mov	r2, r3
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4413      	add	r3, r2
 80009d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009d2:	bf00      	nop
 80009d4:	f7ff ffde 	bl	8000994 <HAL_GetTick>
 80009d8:	4602      	mov	r2, r0
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d8f7      	bhi.n	80009d4 <HAL_Delay+0x28>
  {
  }
}
 80009e4:	bf00      	nop
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000008 	.word	0x20000008

080009f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a10:	4013      	ands	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a26:	4a04      	ldr	r2, [pc, #16]	@ (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	60d3      	str	r3, [r2, #12]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a40:	4b04      	ldr	r3, [pc, #16]	@ (8000a54 <__NVIC_GetPriorityGrouping+0x18>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	f003 0307 	and.w	r3, r3, #7
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	db0b      	blt.n	8000a82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	f003 021f 	and.w	r2, r3, #31
 8000a70:	4907      	ldr	r1, [pc, #28]	@ (8000a90 <__NVIC_EnableIRQ+0x38>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	095b      	lsrs	r3, r3, #5
 8000a78:	2001      	movs	r0, #1
 8000a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000e100 	.word	0xe000e100

08000a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	6039      	str	r1, [r7, #0]
 8000a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	db0a      	blt.n	8000abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	490c      	ldr	r1, [pc, #48]	@ (8000ae0 <__NVIC_SetPriority+0x4c>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	0112      	lsls	r2, r2, #4
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	440b      	add	r3, r1
 8000ab8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000abc:	e00a      	b.n	8000ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4908      	ldr	r1, [pc, #32]	@ (8000ae4 <__NVIC_SetPriority+0x50>)
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	f003 030f 	and.w	r3, r3, #15
 8000aca:	3b04      	subs	r3, #4
 8000acc:	0112      	lsls	r2, r2, #4
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	440b      	add	r3, r1
 8000ad2:	761a      	strb	r2, [r3, #24]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000e100 	.word	0xe000e100
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b089      	sub	sp, #36	@ 0x24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	f1c3 0307 	rsb	r3, r3, #7
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	bf28      	it	cs
 8000b06:	2304      	movcs	r3, #4
 8000b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	2b06      	cmp	r3, #6
 8000b10:	d902      	bls.n	8000b18 <NVIC_EncodePriority+0x30>
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3b03      	subs	r3, #3
 8000b16:	e000      	b.n	8000b1a <NVIC_EncodePriority+0x32>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43da      	mvns	r2, r3
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b30:	f04f 31ff 	mov.w	r1, #4294967295
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3a:	43d9      	mvns	r1, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	4313      	orrs	r3, r2
         );
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3724      	adds	r7, #36	@ 0x24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
	...

08000b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b60:	d301      	bcc.n	8000b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b62:	2301      	movs	r3, #1
 8000b64:	e00f      	b.n	8000b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b66:	4a0a      	ldr	r2, [pc, #40]	@ (8000b90 <SysTick_Config+0x40>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b6e:	210f      	movs	r1, #15
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	f7ff ff8e 	bl	8000a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b78:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <SysTick_Config+0x40>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7e:	4b04      	ldr	r3, [pc, #16]	@ (8000b90 <SysTick_Config+0x40>)
 8000b80:	2207      	movs	r2, #7
 8000b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	e000e010 	.word	0xe000e010

08000b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ff29 	bl	80009f4 <__NVIC_SetPriorityGrouping>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b086      	sub	sp, #24
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bbc:	f7ff ff3e 	bl	8000a3c <__NVIC_GetPriorityGrouping>
 8000bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	68b9      	ldr	r1, [r7, #8]
 8000bc6:	6978      	ldr	r0, [r7, #20]
 8000bc8:	f7ff ff8e 	bl	8000ae8 <NVIC_EncodePriority>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff5d 	bl	8000a94 <__NVIC_SetPriority>
}
 8000bda:	bf00      	nop
 8000bdc:	3718      	adds	r7, #24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	4603      	mov	r3, r0
 8000bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff31 	bl	8000a58 <__NVIC_EnableIRQ>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff ffa2 	bl	8000b50 <SysTick_Config>
 8000c0c:	4603      	mov	r3, r0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b089      	sub	sp, #36	@ 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
 8000c32:	e165      	b.n	8000f00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c34:	2201      	movs	r2, #1
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	697a      	ldr	r2, [r7, #20]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	f040 8154 	bne.w	8000efa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 0303 	and.w	r3, r3, #3
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d005      	beq.n	8000c6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d130      	bne.n	8000ccc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	2203      	movs	r2, #3
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	68da      	ldr	r2, [r3, #12]
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4013      	ands	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	091b      	lsrs	r3, r3, #4
 8000cb6:	f003 0201 	and.w	r2, r3, #1
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	2b03      	cmp	r3, #3
 8000cd6:	d017      	beq.n	8000d08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	4013      	ands	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0303 	and.w	r3, r3, #3
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d123      	bne.n	8000d5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	08da      	lsrs	r2, r3, #3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3208      	adds	r2, #8
 8000d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	f003 0307 	and.w	r3, r3, #7
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	220f      	movs	r2, #15
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	691a      	ldr	r2, [r3, #16]
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	08da      	lsrs	r2, r3, #3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	3208      	adds	r2, #8
 8000d56:	69b9      	ldr	r1, [r7, #24]
 8000d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	2203      	movs	r2, #3
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0203 	and.w	r2, r3, #3
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f000 80ae 	beq.w	8000efa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b5d      	ldr	r3, [pc, #372]	@ (8000f18 <HAL_GPIO_Init+0x300>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da6:	4a5c      	ldr	r2, [pc, #368]	@ (8000f18 <HAL_GPIO_Init+0x300>)
 8000da8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dae:	4b5a      	ldr	r3, [pc, #360]	@ (8000f18 <HAL_GPIO_Init+0x300>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dba:	4a58      	ldr	r2, [pc, #352]	@ (8000f1c <HAL_GPIO_Init+0x304>)
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	089b      	lsrs	r3, r3, #2
 8000dc0:	3302      	adds	r3, #2
 8000dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f003 0303 	and.w	r3, r3, #3
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	220f      	movs	r2, #15
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a4f      	ldr	r2, [pc, #316]	@ (8000f20 <HAL_GPIO_Init+0x308>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d025      	beq.n	8000e32 <HAL_GPIO_Init+0x21a>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a4e      	ldr	r2, [pc, #312]	@ (8000f24 <HAL_GPIO_Init+0x30c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d01f      	beq.n	8000e2e <HAL_GPIO_Init+0x216>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a4d      	ldr	r2, [pc, #308]	@ (8000f28 <HAL_GPIO_Init+0x310>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d019      	beq.n	8000e2a <HAL_GPIO_Init+0x212>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a4c      	ldr	r2, [pc, #304]	@ (8000f2c <HAL_GPIO_Init+0x314>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d013      	beq.n	8000e26 <HAL_GPIO_Init+0x20e>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a4b      	ldr	r2, [pc, #300]	@ (8000f30 <HAL_GPIO_Init+0x318>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d00d      	beq.n	8000e22 <HAL_GPIO_Init+0x20a>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a4a      	ldr	r2, [pc, #296]	@ (8000f34 <HAL_GPIO_Init+0x31c>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d007      	beq.n	8000e1e <HAL_GPIO_Init+0x206>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a49      	ldr	r2, [pc, #292]	@ (8000f38 <HAL_GPIO_Init+0x320>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d101      	bne.n	8000e1a <HAL_GPIO_Init+0x202>
 8000e16:	2306      	movs	r3, #6
 8000e18:	e00c      	b.n	8000e34 <HAL_GPIO_Init+0x21c>
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	e00a      	b.n	8000e34 <HAL_GPIO_Init+0x21c>
 8000e1e:	2305      	movs	r3, #5
 8000e20:	e008      	b.n	8000e34 <HAL_GPIO_Init+0x21c>
 8000e22:	2304      	movs	r3, #4
 8000e24:	e006      	b.n	8000e34 <HAL_GPIO_Init+0x21c>
 8000e26:	2303      	movs	r3, #3
 8000e28:	e004      	b.n	8000e34 <HAL_GPIO_Init+0x21c>
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	e002      	b.n	8000e34 <HAL_GPIO_Init+0x21c>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e000      	b.n	8000e34 <HAL_GPIO_Init+0x21c>
 8000e32:	2300      	movs	r3, #0
 8000e34:	69fa      	ldr	r2, [r7, #28]
 8000e36:	f002 0203 	and.w	r2, r2, #3
 8000e3a:	0092      	lsls	r2, r2, #2
 8000e3c:	4093      	lsls	r3, r2
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e44:	4935      	ldr	r1, [pc, #212]	@ (8000f1c <HAL_GPIO_Init+0x304>)
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	089b      	lsrs	r3, r3, #2
 8000e4a:	3302      	adds	r3, #2
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e52:	4b3a      	ldr	r3, [pc, #232]	@ (8000f3c <HAL_GPIO_Init+0x324>)
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e76:	4a31      	ldr	r2, [pc, #196]	@ (8000f3c <HAL_GPIO_Init+0x324>)
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000f3c <HAL_GPIO_Init+0x324>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ea0:	4a26      	ldr	r2, [pc, #152]	@ (8000f3c <HAL_GPIO_Init+0x324>)
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ea6:	4b25      	ldr	r3, [pc, #148]	@ (8000f3c <HAL_GPIO_Init+0x324>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000eca:	4a1c      	ldr	r2, [pc, #112]	@ (8000f3c <HAL_GPIO_Init+0x324>)
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f3c <HAL_GPIO_Init+0x324>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d003      	beq.n	8000ef4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ef4:	4a11      	ldr	r2, [pc, #68]	@ (8000f3c <HAL_GPIO_Init+0x324>)
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3301      	adds	r3, #1
 8000efe:	61fb      	str	r3, [r7, #28]
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	2b0f      	cmp	r3, #15
 8000f04:	f67f ae96 	bls.w	8000c34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	3724      	adds	r7, #36	@ 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40013800 	.word	0x40013800
 8000f20:	40020000 	.word	0x40020000
 8000f24:	40020400 	.word	0x40020400
 8000f28:	40020800 	.word	0x40020800
 8000f2c:	40020c00 	.word	0x40020c00
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40021400 	.word	0x40021400
 8000f38:	40021800 	.word	0x40021800
 8000f3c:	40013c00 	.word	0x40013c00

08000f40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	691a      	ldr	r2, [r3, #16]
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	4013      	ands	r3, r2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d002      	beq.n	8000f5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
 8000f5c:	e001      	b.n	8000f62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	807b      	strh	r3, [r7, #2]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f80:	787b      	ldrb	r3, [r7, #1]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f86:	887a      	ldrh	r2, [r7, #2]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f8c:	e003      	b.n	8000f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f8e:	887b      	ldrh	r3, [r7, #2]
 8000f90:	041a      	lsls	r2, r3, #16
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	619a      	str	r2, [r3, #24]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af02      	add	r7, sp, #8
 8000fa8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e108      	b.n	80011c6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d106      	bne.n	8000fd4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f005 ffe4 	bl	8006f9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fe2:	d102      	bne.n	8000fea <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f002 fc5d 	bl	80038ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	7c1a      	ldrb	r2, [r3, #16]
 8000ffc:	f88d 2000 	strb.w	r2, [sp]
 8001000:	3304      	adds	r3, #4
 8001002:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001004:	f002 fb3c 	bl	8003680 <USB_CoreInit>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d005      	beq.n	800101a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2202      	movs	r2, #2
 8001012:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e0d5      	b.n	80011c6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f002 fc55 	bl	80038d0 <USB_SetCurrentMode>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d005      	beq.n	8001038 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2202      	movs	r2, #2
 8001030:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e0c6      	b.n	80011c6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001038:	2300      	movs	r3, #0
 800103a:	73fb      	strb	r3, [r7, #15]
 800103c:	e04a      	b.n	80010d4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800103e:	7bfa      	ldrb	r2, [r7, #15]
 8001040:	6879      	ldr	r1, [r7, #4]
 8001042:	4613      	mov	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	4413      	add	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	440b      	add	r3, r1
 800104c:	3315      	adds	r3, #21
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001052:	7bfa      	ldrb	r2, [r7, #15]
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	4613      	mov	r3, r2
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4413      	add	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	440b      	add	r3, r1
 8001060:	3314      	adds	r3, #20
 8001062:	7bfa      	ldrb	r2, [r7, #15]
 8001064:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001066:	7bfa      	ldrb	r2, [r7, #15]
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	b298      	uxth	r0, r3
 800106c:	6879      	ldr	r1, [r7, #4]
 800106e:	4613      	mov	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	440b      	add	r3, r1
 8001078:	332e      	adds	r3, #46	@ 0x2e
 800107a:	4602      	mov	r2, r0
 800107c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800107e:	7bfa      	ldrb	r2, [r7, #15]
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	4613      	mov	r3, r2
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	4413      	add	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	440b      	add	r3, r1
 800108c:	3318      	adds	r3, #24
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001092:	7bfa      	ldrb	r2, [r7, #15]
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	4613      	mov	r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	4413      	add	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	440b      	add	r3, r1
 80010a0:	331c      	adds	r3, #28
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010a6:	7bfa      	ldrb	r2, [r7, #15]
 80010a8:	6879      	ldr	r1, [r7, #4]
 80010aa:	4613      	mov	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	4413      	add	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	440b      	add	r3, r1
 80010b4:	3320      	adds	r3, #32
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010ba:	7bfa      	ldrb	r2, [r7, #15]
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4413      	add	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	440b      	add	r3, r1
 80010c8:	3324      	adds	r3, #36	@ 0x24
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	3301      	adds	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	791b      	ldrb	r3, [r3, #4]
 80010d8:	7bfa      	ldrb	r2, [r7, #15]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d3af      	bcc.n	800103e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]
 80010e2:	e044      	b.n	800116e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010e4:	7bfa      	ldrb	r2, [r7, #15]
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	4613      	mov	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	4413      	add	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010fa:	7bfa      	ldrb	r2, [r7, #15]
 80010fc:	6879      	ldr	r1, [r7, #4]
 80010fe:	4613      	mov	r3, r2
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	4413      	add	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	440b      	add	r3, r1
 8001108:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800110c:	7bfa      	ldrb	r2, [r7, #15]
 800110e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001110:	7bfa      	ldrb	r2, [r7, #15]
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	4613      	mov	r3, r2
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	4413      	add	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	440b      	add	r3, r1
 800111e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001126:	7bfa      	ldrb	r2, [r7, #15]
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	4413      	add	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	440b      	add	r3, r1
 8001134:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800113c:	7bfa      	ldrb	r2, [r7, #15]
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	4613      	mov	r3, r2
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001152:	7bfa      	ldrb	r2, [r7, #15]
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	4413      	add	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	440b      	add	r3, r1
 8001160:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	3301      	adds	r3, #1
 800116c:	73fb      	strb	r3, [r7, #15]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	791b      	ldrb	r3, [r3, #4]
 8001172:	7bfa      	ldrb	r2, [r7, #15]
 8001174:	429a      	cmp	r2, r3
 8001176:	d3b5      	bcc.n	80010e4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7c1a      	ldrb	r2, [r3, #16]
 8001180:	f88d 2000 	strb.w	r2, [sp]
 8001184:	3304      	adds	r3, #4
 8001186:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001188:	f002 fbee 	bl	8003968 <USB_DevInit>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d005      	beq.n	800119e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2202      	movs	r2, #2
 8001196:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e013      	b.n	80011c6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2201      	movs	r2, #1
 80011a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	7b1b      	ldrb	r3, [r3, #12]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d102      	bne.n	80011ba <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f001 f955 	bl	8002464 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f003 fc25 	bl	8004a0e <USB_DevDisconnect>

  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d101      	bne.n	80011ea <HAL_PCD_Start+0x1c>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e022      	b.n	8001230 <HAL_PCD_Start+0x62>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d009      	beq.n	8001212 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001202:	2b01      	cmp	r3, #1
 8001204:	d105      	bne.n	8001212 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800120a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f002 fb38 	bl	800388c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f003 fbd3 	bl	80049cc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b08d      	sub	sp, #52	@ 0x34
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001246:	6a3b      	ldr	r3, [r7, #32]
 8001248:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f003 fc91 	bl	8004b76 <USB_GetMode>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	f040 84b9 	bne.w	8001bce <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f003 fbf5 	bl	8004a50 <USB_ReadInterrupts>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 84af 	beq.w	8001bcc <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	0a1b      	lsrs	r3, r3, #8
 8001278:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f003 fbe2 	bl	8004a50 <USB_ReadInterrupts>
 800128c:	4603      	mov	r3, r0
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b02      	cmp	r3, #2
 8001294:	d107      	bne.n	80012a6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	695a      	ldr	r2, [r3, #20]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f002 0202 	and.w	r2, r2, #2
 80012a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f003 fbd0 	bl	8004a50 <USB_ReadInterrupts>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f003 0310 	and.w	r3, r3, #16
 80012b6:	2b10      	cmp	r3, #16
 80012b8:	d161      	bne.n	800137e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	699a      	ldr	r2, [r3, #24]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0210 	bic.w	r2, r2, #16
 80012c8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	6a1b      	ldr	r3, [r3, #32]
 80012ce:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	f003 020f 	and.w	r2, r3, #15
 80012d6:	4613      	mov	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	4413      	add	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	3304      	adds	r3, #4
 80012e8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	0c5b      	lsrs	r3, r3, #17
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d124      	bne.n	8001340 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80012fc:	4013      	ands	r3, r2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d035      	beq.n	800136e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	091b      	lsrs	r3, r3, #4
 800130a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800130c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001310:	b29b      	uxth	r3, r3
 8001312:	461a      	mov	r2, r3
 8001314:	6a38      	ldr	r0, [r7, #32]
 8001316:	f003 fa07 	bl	8004728 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	091b      	lsrs	r3, r3, #4
 8001322:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001326:	441a      	add	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	695a      	ldr	r2, [r3, #20]
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001338:	441a      	add	r2, r3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	615a      	str	r2, [r3, #20]
 800133e:	e016      	b.n	800136e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	0c5b      	lsrs	r3, r3, #17
 8001344:	f003 030f 	and.w	r3, r3, #15
 8001348:	2b06      	cmp	r3, #6
 800134a:	d110      	bne.n	800136e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001352:	2208      	movs	r2, #8
 8001354:	4619      	mov	r1, r3
 8001356:	6a38      	ldr	r0, [r7, #32]
 8001358:	f003 f9e6 	bl	8004728 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	695a      	ldr	r2, [r3, #20]
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	091b      	lsrs	r3, r3, #4
 8001364:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001368:	441a      	add	r2, r3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	699a      	ldr	r2, [r3, #24]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f042 0210 	orr.w	r2, r2, #16
 800137c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f003 fb64 	bl	8004a50 <USB_ReadInterrupts>
 8001388:	4603      	mov	r3, r0
 800138a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800138e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001392:	f040 80a7 	bne.w	80014e4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f003 fb69 	bl	8004a76 <USB_ReadDevAllOutEpInterrupt>
 80013a4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80013a6:	e099      	b.n	80014dc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 808e 	beq.w	80014d0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f003 fb8d 	bl	8004ade <USB_ReadDevOutEPInterrupt>
 80013c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00c      	beq.n	80013ea <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80013d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d2:	015a      	lsls	r2, r3, #5
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	4413      	add	r3, r2
 80013d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013dc:	461a      	mov	r2, r3
 80013de:	2301      	movs	r3, #1
 80013e0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80013e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 feb7 	bl	8002158 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00c      	beq.n	800140e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f6:	015a      	lsls	r2, r3, #5
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	4413      	add	r3, r2
 80013fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001400:	461a      	mov	r2, r3
 8001402:	2308      	movs	r3, #8
 8001404:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001406:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 ff8d 	bl	8002328 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	f003 0310 	and.w	r3, r3, #16
 8001414:	2b00      	cmp	r3, #0
 8001416:	d008      	beq.n	800142a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141a:	015a      	lsls	r2, r3, #5
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	4413      	add	r3, r2
 8001420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001424:	461a      	mov	r2, r3
 8001426:	2310      	movs	r3, #16
 8001428:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d030      	beq.n	8001496 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001434:	6a3b      	ldr	r3, [r7, #32]
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800143c:	2b80      	cmp	r3, #128	@ 0x80
 800143e:	d109      	bne.n	8001454 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	69fa      	ldr	r2, [r7, #28]
 800144a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800144e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001452:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001454:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001456:	4613      	mov	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	3304      	adds	r3, #4
 8001468:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	78db      	ldrb	r3, [r3, #3]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d108      	bne.n	8001484 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	2200      	movs	r2, #0
 8001476:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147a:	b2db      	uxtb	r3, r3
 800147c:	4619      	mov	r1, r3
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f005 fea8 	bl	80071d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001486:	015a      	lsls	r2, r3, #5
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	4413      	add	r3, r2
 800148c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001490:	461a      	mov	r2, r3
 8001492:	2302      	movs	r3, #2
 8001494:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	f003 0320 	and.w	r3, r3, #32
 800149c:	2b00      	cmp	r3, #0
 800149e:	d008      	beq.n	80014b2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a2:	015a      	lsls	r2, r3, #5
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	4413      	add	r3, r2
 80014a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014ac:	461a      	mov	r2, r3
 80014ae:	2320      	movs	r3, #32
 80014b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d009      	beq.n	80014d0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014be:	015a      	lsls	r2, r3, #5
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	4413      	add	r3, r2
 80014c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014c8:	461a      	mov	r2, r3
 80014ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014ce:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80014d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d2:	3301      	adds	r3, #1
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80014d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014d8:	085b      	lsrs	r3, r3, #1
 80014da:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80014dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f47f af62 	bne.w	80013a8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 fab1 	bl	8004a50 <USB_ReadInterrupts>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80014f8:	f040 80db 	bne.w	80016b2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f003 fad2 	bl	8004aaa <USB_ReadDevAllInEpInterrupt>
 8001506:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800150c:	e0cd      	b.n	80016aa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800150e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 80c2 	beq.w	800169e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	4611      	mov	r1, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f003 faf8 	bl	8004b1a <USB_ReadDevInEPInterrupt>
 800152a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d057      	beq.n	80015e6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001538:	f003 030f 	and.w	r3, r3, #15
 800153c:	2201      	movs	r2, #1
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800154a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	43db      	mvns	r3, r3
 8001550:	69f9      	ldr	r1, [r7, #28]
 8001552:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001556:	4013      	ands	r3, r2
 8001558:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800155a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155c:	015a      	lsls	r2, r3, #5
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	4413      	add	r3, r2
 8001562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001566:	461a      	mov	r2, r3
 8001568:	2301      	movs	r3, #1
 800156a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	799b      	ldrb	r3, [r3, #6]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d132      	bne.n	80015da <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001578:	4613      	mov	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4413      	add	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	440b      	add	r3, r1
 8001582:	3320      	adds	r3, #32
 8001584:	6819      	ldr	r1, [r3, #0]
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800158a:	4613      	mov	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	4413      	add	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4403      	add	r3, r0
 8001594:	331c      	adds	r3, #28
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4419      	add	r1, r3
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800159e:	4613      	mov	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	4413      	add	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4403      	add	r3, r0
 80015a8:	3320      	adds	r3, #32
 80015aa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80015ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d113      	bne.n	80015da <HAL_PCD_IRQHandler+0x3a2>
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015b6:	4613      	mov	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	4413      	add	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	440b      	add	r3, r1
 80015c0:	3324      	adds	r3, #36	@ 0x24
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d108      	bne.n	80015da <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6818      	ldr	r0, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80015d2:	461a      	mov	r2, r3
 80015d4:	2101      	movs	r1, #1
 80015d6:	f003 faff 	bl	8004bd8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	4619      	mov	r1, r3
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f005 fd72 	bl	80070ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	f003 0308 	and.w	r3, r3, #8
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d008      	beq.n	8001602 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f2:	015a      	lsls	r2, r3, #5
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	4413      	add	r3, r2
 80015f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015fc:	461a      	mov	r2, r3
 80015fe:	2308      	movs	r3, #8
 8001600:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	f003 0310 	and.w	r3, r3, #16
 8001608:	2b00      	cmp	r3, #0
 800160a:	d008      	beq.n	800161e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800160c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160e:	015a      	lsls	r2, r3, #5
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	4413      	add	r3, r2
 8001614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001618:	461a      	mov	r2, r3
 800161a:	2310      	movs	r3, #16
 800161c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001624:	2b00      	cmp	r3, #0
 8001626:	d008      	beq.n	800163a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162a:	015a      	lsls	r2, r3, #5
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	4413      	add	r3, r2
 8001630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001634:	461a      	mov	r2, r3
 8001636:	2340      	movs	r3, #64	@ 0x40
 8001638:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d023      	beq.n	800168c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001644:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001646:	6a38      	ldr	r0, [r7, #32]
 8001648:	f002 faec 	bl	8003c24 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800164c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800164e:	4613      	mov	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	4413      	add	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	3310      	adds	r3, #16
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	4413      	add	r3, r2
 800165c:	3304      	adds	r3, #4
 800165e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	78db      	ldrb	r3, [r3, #3]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d108      	bne.n	800167a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	2200      	movs	r2, #0
 800166c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800166e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001670:	b2db      	uxtb	r3, r3
 8001672:	4619      	mov	r1, r3
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f005 fdbf 	bl	80071f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800167a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167c:	015a      	lsls	r2, r3, #5
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	4413      	add	r3, r2
 8001682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001686:	461a      	mov	r2, r3
 8001688:	2302      	movs	r3, #2
 800168a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001696:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 fcd0 	bl	800203e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800169e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a0:	3301      	adds	r3, #1
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80016a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016a6:	085b      	lsrs	r3, r3, #1
 80016a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80016aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f47f af2e 	bne.w	800150e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f003 f9ca 	bl	8004a50 <USB_ReadInterrupts>
 80016bc:	4603      	mov	r3, r0
 80016be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80016c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80016c6:	d122      	bne.n	800170e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	69fa      	ldr	r2, [r7, #28]
 80016d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d108      	bne.n	80016f8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016ee:	2100      	movs	r1, #0
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f005 ff27 	bl	8007544 <HAL_PCDEx_LPM_Callback>
 80016f6:	e002      	b.n	80016fe <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f005 fd5d 	bl	80071b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	695a      	ldr	r2, [r3, #20]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800170c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f003 f99c 	bl	8004a50 <USB_ReadInterrupts>
 8001718:	4603      	mov	r3, r0
 800171a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800171e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001722:	d112      	bne.n	800174a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b01      	cmp	r3, #1
 8001732:	d102      	bne.n	800173a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f005 fd19 	bl	800716c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	695a      	ldr	r2, [r3, #20]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001748:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f003 f97e 	bl	8004a50 <USB_ReadInterrupts>
 8001754:	4603      	mov	r3, r0
 8001756:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800175a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800175e:	d121      	bne.n	80017a4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800176e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001776:	2b00      	cmp	r3, #0
 8001778:	d111      	bne.n	800179e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001788:	089b      	lsrs	r3, r3, #2
 800178a:	f003 020f 	and.w	r2, r3, #15
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001794:	2101      	movs	r1, #1
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f005 fed4 	bl	8007544 <HAL_PCDEx_LPM_Callback>
 800179c:	e002      	b.n	80017a4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f005 fce4 	bl	800716c <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f003 f951 	bl	8004a50 <USB_ReadInterrupts>
 80017ae:	4603      	mov	r3, r0
 80017b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017b8:	f040 80b7 	bne.w	800192a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017ca:	f023 0301 	bic.w	r3, r3, #1
 80017ce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2110      	movs	r1, #16
 80017d6:	4618      	mov	r0, r3
 80017d8:	f002 fa24 	bl	8003c24 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017dc:	2300      	movs	r3, #0
 80017de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017e0:	e046      	b.n	8001870 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e4:	015a      	lsls	r2, r3, #5
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	4413      	add	r3, r2
 80017ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017ee:	461a      	mov	r2, r3
 80017f0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80017f4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017f8:	015a      	lsls	r2, r3, #5
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	4413      	add	r3, r2
 80017fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001806:	0151      	lsls	r1, r2, #5
 8001808:	69fa      	ldr	r2, [r7, #28]
 800180a:	440a      	add	r2, r1
 800180c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001810:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001814:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001818:	015a      	lsls	r2, r3, #5
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	4413      	add	r3, r2
 800181e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001822:	461a      	mov	r2, r3
 8001824:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001828:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800182a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800182c:	015a      	lsls	r2, r3, #5
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	4413      	add	r3, r2
 8001832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800183a:	0151      	lsls	r1, r2, #5
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	440a      	add	r2, r1
 8001840:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001844:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001848:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800184a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800184c:	015a      	lsls	r2, r3, #5
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	4413      	add	r3, r2
 8001852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800185a:	0151      	lsls	r1, r2, #5
 800185c:	69fa      	ldr	r2, [r7, #28]
 800185e:	440a      	add	r2, r1
 8001860:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001864:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001868:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800186a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800186c:	3301      	adds	r3, #1
 800186e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	791b      	ldrb	r3, [r3, #4]
 8001874:	461a      	mov	r2, r3
 8001876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001878:	4293      	cmp	r3, r2
 800187a:	d3b2      	bcc.n	80017e2 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	69fa      	ldr	r2, [r7, #28]
 8001886:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800188a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800188e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	7bdb      	ldrb	r3, [r3, #15]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d016      	beq.n	80018c6 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800189e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018a8:	f043 030b 	orr.w	r3, r3, #11
 80018ac:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018be:	f043 030b 	orr.w	r3, r3, #11
 80018c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80018c4:	e015      	b.n	80018f2 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018d8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80018dc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018ec:	f043 030b 	orr.w	r3, r3, #11
 80018f0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001900:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001904:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6818      	ldr	r0, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001914:	461a      	mov	r2, r3
 8001916:	f003 f95f 	bl	8004bd8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	695a      	ldr	r2, [r3, #20]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001928:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f003 f88e 	bl	8004a50 <USB_ReadInterrupts>
 8001934:	4603      	mov	r3, r0
 8001936:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800193a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800193e:	d123      	bne.n	8001988 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f003 f924 	bl	8004b92 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f002 f9e1 	bl	8003d16 <USB_GetDevSpeed>
 8001954:	4603      	mov	r3, r0
 8001956:	461a      	mov	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681c      	ldr	r4, [r3, #0]
 8001960:	f000 fe8a 	bl	8002678 <HAL_RCC_GetHCLKFreq>
 8001964:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800196a:	461a      	mov	r2, r3
 800196c:	4620      	mov	r0, r4
 800196e:	f001 feeb 	bl	8003748 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f005 fbd1 	bl	800711a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	695a      	ldr	r2, [r3, #20]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001986:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f003 f85f 	bl	8004a50 <USB_ReadInterrupts>
 8001992:	4603      	mov	r3, r0
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	2b08      	cmp	r3, #8
 800199a:	d10a      	bne.n	80019b2 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f005 fbae 	bl	80070fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	695a      	ldr	r2, [r3, #20]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f002 0208 	and.w	r2, r2, #8
 80019b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f003 f84a 	bl	8004a50 <USB_ReadInterrupts>
 80019bc:	4603      	mov	r3, r0
 80019be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019c2:	2b80      	cmp	r3, #128	@ 0x80
 80019c4:	d123      	bne.n	8001a0e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019c6:	6a3b      	ldr	r3, [r7, #32]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019d2:	2301      	movs	r3, #1
 80019d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80019d6:	e014      	b.n	8001a02 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019dc:	4613      	mov	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	4413      	add	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d105      	bne.n	80019fc <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	4619      	mov	r1, r3
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 faf0 	bl	8001fdc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fe:	3301      	adds	r3, #1
 8001a00:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	791b      	ldrb	r3, [r3, #4]
 8001a06:	461a      	mov	r2, r3
 8001a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d3e4      	bcc.n	80019d8 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f003 f81c 	bl	8004a50 <USB_ReadInterrupts>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a22:	d13c      	bne.n	8001a9e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a24:	2301      	movs	r3, #1
 8001a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a28:	e02b      	b.n	8001a82 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2c:	015a      	lsls	r2, r3, #5
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	4413      	add	r3, r2
 8001a32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a3e:	4613      	mov	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	4413      	add	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	440b      	add	r3, r1
 8001a48:	3318      	adds	r3, #24
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d115      	bne.n	8001a7c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a50:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	da12      	bge.n	8001a7c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	3317      	adds	r3, #23
 8001a66:	2201      	movs	r2, #1
 8001a68:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	4619      	mov	r1, r3
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 fab0 	bl	8001fdc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7e:	3301      	adds	r3, #1
 8001a80:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	791b      	ldrb	r3, [r3, #4]
 8001a86:	461a      	mov	r2, r3
 8001a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d3cd      	bcc.n	8001a2a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	695a      	ldr	r2, [r3, #20]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001a9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f002 ffd4 	bl	8004a50 <USB_ReadInterrupts>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ab2:	d156      	bne.n	8001b62 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ab8:	e045      	b.n	8001b46 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abc:	015a      	lsls	r2, r3, #5
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ace:	4613      	mov	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d12e      	bne.n	8001b40 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ae2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	da2b      	bge.n	8001b40 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001af4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d121      	bne.n	8001b40 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b00:	4613      	mov	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4413      	add	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001b0e:	2201      	movs	r2, #1
 8001b10:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b1e:	6a3b      	ldr	r3, [r7, #32]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10a      	bne.n	8001b40 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	69fa      	ldr	r2, [r7, #28]
 8001b34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b38:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b3c:	6053      	str	r3, [r2, #4]
            break;
 8001b3e:	e008      	b.n	8001b52 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b42:	3301      	adds	r3, #1
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	791b      	ldrb	r3, [r3, #4]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d3b3      	bcc.n	8001aba <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	695a      	ldr	r2, [r3, #20]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001b60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f002 ff72 	bl	8004a50 <USB_ReadInterrupts>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001b72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b76:	d10a      	bne.n	8001b8e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f005 fb4f 	bl	800721c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	695a      	ldr	r2, [r3, #20]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001b8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f002 ff5c 	bl	8004a50 <USB_ReadInterrupts>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d115      	bne.n	8001bce <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d002      	beq.n	8001bba <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f005 fb3f 	bl	8007238 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6859      	ldr	r1, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	e000      	b.n	8001bce <HAL_PCD_IRQHandler+0x996>
      return;
 8001bcc:	bf00      	nop
    }
  }
}
 8001bce:	3734      	adds	r7, #52	@ 0x34
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd90      	pop	{r4, r7, pc}

08001bd4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_PCD_SetAddress+0x1a>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e012      	b.n	8001c14 <HAL_PCD_SetAddress+0x40>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	78fa      	ldrb	r2, [r7, #3]
 8001bfa:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	78fa      	ldrb	r2, [r7, #3]
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f002 febb 	bl	8004980 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	4608      	mov	r0, r1
 8001c26:	4611      	mov	r1, r2
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	70fb      	strb	r3, [r7, #3]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	803b      	strh	r3, [r7, #0]
 8001c32:	4613      	mov	r3, r2
 8001c34:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	da0f      	bge.n	8001c62 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c42:	78fb      	ldrb	r3, [r7, #3]
 8001c44:	f003 020f 	and.w	r2, r3, #15
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	3310      	adds	r3, #16
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	3304      	adds	r3, #4
 8001c58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	705a      	strb	r2, [r3, #1]
 8001c60:	e00f      	b.n	8001c82 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c62:	78fb      	ldrb	r3, [r7, #3]
 8001c64:	f003 020f 	and.w	r2, r3, #15
 8001c68:	4613      	mov	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4413      	add	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	4413      	add	r3, r2
 8001c78:	3304      	adds	r3, #4
 8001c7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c8e:	883a      	ldrh	r2, [r7, #0]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	78ba      	ldrb	r2, [r7, #2]
 8001c98:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	785b      	ldrb	r3, [r3, #1]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d004      	beq.n	8001cac <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cac:	78bb      	ldrb	r3, [r7, #2]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d102      	bne.n	8001cb8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_PCD_EP_Open+0xaa>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e00e      	b.n	8001ce4 <HAL_PCD_EP_Open+0xc8>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68f9      	ldr	r1, [r7, #12]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f002 f843 	bl	8003d60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001ce2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	da0f      	bge.n	8001d20 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	f003 020f 	and.w	r2, r3, #15
 8001d06:	4613      	mov	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	3310      	adds	r3, #16
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	4413      	add	r3, r2
 8001d14:	3304      	adds	r3, #4
 8001d16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	705a      	strb	r2, [r3, #1]
 8001d1e:	e00f      	b.n	8001d40 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	f003 020f 	and.w	r2, r3, #15
 8001d26:	4613      	mov	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	4413      	add	r3, r2
 8001d36:	3304      	adds	r3, #4
 8001d38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d101      	bne.n	8001d5a <HAL_PCD_EP_Close+0x6e>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e00e      	b.n	8001d78 <HAL_PCD_EP_Close+0x8c>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68f9      	ldr	r1, [r7, #12]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f002 f881 	bl	8003e70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d90:	7afb      	ldrb	r3, [r7, #11]
 8001d92:	f003 020f 	and.w	r2, r3, #15
 8001d96:	4613      	mov	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	4413      	add	r3, r2
 8001da6:	3304      	adds	r3, #4
 8001da8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	2200      	movs	r2, #0
 8001dba:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dc2:	7afb      	ldrb	r3, [r7, #11]
 8001dc4:	f003 030f 	and.w	r3, r3, #15
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	799b      	ldrb	r3, [r3, #6]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d102      	bne.n	8001ddc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	799b      	ldrb	r3, [r3, #6]
 8001de4:	461a      	mov	r2, r3
 8001de6:	6979      	ldr	r1, [r7, #20]
 8001de8:	f002 f91e 	bl	8004028 <USB_EPStartXfer>

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	60f8      	str	r0, [r7, #12]
 8001dfe:	607a      	str	r2, [r7, #4]
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	460b      	mov	r3, r1
 8001e04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e06:	7afb      	ldrb	r3, [r7, #11]
 8001e08:	f003 020f 	and.w	r2, r3, #15
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	4413      	add	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	3310      	adds	r3, #16
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4413      	add	r3, r2
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2201      	movs	r2, #1
 8001e34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e36:	7afb      	ldrb	r3, [r7, #11]
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	799b      	ldrb	r3, [r3, #6]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d102      	bne.n	8001e50 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	799b      	ldrb	r3, [r3, #6]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	6979      	ldr	r1, [r7, #20]
 8001e5c:	f002 f8e4 	bl	8004028 <USB_EPStartXfer>

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b084      	sub	sp, #16
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	460b      	mov	r3, r1
 8001e74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	f003 030f 	and.w	r3, r3, #15
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	7912      	ldrb	r2, [r2, #4]
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d901      	bls.n	8001e88 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e04f      	b.n	8001f28 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	da0f      	bge.n	8001eb0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	f003 020f 	and.w	r2, r3, #15
 8001e96:	4613      	mov	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	3310      	adds	r3, #16
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	705a      	strb	r2, [r3, #1]
 8001eae:	e00d      	b.n	8001ecc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001eb0:	78fa      	ldrb	r2, [r7, #3]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ed2:	78fb      	ldrb	r3, [r7, #3]
 8001ed4:	f003 030f 	and.w	r3, r3, #15
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_PCD_EP_SetStall+0x82>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e01d      	b.n	8001f28 <HAL_PCD_EP_SetStall+0xbe>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68f9      	ldr	r1, [r7, #12]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f002 fc6c 	bl	80047d8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d109      	bne.n	8001f1e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7999      	ldrb	r1, [r3, #6]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001f18:	461a      	mov	r2, r3
 8001f1a:	f002 fe5d 	bl	8004bd8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	7912      	ldrb	r2, [r2, #4]
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d901      	bls.n	8001f4e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e042      	b.n	8001fd4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	da0f      	bge.n	8001f76 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f56:	78fb      	ldrb	r3, [r7, #3]
 8001f58:	f003 020f 	and.w	r2, r3, #15
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4413      	add	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	3310      	adds	r3, #16
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2201      	movs	r2, #1
 8001f72:	705a      	strb	r2, [r3, #1]
 8001f74:	e00f      	b.n	8001f96 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	f003 020f 	and.w	r2, r3, #15
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <HAL_PCD_EP_ClrStall+0x86>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e00e      	b.n	8001fd4 <HAL_PCD_EP_ClrStall+0xa4>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68f9      	ldr	r1, [r7, #12]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f002 fc75 	bl	80048b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001fe8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	da0c      	bge.n	800200a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ff0:	78fb      	ldrb	r3, [r7, #3]
 8001ff2:	f003 020f 	and.w	r2, r3, #15
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	3310      	adds	r3, #16
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	4413      	add	r3, r2
 8002004:	3304      	adds	r3, #4
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	e00c      	b.n	8002024 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800200a:	78fb      	ldrb	r3, [r7, #3]
 800200c:	f003 020f 	and.w	r2, r3, #15
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	4413      	add	r3, r2
 8002020:	3304      	adds	r3, #4
 8002022:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68f9      	ldr	r1, [r7, #12]
 800202a:	4618      	mov	r0, r3
 800202c:	f002 fa94 	bl	8004558 <USB_EPStopXfer>
 8002030:	4603      	mov	r3, r0
 8002032:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002034:	7afb      	ldrb	r3, [r7, #11]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b08a      	sub	sp, #40	@ 0x28
 8002042:	af02      	add	r7, sp, #8
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	3310      	adds	r3, #16
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	3304      	adds	r3, #4
 8002064:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	695a      	ldr	r2, [r3, #20]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	429a      	cmp	r2, r3
 8002070:	d901      	bls.n	8002076 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e06b      	b.n	800214e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	691a      	ldr	r2, [r3, #16]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	429a      	cmp	r2, r3
 800208a:	d902      	bls.n	8002092 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3303      	adds	r3, #3
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800209a:	e02a      	b.n	80020f2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	69fa      	ldr	r2, [r7, #28]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d902      	bls.n	80020b8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	3303      	adds	r3, #3
 80020bc:	089b      	lsrs	r3, r3, #2
 80020be:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	68d9      	ldr	r1, [r3, #12]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	4603      	mov	r3, r0
 80020d4:	6978      	ldr	r0, [r7, #20]
 80020d6:	f002 fae9 	bl	80046ac <USB_WritePacket>

    ep->xfer_buff  += len;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	441a      	add	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	695a      	ldr	r2, [r3, #20]
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	441a      	add	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	015a      	lsls	r2, r3, #5
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	429a      	cmp	r2, r3
 8002106:	d809      	bhi.n	800211c <PCD_WriteEmptyTxFifo+0xde>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	695a      	ldr	r2, [r3, #20]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002110:	429a      	cmp	r2, r3
 8002112:	d203      	bcs.n	800211c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1bf      	bne.n	800209c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	429a      	cmp	r2, r3
 8002126:	d811      	bhi.n	800214c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	2201      	movs	r2, #1
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800213c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	43db      	mvns	r3, r3
 8002142:	6939      	ldr	r1, [r7, #16]
 8002144:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002148:	4013      	ands	r3, r2
 800214a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3720      	adds	r7, #32
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	333c      	adds	r3, #60	@ 0x3c
 8002170:	3304      	adds	r3, #4
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	015a      	lsls	r2, r3, #5
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	4413      	add	r3, r2
 800217e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	799b      	ldrb	r3, [r3, #6]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d17b      	bne.n	8002286 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	2b00      	cmp	r3, #0
 8002196:	d015      	beq.n	80021c4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	4a61      	ldr	r2, [pc, #388]	@ (8002320 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800219c:	4293      	cmp	r3, r2
 800219e:	f240 80b9 	bls.w	8002314 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80b3 	beq.w	8002314 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021ba:	461a      	mov	r2, r3
 80021bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021c0:	6093      	str	r3, [r2, #8]
 80021c2:	e0a7      	b.n	8002314 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	f003 0320 	and.w	r3, r3, #32
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d009      	beq.n	80021e2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021da:	461a      	mov	r2, r3
 80021dc:	2320      	movs	r3, #32
 80021de:	6093      	str	r3, [r2, #8]
 80021e0:	e098      	b.n	8002314 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f040 8093 	bne.w	8002314 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	4a4b      	ldr	r2, [pc, #300]	@ (8002320 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d90f      	bls.n	8002216 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00a      	beq.n	8002216 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	015a      	lsls	r2, r3, #5
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	4413      	add	r3, r2
 8002208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800220c:	461a      	mov	r2, r3
 800220e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002212:	6093      	str	r3, [r2, #8]
 8002214:	e07e      	b.n	8002314 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	4613      	mov	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	4413      	add	r3, r2
 8002228:	3304      	adds	r3, #4
 800222a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a1a      	ldr	r2, [r3, #32]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	0159      	lsls	r1, r3, #5
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	440b      	add	r3, r1
 8002238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002242:	1ad2      	subs	r2, r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d114      	bne.n	8002278 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d109      	bne.n	800226a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002260:	461a      	mov	r2, r3
 8002262:	2101      	movs	r1, #1
 8002264:	f002 fcb8 	bl	8004bd8 <USB_EP0_OutStart>
 8002268:	e006      	b.n	8002278 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	441a      	add	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	4619      	mov	r1, r3
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f004 ff08 	bl	8007094 <HAL_PCD_DataOutStageCallback>
 8002284:	e046      	b.n	8002314 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	4a26      	ldr	r2, [pc, #152]	@ (8002324 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d124      	bne.n	80022d8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00a      	beq.n	80022ae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022a4:	461a      	mov	r2, r3
 80022a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022aa:	6093      	str	r3, [r2, #8]
 80022ac:	e032      	b.n	8002314 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	f003 0320 	and.w	r3, r3, #32
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	015a      	lsls	r2, r3, #5
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022c4:	461a      	mov	r2, r3
 80022c6:	2320      	movs	r3, #32
 80022c8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	4619      	mov	r1, r3
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f004 fedf 	bl	8007094 <HAL_PCD_DataOutStageCallback>
 80022d6:	e01d      	b.n	8002314 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d114      	bne.n	8002308 <PCD_EP_OutXfrComplete_int+0x1b0>
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	4613      	mov	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d108      	bne.n	8002308 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002300:	461a      	mov	r2, r3
 8002302:	2100      	movs	r1, #0
 8002304:	f002 fc68 	bl	8004bd8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	4619      	mov	r1, r3
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f004 fec0 	bl	8007094 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3720      	adds	r7, #32
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	4f54300a 	.word	0x4f54300a
 8002324:	4f54310a 	.word	0x4f54310a

08002328 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	333c      	adds	r3, #60	@ 0x3c
 8002340:	3304      	adds	r3, #4
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	015a      	lsls	r2, r3, #5
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4413      	add	r3, r2
 800234e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	4a15      	ldr	r2, [pc, #84]	@ (80023b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d90e      	bls.n	800237c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002364:	2b00      	cmp	r3, #0
 8002366:	d009      	beq.n	800237c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4413      	add	r3, r2
 8002370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002374:	461a      	mov	r2, r3
 8002376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800237a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f004 fe77 	bl	8007070 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4a0a      	ldr	r2, [pc, #40]	@ (80023b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d90c      	bls.n	80023a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	799b      	ldrb	r3, [r3, #6]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d108      	bne.n	80023a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800239c:	461a      	mov	r2, r3
 800239e:	2101      	movs	r1, #1
 80023a0:	f002 fc1a 	bl	8004bd8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	4f54300a 	.word	0x4f54300a

080023b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	70fb      	strb	r3, [r7, #3]
 80023c0:	4613      	mov	r3, r2
 80023c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d107      	bne.n	80023e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023d2:	883b      	ldrh	r3, [r7, #0]
 80023d4:	0419      	lsls	r1, r3, #16
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	430a      	orrs	r2, r1
 80023de:	629a      	str	r2, [r3, #40]	@ 0x28
 80023e0:	e028      	b.n	8002434 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e8:	0c1b      	lsrs	r3, r3, #16
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	4413      	add	r3, r2
 80023ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023f0:	2300      	movs	r3, #0
 80023f2:	73fb      	strb	r3, [r7, #15]
 80023f4:	e00d      	b.n	8002412 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
 80023fc:	3340      	adds	r3, #64	@ 0x40
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	0c1b      	lsrs	r3, r3, #16
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	4413      	add	r3, r2
 800240a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	3301      	adds	r3, #1
 8002410:	73fb      	strb	r3, [r7, #15]
 8002412:	7bfa      	ldrb	r2, [r7, #15]
 8002414:	78fb      	ldrb	r3, [r7, #3]
 8002416:	3b01      	subs	r3, #1
 8002418:	429a      	cmp	r2, r3
 800241a:	d3ec      	bcc.n	80023f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800241c:	883b      	ldrh	r3, [r7, #0]
 800241e:	0418      	lsls	r0, r3, #16
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6819      	ldr	r1, [r3, #0]
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	3b01      	subs	r3, #1
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	4302      	orrs	r2, r0
 800242c:	3340      	adds	r3, #64	@ 0x40
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	460b      	mov	r3, r1
 800244c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	887a      	ldrh	r2, [r7, #2]
 8002454:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002492:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002496:	f043 0303 	orr.w	r3, r3, #3
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0cc      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024c0:	4b68      	ldr	r3, [pc, #416]	@ (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 030f 	and.w	r3, r3, #15
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d90c      	bls.n	80024e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b65      	ldr	r3, [pc, #404]	@ (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	4b63      	ldr	r3, [pc, #396]	@ (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0b8      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d020      	beq.n	8002536 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002500:	4b59      	ldr	r3, [pc, #356]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4a58      	ldr	r2, [pc, #352]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800250a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002518:	4b53      	ldr	r3, [pc, #332]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4a52      	ldr	r2, [pc, #328]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002522:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002524:	4b50      	ldr	r3, [pc, #320]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	494d      	ldr	r1, [pc, #308]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d044      	beq.n	80025cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d107      	bne.n	800255a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254a:	4b47      	ldr	r3, [pc, #284]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d119      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e07f      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d003      	beq.n	800256a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002566:	2b03      	cmp	r3, #3
 8002568:	d107      	bne.n	800257a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256a:	4b3f      	ldr	r3, [pc, #252]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d109      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e06f      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257a:	4b3b      	ldr	r3, [pc, #236]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e067      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800258a:	4b37      	ldr	r3, [pc, #220]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f023 0203 	bic.w	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	4934      	ldr	r1, [pc, #208]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002598:	4313      	orrs	r3, r2
 800259a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800259c:	f7fe f9fa 	bl	8000994 <HAL_GetTick>
 80025a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a2:	e00a      	b.n	80025ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a4:	f7fe f9f6 	bl	8000994 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e04f      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 020c 	and.w	r2, r3, #12
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d1eb      	bne.n	80025a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025cc:	4b25      	ldr	r3, [pc, #148]	@ (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 030f 	and.w	r3, r3, #15
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d20c      	bcs.n	80025f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025da:	4b22      	ldr	r3, [pc, #136]	@ (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e2:	4b20      	ldr	r3, [pc, #128]	@ (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e032      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002600:	4b19      	ldr	r3, [pc, #100]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4916      	ldr	r1, [pc, #88]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	4313      	orrs	r3, r2
 8002610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d009      	beq.n	8002632 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800261e:	4b12      	ldr	r3, [pc, #72]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	490e      	ldr	r1, [pc, #56]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002632:	f000 fb57 	bl	8002ce4 <HAL_RCC_GetSysClockFreq>
 8002636:	4602      	mov	r2, r0
 8002638:	4b0b      	ldr	r3, [pc, #44]	@ (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	490a      	ldr	r1, [pc, #40]	@ (800266c <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	5ccb      	ldrb	r3, [r1, r3]
 8002646:	fa22 f303 	lsr.w	r3, r2, r3
 800264a:	4a09      	ldr	r2, [pc, #36]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800264e:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <HAL_RCC_ClockConfig+0x1c8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe f95a 	bl	800090c <HAL_InitTick>

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40023c00 	.word	0x40023c00
 8002668:	40023800 	.word	0x40023800
 800266c:	08007738 	.word	0x08007738
 8002670:	20000000 	.word	0x20000000
 8002674:	20000004 	.word	0x20000004

08002678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800267c:	4b03      	ldr	r3, [pc, #12]	@ (800268c <HAL_RCC_GetHCLKFreq+0x14>)
 800267e:	681b      	ldr	r3, [r3, #0]
}
 8002680:	4618      	mov	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	20000000 	.word	0x20000000

08002690 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08c      	sub	sp, #48	@ 0x30
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d010      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80026c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026ce:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d6:	496c      	ldr	r1, [pc, #432]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80026e6:	2301      	movs	r3, #1
 80026e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d010      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80026f6:	4b64      	ldr	r3, [pc, #400]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026fc:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002704:	4960      	ldr	r1, [pc, #384]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002714:	2301      	movs	r3, #1
 8002716:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d017      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002724:	4b58      	ldr	r3, [pc, #352]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002726:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800272a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002732:	4955      	ldr	r1, [pc, #340]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002742:	d101      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002744:	2301      	movs	r3, #1
 8002746:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002750:	2301      	movs	r3, #1
 8002752:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	2b00      	cmp	r3, #0
 800275e:	d017      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002760:	4b49      	ldr	r3, [pc, #292]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002762:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002766:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800276e:	4946      	ldr	r1, [pc, #280]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800277a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800277e:	d101      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002780:	2301      	movs	r3, #1
 8002782:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800278c:	2301      	movs	r3, #1
 800278e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0320 	and.w	r3, r3, #32
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 808a 	beq.w	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	4b39      	ldr	r3, [pc, #228]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	4a38      	ldr	r2, [pc, #224]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ae:	4b36      	ldr	r3, [pc, #216]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80027ba:	4b34      	ldr	r3, [pc, #208]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a33      	ldr	r2, [pc, #204]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80027c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027c6:	f7fe f8e5 	bl	8000994 <HAL_GetTick>
 80027ca:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80027ce:	f7fe f8e1 	bl	8000994 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e278      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80027e0:	4b2a      	ldr	r3, [pc, #168]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027ec:	4b26      	ldr	r3, [pc, #152]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027f4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d02f      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002800:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002804:	6a3a      	ldr	r2, [r7, #32]
 8002806:	429a      	cmp	r2, r3
 8002808:	d028      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800280a:	4b1f      	ldr	r3, [pc, #124]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002812:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002814:	4b1e      	ldr	r3, [pc, #120]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002816:	2201      	movs	r2, #1
 8002818:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800281a:	4b1d      	ldr	r3, [pc, #116]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002820:	4a19      	ldr	r2, [pc, #100]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002826:	4b18      	ldr	r3, [pc, #96]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	d114      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002832:	f7fe f8af 	bl	8000994 <HAL_GetTick>
 8002836:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002838:	e00a      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800283a:	f7fe f8ab 	bl	8000994 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002848:	4293      	cmp	r3, r2
 800284a:	d901      	bls.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e240      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002850:	4b0d      	ldr	r3, [pc, #52]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0ee      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002860:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002864:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002868:	d114      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800286a:	4b07      	ldr	r3, [pc, #28]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002876:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800287a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800287e:	4902      	ldr	r1, [pc, #8]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002880:	4313      	orrs	r3, r2
 8002882:	608b      	str	r3, [r1, #8]
 8002884:	e00c      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800
 800288c:	40007000 	.word	0x40007000
 8002890:	42470e40 	.word	0x42470e40
 8002894:	4b4a      	ldr	r3, [pc, #296]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4a49      	ldr	r2, [pc, #292]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800289a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800289e:	6093      	str	r3, [r2, #8]
 80028a0:	4b47      	ldr	r3, [pc, #284]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ac:	4944      	ldr	r1, [pc, #272]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0310 	and.w	r3, r3, #16
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d004      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80028c4:	4b3f      	ldr	r3, [pc, #252]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80028c6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00a      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80028d4:	4b3a      	ldr	r3, [pc, #232]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e2:	4937      	ldr	r1, [pc, #220]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00a      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028f6:	4b32      	ldr	r3, [pc, #200]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80028f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028fc:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002904:	492e      	ldr	r1, [pc, #184]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d011      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002918:	4b29      	ldr	r3, [pc, #164]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800291a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800291e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002926:	4926      	ldr	r1, [pc, #152]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002932:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002936:	d101      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002938:	2301      	movs	r3, #1
 800293a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00a      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002948:	4b1d      	ldr	r3, [pc, #116]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800294a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800294e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002956:	491a      	ldr	r1, [pc, #104]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002966:	2b00      	cmp	r3, #0
 8002968:	d011      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800296a:	4b15      	ldr	r3, [pc, #84]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800296c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002970:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002978:	4911      	ldr	r1, [pc, #68]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002984:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002988:	d101      	bne.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800298a:	2301      	movs	r3, #1
 800298c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800298e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002990:	2b01      	cmp	r3, #1
 8002992:	d005      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800299c:	f040 80ff 	bne.w	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029a0:	4b09      	ldr	r3, [pc, #36]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029a6:	f7fd fff5 	bl	8000994 <HAL_GetTick>
 80029aa:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029ac:	e00e      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80029ae:	f7fd fff1 	bl	8000994 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d907      	bls.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e188      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80029c0:	40023800 	.word	0x40023800
 80029c4:	424711e0 	.word	0x424711e0
 80029c8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029cc:	4b7e      	ldr	r3, [pc, #504]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1ea      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d009      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d028      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d124      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a00:	4b71      	ldr	r3, [pc, #452]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a06:	0c1b      	lsrs	r3, r3, #16
 8002a08:	f003 0303 	and.w	r3, r3, #3
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a12:	4b6d      	ldr	r3, [pc, #436]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a18:	0e1b      	lsrs	r3, r3, #24
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	019b      	lsls	r3, r3, #6
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	085b      	lsrs	r3, r3, #1
 8002a30:	3b01      	subs	r3, #1
 8002a32:	041b      	lsls	r3, r3, #16
 8002a34:	431a      	orrs	r2, r3
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	061b      	lsls	r3, r3, #24
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	071b      	lsls	r3, r3, #28
 8002a42:	4961      	ldr	r1, [pc, #388]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d004      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a5e:	d00a      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d035      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a74:	d130      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a76:	4b54      	ldr	r3, [pc, #336]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a7c:	0c1b      	lsrs	r3, r3, #16
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	3301      	adds	r3, #1
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a88:	4b4f      	ldr	r3, [pc, #316]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a8e:	0f1b      	lsrs	r3, r3, #28
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	019b      	lsls	r3, r3, #6
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	085b      	lsrs	r3, r3, #1
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	041b      	lsls	r3, r3, #16
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	061b      	lsls	r3, r3, #24
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	071b      	lsls	r3, r3, #28
 8002ab8:	4943      	ldr	r1, [pc, #268]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ac0:	4b41      	ldr	r3, [pc, #260]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ac6:	f023 021f 	bic.w	r2, r3, #31
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	493d      	ldr	r1, [pc, #244]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d029      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ae8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002aec:	d124      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002aee:	4b36      	ldr	r3, [pc, #216]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002af4:	0c1b      	lsrs	r3, r3, #16
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	3301      	adds	r3, #1
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b00:	4b31      	ldr	r3, [pc, #196]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b06:	0f1b      	lsrs	r3, r3, #28
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	019b      	lsls	r3, r3, #6
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	085b      	lsrs	r3, r3, #1
 8002b20:	3b01      	subs	r3, #1
 8002b22:	041b      	lsls	r3, r3, #16
 8002b24:	431a      	orrs	r2, r3
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	061b      	lsls	r3, r3, #24
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	071b      	lsls	r3, r3, #28
 8002b30:	4925      	ldr	r1, [pc, #148]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d016      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	019b      	lsls	r3, r3, #6
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	085b      	lsrs	r3, r3, #1
 8002b56:	3b01      	subs	r3, #1
 8002b58:	041b      	lsls	r3, r3, #16
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	061b      	lsls	r3, r3, #24
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	071b      	lsls	r3, r3, #28
 8002b6a:	4917      	ldr	r1, [pc, #92]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b72:	4b16      	ldr	r3, [pc, #88]	@ (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b78:	f7fd ff0c 	bl	8000994 <HAL_GetTick>
 8002b7c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b80:	f7fd ff08 	bl	8000994 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e09f      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b92:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	f040 8095 	bne.w	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bac:	f7fd fef2 	bl	8000994 <HAL_GetTick>
 8002bb0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bb2:	e00f      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002bb4:	f7fd feee 	bl	8000994 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d908      	bls.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e085      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	42470068 	.word	0x42470068
 8002bd0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bd4:	4b41      	ldr	r3, [pc, #260]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002be0:	d0e8      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d009      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d02b      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d127      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002c0a:	4b34      	ldr	r3, [pc, #208]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c10:	0c1b      	lsrs	r3, r3, #16
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	3301      	adds	r3, #1
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699a      	ldr	r2, [r3, #24]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	019b      	lsls	r3, r3, #6
 8002c26:	431a      	orrs	r2, r3
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	085b      	lsrs	r3, r3, #1
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	041b      	lsls	r3, r3, #16
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c36:	061b      	lsls	r3, r3, #24
 8002c38:	4928      	ldr	r1, [pc, #160]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c40:	4b26      	ldr	r3, [pc, #152]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c46:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	021b      	lsls	r3, r3, #8
 8002c52:	4922      	ldr	r1, [pc, #136]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d01d      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c6e:	d118      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c70:	4b1a      	ldr	r3, [pc, #104]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c76:	0e1b      	lsrs	r3, r3, #24
 8002c78:	f003 030f 	and.w	r3, r3, #15
 8002c7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699a      	ldr	r2, [r3, #24]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	019b      	lsls	r3, r3, #6
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	085b      	lsrs	r3, r3, #1
 8002c90:	3b01      	subs	r3, #1
 8002c92:	041b      	lsls	r3, r3, #16
 8002c94:	431a      	orrs	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	061b      	lsls	r3, r3, #24
 8002c9a:	4910      	ldr	r1, [pc, #64]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ca8:	f7fd fe74 	bl	8000994 <HAL_GetTick>
 8002cac:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002cb0:	f7fd fe70 	bl	8000994 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e007      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cc2:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cce:	d1ef      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3730      	adds	r7, #48	@ 0x30
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	42470070 	.word	0x42470070

08002ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ce8:	b0ae      	sub	sp, #184	@ 0xb8
 8002cea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d0a:	4bcb      	ldr	r3, [pc, #812]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b0c      	cmp	r3, #12
 8002d14:	f200 8206 	bhi.w	8003124 <HAL_RCC_GetSysClockFreq+0x440>
 8002d18:	a201      	add	r2, pc, #4	@ (adr r2, 8002d20 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1e:	bf00      	nop
 8002d20:	08002d55 	.word	0x08002d55
 8002d24:	08003125 	.word	0x08003125
 8002d28:	08003125 	.word	0x08003125
 8002d2c:	08003125 	.word	0x08003125
 8002d30:	08002d5d 	.word	0x08002d5d
 8002d34:	08003125 	.word	0x08003125
 8002d38:	08003125 	.word	0x08003125
 8002d3c:	08003125 	.word	0x08003125
 8002d40:	08002d65 	.word	0x08002d65
 8002d44:	08003125 	.word	0x08003125
 8002d48:	08003125 	.word	0x08003125
 8002d4c:	08003125 	.word	0x08003125
 8002d50:	08002f55 	.word	0x08002f55
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d54:	4bb9      	ldr	r3, [pc, #740]	@ (800303c <HAL_RCC_GetSysClockFreq+0x358>)
 8002d56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002d5a:	e1e7      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d5c:	4bb8      	ldr	r3, [pc, #736]	@ (8003040 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d62:	e1e3      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d64:	4bb4      	ldr	r3, [pc, #720]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d70:	4bb1      	ldr	r3, [pc, #708]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d071      	beq.n	8002e60 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d7c:	4bae      	ldr	r3, [pc, #696]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	099b      	lsrs	r3, r3, #6
 8002d82:	2200      	movs	r2, #0
 8002d84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d88:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002d8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002d9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002da2:	4622      	mov	r2, r4
 8002da4:	462b      	mov	r3, r5
 8002da6:	f04f 0000 	mov.w	r0, #0
 8002daa:	f04f 0100 	mov.w	r1, #0
 8002dae:	0159      	lsls	r1, r3, #5
 8002db0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002db4:	0150      	lsls	r0, r2, #5
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4621      	mov	r1, r4
 8002dbc:	1a51      	subs	r1, r2, r1
 8002dbe:	6439      	str	r1, [r7, #64]	@ 0x40
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002dc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002dd4:	4649      	mov	r1, r9
 8002dd6:	018b      	lsls	r3, r1, #6
 8002dd8:	4641      	mov	r1, r8
 8002dda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dde:	4641      	mov	r1, r8
 8002de0:	018a      	lsls	r2, r1, #6
 8002de2:	4641      	mov	r1, r8
 8002de4:	1a51      	subs	r1, r2, r1
 8002de6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002de8:	4649      	mov	r1, r9
 8002dea:	eb63 0301 	sbc.w	r3, r3, r1
 8002dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002dfc:	4649      	mov	r1, r9
 8002dfe:	00cb      	lsls	r3, r1, #3
 8002e00:	4641      	mov	r1, r8
 8002e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e06:	4641      	mov	r1, r8
 8002e08:	00ca      	lsls	r2, r1, #3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4603      	mov	r3, r0
 8002e10:	4622      	mov	r2, r4
 8002e12:	189b      	adds	r3, r3, r2
 8002e14:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e16:	462b      	mov	r3, r5
 8002e18:	460a      	mov	r2, r1
 8002e1a:	eb42 0303 	adc.w	r3, r2, r3
 8002e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	024b      	lsls	r3, r1, #9
 8002e30:	4621      	mov	r1, r4
 8002e32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e36:	4621      	mov	r1, r4
 8002e38:	024a      	lsls	r2, r1, #9
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e42:	2200      	movs	r2, #0
 8002e44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e4c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002e50:	f7fd f9d8 	bl	8000204 <__aeabi_uldivmod>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4613      	mov	r3, r2
 8002e5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e5e:	e067      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e60:	4b75      	ldr	r3, [pc, #468]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	099b      	lsrs	r3, r3, #6
 8002e66:	2200      	movs	r2, #0
 8002e68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e6c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002e70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002e7e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002e82:	4622      	mov	r2, r4
 8002e84:	462b      	mov	r3, r5
 8002e86:	f04f 0000 	mov.w	r0, #0
 8002e8a:	f04f 0100 	mov.w	r1, #0
 8002e8e:	0159      	lsls	r1, r3, #5
 8002e90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e94:	0150      	lsls	r0, r2, #5
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4621      	mov	r1, r4
 8002e9c:	1a51      	subs	r1, r2, r1
 8002e9e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002ea0:	4629      	mov	r1, r5
 8002ea2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002eb4:	4649      	mov	r1, r9
 8002eb6:	018b      	lsls	r3, r1, #6
 8002eb8:	4641      	mov	r1, r8
 8002eba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ebe:	4641      	mov	r1, r8
 8002ec0:	018a      	lsls	r2, r1, #6
 8002ec2:	4641      	mov	r1, r8
 8002ec4:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ec8:	4649      	mov	r1, r9
 8002eca:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002eda:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ede:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ee2:	4692      	mov	sl, r2
 8002ee4:	469b      	mov	fp, r3
 8002ee6:	4623      	mov	r3, r4
 8002ee8:	eb1a 0303 	adds.w	r3, sl, r3
 8002eec:	623b      	str	r3, [r7, #32]
 8002eee:	462b      	mov	r3, r5
 8002ef0:	eb4b 0303 	adc.w	r3, fp, r3
 8002ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f02:	4629      	mov	r1, r5
 8002f04:	028b      	lsls	r3, r1, #10
 8002f06:	4621      	mov	r1, r4
 8002f08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f0c:	4621      	mov	r1, r4
 8002f0e:	028a      	lsls	r2, r1, #10
 8002f10:	4610      	mov	r0, r2
 8002f12:	4619      	mov	r1, r3
 8002f14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f18:	2200      	movs	r2, #0
 8002f1a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f1c:	677a      	str	r2, [r7, #116]	@ 0x74
 8002f1e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002f22:	f7fd f96f 	bl	8000204 <__aeabi_uldivmod>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f30:	4b41      	ldr	r3, [pc, #260]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	0c1b      	lsrs	r3, r3, #16
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002f42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f52:	e0eb      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f54:	4b38      	ldr	r3, [pc, #224]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f60:	4b35      	ldr	r3, [pc, #212]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d06b      	beq.n	8003044 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f6c:	4b32      	ldr	r3, [pc, #200]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	099b      	lsrs	r3, r3, #6
 8002f72:	2200      	movs	r2, #0
 8002f74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f7e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f80:	2300      	movs	r3, #0
 8002f82:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f84:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002f88:	4622      	mov	r2, r4
 8002f8a:	462b      	mov	r3, r5
 8002f8c:	f04f 0000 	mov.w	r0, #0
 8002f90:	f04f 0100 	mov.w	r1, #0
 8002f94:	0159      	lsls	r1, r3, #5
 8002f96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f9a:	0150      	lsls	r0, r2, #5
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4621      	mov	r1, r4
 8002fa2:	1a51      	subs	r1, r2, r1
 8002fa4:	61b9      	str	r1, [r7, #24]
 8002fa6:	4629      	mov	r1, r5
 8002fa8:	eb63 0301 	sbc.w	r3, r3, r1
 8002fac:	61fb      	str	r3, [r7, #28]
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002fba:	4659      	mov	r1, fp
 8002fbc:	018b      	lsls	r3, r1, #6
 8002fbe:	4651      	mov	r1, sl
 8002fc0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fc4:	4651      	mov	r1, sl
 8002fc6:	018a      	lsls	r2, r1, #6
 8002fc8:	4651      	mov	r1, sl
 8002fca:	ebb2 0801 	subs.w	r8, r2, r1
 8002fce:	4659      	mov	r1, fp
 8002fd0:	eb63 0901 	sbc.w	r9, r3, r1
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fe0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fe4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fe8:	4690      	mov	r8, r2
 8002fea:	4699      	mov	r9, r3
 8002fec:	4623      	mov	r3, r4
 8002fee:	eb18 0303 	adds.w	r3, r8, r3
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	462b      	mov	r3, r5
 8002ff6:	eb49 0303 	adc.w	r3, r9, r3
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003008:	4629      	mov	r1, r5
 800300a:	024b      	lsls	r3, r1, #9
 800300c:	4621      	mov	r1, r4
 800300e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003012:	4621      	mov	r1, r4
 8003014:	024a      	lsls	r2, r1, #9
 8003016:	4610      	mov	r0, r2
 8003018:	4619      	mov	r1, r3
 800301a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800301e:	2200      	movs	r2, #0
 8003020:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003022:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003024:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003028:	f7fd f8ec 	bl	8000204 <__aeabi_uldivmod>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4613      	mov	r3, r2
 8003032:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003036:	e065      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x420>
 8003038:	40023800 	.word	0x40023800
 800303c:	00f42400 	.word	0x00f42400
 8003040:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003044:	4b3d      	ldr	r3, [pc, #244]	@ (800313c <HAL_RCC_GetSysClockFreq+0x458>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	099b      	lsrs	r3, r3, #6
 800304a:	2200      	movs	r2, #0
 800304c:	4618      	mov	r0, r3
 800304e:	4611      	mov	r1, r2
 8003050:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003054:	653b      	str	r3, [r7, #80]	@ 0x50
 8003056:	2300      	movs	r3, #0
 8003058:	657b      	str	r3, [r7, #84]	@ 0x54
 800305a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800305e:	4642      	mov	r2, r8
 8003060:	464b      	mov	r3, r9
 8003062:	f04f 0000 	mov.w	r0, #0
 8003066:	f04f 0100 	mov.w	r1, #0
 800306a:	0159      	lsls	r1, r3, #5
 800306c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003070:	0150      	lsls	r0, r2, #5
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	4641      	mov	r1, r8
 8003078:	1a51      	subs	r1, r2, r1
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	4649      	mov	r1, r9
 800307e:	eb63 0301 	sbc.w	r3, r3, r1
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	f04f 0300 	mov.w	r3, #0
 800308c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003090:	4659      	mov	r1, fp
 8003092:	018b      	lsls	r3, r1, #6
 8003094:	4651      	mov	r1, sl
 8003096:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800309a:	4651      	mov	r1, sl
 800309c:	018a      	lsls	r2, r1, #6
 800309e:	4651      	mov	r1, sl
 80030a0:	1a54      	subs	r4, r2, r1
 80030a2:	4659      	mov	r1, fp
 80030a4:	eb63 0501 	sbc.w	r5, r3, r1
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	00eb      	lsls	r3, r5, #3
 80030b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030b6:	00e2      	lsls	r2, r4, #3
 80030b8:	4614      	mov	r4, r2
 80030ba:	461d      	mov	r5, r3
 80030bc:	4643      	mov	r3, r8
 80030be:	18e3      	adds	r3, r4, r3
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	464b      	mov	r3, r9
 80030c4:	eb45 0303 	adc.w	r3, r5, r3
 80030c8:	607b      	str	r3, [r7, #4]
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030d6:	4629      	mov	r1, r5
 80030d8:	028b      	lsls	r3, r1, #10
 80030da:	4621      	mov	r1, r4
 80030dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030e0:	4621      	mov	r1, r4
 80030e2:	028a      	lsls	r2, r1, #10
 80030e4:	4610      	mov	r0, r2
 80030e6:	4619      	mov	r1, r3
 80030e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030ec:	2200      	movs	r2, #0
 80030ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030f0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80030f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80030f6:	f7fd f885 	bl	8000204 <__aeabi_uldivmod>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	4613      	mov	r3, r2
 8003100:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003104:	4b0d      	ldr	r3, [pc, #52]	@ (800313c <HAL_RCC_GetSysClockFreq+0x458>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	0f1b      	lsrs	r3, r3, #28
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8003112:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003116:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800311a:	fbb2 f3f3 	udiv	r3, r2, r3
 800311e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003122:	e003      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003124:	4b06      	ldr	r3, [pc, #24]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003126:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800312a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800312c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003130:	4618      	mov	r0, r3
 8003132:	37b8      	adds	r7, #184	@ 0xb8
 8003134:	46bd      	mov	sp, r7
 8003136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800313a:	bf00      	nop
 800313c:	40023800 	.word	0x40023800
 8003140:	00f42400 	.word	0x00f42400

08003144 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e28d      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 8083 	beq.w	800326a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003164:	4b94      	ldr	r3, [pc, #592]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 030c 	and.w	r3, r3, #12
 800316c:	2b04      	cmp	r3, #4
 800316e:	d019      	beq.n	80031a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003170:	4b91      	ldr	r3, [pc, #580]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003178:	2b08      	cmp	r3, #8
 800317a:	d106      	bne.n	800318a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800317c:	4b8e      	ldr	r3, [pc, #568]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003184:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003188:	d00c      	beq.n	80031a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800318a:	4b8b      	ldr	r3, [pc, #556]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003192:	2b0c      	cmp	r3, #12
 8003194:	d112      	bne.n	80031bc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003196:	4b88      	ldr	r3, [pc, #544]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800319e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031a2:	d10b      	bne.n	80031bc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a4:	4b84      	ldr	r3, [pc, #528]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d05b      	beq.n	8003268 <HAL_RCC_OscConfig+0x124>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d157      	bne.n	8003268 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e25a      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031c4:	d106      	bne.n	80031d4 <HAL_RCC_OscConfig+0x90>
 80031c6:	4b7c      	ldr	r3, [pc, #496]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a7b      	ldr	r2, [pc, #492]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 80031cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	e01d      	b.n	8003210 <HAL_RCC_OscConfig+0xcc>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031dc:	d10c      	bne.n	80031f8 <HAL_RCC_OscConfig+0xb4>
 80031de:	4b76      	ldr	r3, [pc, #472]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a75      	ldr	r2, [pc, #468]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 80031e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	4b73      	ldr	r3, [pc, #460]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a72      	ldr	r2, [pc, #456]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 80031f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	e00b      	b.n	8003210 <HAL_RCC_OscConfig+0xcc>
 80031f8:	4b6f      	ldr	r3, [pc, #444]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a6e      	ldr	r2, [pc, #440]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 80031fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	4b6c      	ldr	r3, [pc, #432]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a6b      	ldr	r2, [pc, #428]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 800320a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800320e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d013      	beq.n	8003240 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7fd fbbc 	bl	8000994 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003220:	f7fd fbb8 	bl	8000994 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	@ 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e21f      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	4b61      	ldr	r3, [pc, #388]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0xdc>
 800323e:	e014      	b.n	800326a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fd fba8 	bl	8000994 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003248:	f7fd fba4 	bl	8000994 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	@ 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e20b      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325a:	4b57      	ldr	r3, [pc, #348]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x104>
 8003266:	e000      	b.n	800326a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d06f      	beq.n	8003356 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003276:	4b50      	ldr	r3, [pc, #320]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b00      	cmp	r3, #0
 8003280:	d017      	beq.n	80032b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003282:	4b4d      	ldr	r3, [pc, #308]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800328a:	2b08      	cmp	r3, #8
 800328c:	d105      	bne.n	800329a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800328e:	4b4a      	ldr	r3, [pc, #296]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00b      	beq.n	80032b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800329a:	4b47      	ldr	r3, [pc, #284]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032a2:	2b0c      	cmp	r3, #12
 80032a4:	d11c      	bne.n	80032e0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032a6:	4b44      	ldr	r3, [pc, #272]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d116      	bne.n	80032e0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b2:	4b41      	ldr	r3, [pc, #260]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d005      	beq.n	80032ca <HAL_RCC_OscConfig+0x186>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d001      	beq.n	80032ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e1d3      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ca:	4b3b      	ldr	r3, [pc, #236]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4937      	ldr	r1, [pc, #220]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032de:	e03a      	b.n	8003356 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d020      	beq.n	800332a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e8:	4b34      	ldr	r3, [pc, #208]	@ (80033bc <HAL_RCC_OscConfig+0x278>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ee:	f7fd fb51 	bl	8000994 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f6:	f7fd fb4d 	bl	8000994 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e1b4      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003308:	4b2b      	ldr	r3, [pc, #172]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003314:	4b28      	ldr	r3, [pc, #160]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	4925      	ldr	r1, [pc, #148]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003324:	4313      	orrs	r3, r2
 8003326:	600b      	str	r3, [r1, #0]
 8003328:	e015      	b.n	8003356 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800332a:	4b24      	ldr	r3, [pc, #144]	@ (80033bc <HAL_RCC_OscConfig+0x278>)
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003330:	f7fd fb30 	bl	8000994 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003338:	f7fd fb2c 	bl	8000994 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e193      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334a:	4b1b      	ldr	r3, [pc, #108]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f0      	bne.n	8003338 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b00      	cmp	r3, #0
 8003360:	d036      	beq.n	80033d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d016      	beq.n	8003398 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800336a:	4b15      	ldr	r3, [pc, #84]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 800336c:	2201      	movs	r2, #1
 800336e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003370:	f7fd fb10 	bl	8000994 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003378:	f7fd fb0c 	bl	8000994 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e173      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338a:	4b0b      	ldr	r3, [pc, #44]	@ (80033b8 <HAL_RCC_OscConfig+0x274>)
 800338c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCC_OscConfig+0x234>
 8003396:	e01b      	b.n	80033d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003398:	4b09      	ldr	r3, [pc, #36]	@ (80033c0 <HAL_RCC_OscConfig+0x27c>)
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339e:	f7fd faf9 	bl	8000994 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a4:	e00e      	b.n	80033c4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033a6:	f7fd faf5 	bl	8000994 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d907      	bls.n	80033c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e15c      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
 80033b8:	40023800 	.word	0x40023800
 80033bc:	42470000 	.word	0x42470000
 80033c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c4:	4b8a      	ldr	r3, [pc, #552]	@ (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 80033c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1ea      	bne.n	80033a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 8097 	beq.w	800350c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033de:	2300      	movs	r3, #0
 80033e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033e2:	4b83      	ldr	r3, [pc, #524]	@ (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10f      	bne.n	800340e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ee:	2300      	movs	r3, #0
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	4b7f      	ldr	r3, [pc, #508]	@ (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f6:	4a7e      	ldr	r2, [pc, #504]	@ (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 80033f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80033fe:	4b7c      	ldr	r3, [pc, #496]	@ (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003406:	60bb      	str	r3, [r7, #8]
 8003408:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800340a:	2301      	movs	r3, #1
 800340c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340e:	4b79      	ldr	r3, [pc, #484]	@ (80035f4 <HAL_RCC_OscConfig+0x4b0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003416:	2b00      	cmp	r3, #0
 8003418:	d118      	bne.n	800344c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800341a:	4b76      	ldr	r3, [pc, #472]	@ (80035f4 <HAL_RCC_OscConfig+0x4b0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a75      	ldr	r2, [pc, #468]	@ (80035f4 <HAL_RCC_OscConfig+0x4b0>)
 8003420:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003424:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003426:	f7fd fab5 	bl	8000994 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342e:	f7fd fab1 	bl	8000994 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e118      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003440:	4b6c      	ldr	r3, [pc, #432]	@ (80035f4 <HAL_RCC_OscConfig+0x4b0>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0f0      	beq.n	800342e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d106      	bne.n	8003462 <HAL_RCC_OscConfig+0x31e>
 8003454:	4b66      	ldr	r3, [pc, #408]	@ (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003458:	4a65      	ldr	r2, [pc, #404]	@ (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003460:	e01c      	b.n	800349c <HAL_RCC_OscConfig+0x358>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2b05      	cmp	r3, #5
 8003468:	d10c      	bne.n	8003484 <HAL_RCC_OscConfig+0x340>
 800346a:	4b61      	ldr	r3, [pc, #388]	@ (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800346e:	4a60      	ldr	r2, [pc, #384]	@ (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003470:	f043 0304 	orr.w	r3, r3, #4
 8003474:	6713      	str	r3, [r2, #112]	@ 0x70
 8003476:	4b5e      	ldr	r3, [pc, #376]	@ (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800347a:	4a5d      	ldr	r2, [pc, #372]	@ (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	6713      	str	r3, [r2, #112]	@ 0x70
 8003482:	e00b      	b.n	800349c <HAL_RCC_OscConfig+0x358>
 8003484:	4b5a      	ldr	r3, [pc, #360]	@ (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003488:	4a59      	ldr	r2, [pc, #356]	@ (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 800348a:	f023 0301 	bic.w	r3, r3, #1
 800348e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003490:	4b57      	ldr	r3, [pc, #348]	@ (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003494:	4a56      	ldr	r2, [pc, #344]	@ (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003496:	f023 0304 	bic.w	r3, r3, #4
 800349a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d015      	beq.n	80034d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a4:	f7fd fa76 	bl	8000994 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034aa:	e00a      	b.n	80034c2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ac:	f7fd fa72 	bl	8000994 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e0d7      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c2:	4b4b      	ldr	r3, [pc, #300]	@ (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 80034c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0ee      	beq.n	80034ac <HAL_RCC_OscConfig+0x368>
 80034ce:	e014      	b.n	80034fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d0:	f7fd fa60 	bl	8000994 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d6:	e00a      	b.n	80034ee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034d8:	f7fd fa5c 	bl	8000994 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e0c1      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ee:	4b40      	ldr	r3, [pc, #256]	@ (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1ee      	bne.n	80034d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034fa:	7dfb      	ldrb	r3, [r7, #23]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d105      	bne.n	800350c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003500:	4b3b      	ldr	r3, [pc, #236]	@ (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003504:	4a3a      	ldr	r2, [pc, #232]	@ (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003506:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800350a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80ad 	beq.w	8003670 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003516:	4b36      	ldr	r3, [pc, #216]	@ (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b08      	cmp	r3, #8
 8003520:	d060      	beq.n	80035e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d145      	bne.n	80035b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800352a:	4b33      	ldr	r3, [pc, #204]	@ (80035f8 <HAL_RCC_OscConfig+0x4b4>)
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003530:	f7fd fa30 	bl	8000994 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003538:	f7fd fa2c 	bl	8000994 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e093      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354a:	4b29      	ldr	r3, [pc, #164]	@ (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69da      	ldr	r2, [r3, #28]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003564:	019b      	lsls	r3, r3, #6
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800356c:	085b      	lsrs	r3, r3, #1
 800356e:	3b01      	subs	r3, #1
 8003570:	041b      	lsls	r3, r3, #16
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003578:	061b      	lsls	r3, r3, #24
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003580:	071b      	lsls	r3, r3, #28
 8003582:	491b      	ldr	r1, [pc, #108]	@ (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 8003584:	4313      	orrs	r3, r2
 8003586:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003588:	4b1b      	ldr	r3, [pc, #108]	@ (80035f8 <HAL_RCC_OscConfig+0x4b4>)
 800358a:	2201      	movs	r2, #1
 800358c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358e:	f7fd fa01 	bl	8000994 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003596:	f7fd f9fd 	bl	8000994 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e064      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a8:	4b11      	ldr	r3, [pc, #68]	@ (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0f0      	beq.n	8003596 <HAL_RCC_OscConfig+0x452>
 80035b4:	e05c      	b.n	8003670 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b6:	4b10      	ldr	r3, [pc, #64]	@ (80035f8 <HAL_RCC_OscConfig+0x4b4>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035bc:	f7fd f9ea 	bl	8000994 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c4:	f7fd f9e6 	bl	8000994 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e04d      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d6:	4b06      	ldr	r3, [pc, #24]	@ (80035f0 <HAL_RCC_OscConfig+0x4ac>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0x480>
 80035e2:	e045      	b.n	8003670 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d107      	bne.n	80035fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e040      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
 80035f0:	40023800 	.word	0x40023800
 80035f4:	40007000 	.word	0x40007000
 80035f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035fc:	4b1f      	ldr	r3, [pc, #124]	@ (800367c <HAL_RCC_OscConfig+0x538>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d030      	beq.n	800366c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003614:	429a      	cmp	r2, r3
 8003616:	d129      	bne.n	800366c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003622:	429a      	cmp	r2, r3
 8003624:	d122      	bne.n	800366c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800362c:	4013      	ands	r3, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003632:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003634:	4293      	cmp	r3, r2
 8003636:	d119      	bne.n	800366c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003642:	085b      	lsrs	r3, r3, #1
 8003644:	3b01      	subs	r3, #1
 8003646:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003648:	429a      	cmp	r2, r3
 800364a:	d10f      	bne.n	800366c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003656:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003658:	429a      	cmp	r2, r3
 800365a:	d107      	bne.n	800366c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003666:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003668:	429a      	cmp	r2, r3
 800366a:	d001      	beq.n	8003670 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e000      	b.n	8003672 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40023800 	.word	0x40023800

08003680 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003680:	b084      	sub	sp, #16
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	f107 001c 	add.w	r0, r7, #28
 800368e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003692:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003696:	2b01      	cmp	r3, #1
 8003698:	d123      	bne.n	80036e2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80036ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80036c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d105      	bne.n	80036d6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f001 fadc 	bl	8004c94 <USB_CoreReset>
 80036dc:	4603      	mov	r3, r0
 80036de:	73fb      	strb	r3, [r7, #15]
 80036e0:	e01b      	b.n	800371a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f001 fad0 	bl	8004c94 <USB_CoreReset>
 80036f4:	4603      	mov	r3, r0
 80036f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80036f8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d106      	bne.n	800370e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003704:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	639a      	str	r2, [r3, #56]	@ 0x38
 800370c:	e005      	b.n	800371a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003712:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800371a:	7fbb      	ldrb	r3, [r7, #30]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d10b      	bne.n	8003738 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f043 0206 	orr.w	r2, r3, #6
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f043 0220 	orr.w	r2, r3, #32
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003738:	7bfb      	ldrb	r3, [r7, #15]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003744:	b004      	add	sp, #16
 8003746:	4770      	bx	lr

08003748 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	4613      	mov	r3, r2
 8003754:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	2b02      	cmp	r3, #2
 800375a:	d165      	bne.n	8003828 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	4a41      	ldr	r2, [pc, #260]	@ (8003864 <USB_SetTurnaroundTime+0x11c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d906      	bls.n	8003772 <USB_SetTurnaroundTime+0x2a>
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4a40      	ldr	r2, [pc, #256]	@ (8003868 <USB_SetTurnaroundTime+0x120>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d202      	bcs.n	8003772 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800376c:	230f      	movs	r3, #15
 800376e:	617b      	str	r3, [r7, #20]
 8003770:	e062      	b.n	8003838 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	4a3c      	ldr	r2, [pc, #240]	@ (8003868 <USB_SetTurnaroundTime+0x120>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d306      	bcc.n	8003788 <USB_SetTurnaroundTime+0x40>
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	4a3b      	ldr	r2, [pc, #236]	@ (800386c <USB_SetTurnaroundTime+0x124>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d202      	bcs.n	8003788 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003782:	230e      	movs	r3, #14
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	e057      	b.n	8003838 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	4a38      	ldr	r2, [pc, #224]	@ (800386c <USB_SetTurnaroundTime+0x124>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d306      	bcc.n	800379e <USB_SetTurnaroundTime+0x56>
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	4a37      	ldr	r2, [pc, #220]	@ (8003870 <USB_SetTurnaroundTime+0x128>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d202      	bcs.n	800379e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003798:	230d      	movs	r3, #13
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	e04c      	b.n	8003838 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	4a33      	ldr	r2, [pc, #204]	@ (8003870 <USB_SetTurnaroundTime+0x128>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d306      	bcc.n	80037b4 <USB_SetTurnaroundTime+0x6c>
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	4a32      	ldr	r2, [pc, #200]	@ (8003874 <USB_SetTurnaroundTime+0x12c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d802      	bhi.n	80037b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80037ae:	230c      	movs	r3, #12
 80037b0:	617b      	str	r3, [r7, #20]
 80037b2:	e041      	b.n	8003838 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	4a2f      	ldr	r2, [pc, #188]	@ (8003874 <USB_SetTurnaroundTime+0x12c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d906      	bls.n	80037ca <USB_SetTurnaroundTime+0x82>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4a2e      	ldr	r2, [pc, #184]	@ (8003878 <USB_SetTurnaroundTime+0x130>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d802      	bhi.n	80037ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80037c4:	230b      	movs	r3, #11
 80037c6:	617b      	str	r3, [r7, #20]
 80037c8:	e036      	b.n	8003838 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4a2a      	ldr	r2, [pc, #168]	@ (8003878 <USB_SetTurnaroundTime+0x130>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d906      	bls.n	80037e0 <USB_SetTurnaroundTime+0x98>
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	4a29      	ldr	r2, [pc, #164]	@ (800387c <USB_SetTurnaroundTime+0x134>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d802      	bhi.n	80037e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80037da:	230a      	movs	r3, #10
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	e02b      	b.n	8003838 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	4a26      	ldr	r2, [pc, #152]	@ (800387c <USB_SetTurnaroundTime+0x134>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d906      	bls.n	80037f6 <USB_SetTurnaroundTime+0xae>
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4a25      	ldr	r2, [pc, #148]	@ (8003880 <USB_SetTurnaroundTime+0x138>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d202      	bcs.n	80037f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80037f0:	2309      	movs	r3, #9
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	e020      	b.n	8003838 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	4a21      	ldr	r2, [pc, #132]	@ (8003880 <USB_SetTurnaroundTime+0x138>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d306      	bcc.n	800380c <USB_SetTurnaroundTime+0xc4>
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	4a20      	ldr	r2, [pc, #128]	@ (8003884 <USB_SetTurnaroundTime+0x13c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d802      	bhi.n	800380c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003806:	2308      	movs	r3, #8
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	e015      	b.n	8003838 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	4a1d      	ldr	r2, [pc, #116]	@ (8003884 <USB_SetTurnaroundTime+0x13c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d906      	bls.n	8003822 <USB_SetTurnaroundTime+0xda>
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4a1c      	ldr	r2, [pc, #112]	@ (8003888 <USB_SetTurnaroundTime+0x140>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d202      	bcs.n	8003822 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800381c:	2307      	movs	r3, #7
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	e00a      	b.n	8003838 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003822:	2306      	movs	r3, #6
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	e007      	b.n	8003838 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d102      	bne.n	8003834 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800382e:	2309      	movs	r3, #9
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	e001      	b.n	8003838 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003834:	2309      	movs	r3, #9
 8003836:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	029b      	lsls	r3, r3, #10
 800384c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003850:	431a      	orrs	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	371c      	adds	r7, #28
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	00d8acbf 	.word	0x00d8acbf
 8003868:	00e4e1c0 	.word	0x00e4e1c0
 800386c:	00f42400 	.word	0x00f42400
 8003870:	01067380 	.word	0x01067380
 8003874:	011a499f 	.word	0x011a499f
 8003878:	01312cff 	.word	0x01312cff
 800387c:	014ca43f 	.word	0x014ca43f
 8003880:	016e3600 	.word	0x016e3600
 8003884:	01a6ab1f 	.word	0x01a6ab1f
 8003888:	01e84800 	.word	0x01e84800

0800388c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f043 0201 	orr.w	r2, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f023 0201 	bic.w	r2, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80038ec:	78fb      	ldrb	r3, [r7, #3]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d115      	bne.n	800391e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80038fe:	200a      	movs	r0, #10
 8003900:	f7fd f854 	bl	80009ac <HAL_Delay>
      ms += 10U;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	330a      	adds	r3, #10
 8003908:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f001 f933 	bl	8004b76 <USB_GetMode>
 8003910:	4603      	mov	r3, r0
 8003912:	2b01      	cmp	r3, #1
 8003914:	d01e      	beq.n	8003954 <USB_SetCurrentMode+0x84>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2bc7      	cmp	r3, #199	@ 0xc7
 800391a:	d9f0      	bls.n	80038fe <USB_SetCurrentMode+0x2e>
 800391c:	e01a      	b.n	8003954 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800391e:	78fb      	ldrb	r3, [r7, #3]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d115      	bne.n	8003950 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003930:	200a      	movs	r0, #10
 8003932:	f7fd f83b 	bl	80009ac <HAL_Delay>
      ms += 10U;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	330a      	adds	r3, #10
 800393a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f001 f91a 	bl	8004b76 <USB_GetMode>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <USB_SetCurrentMode+0x84>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2bc7      	cmp	r3, #199	@ 0xc7
 800394c:	d9f0      	bls.n	8003930 <USB_SetCurrentMode+0x60>
 800394e:	e001      	b.n	8003954 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e005      	b.n	8003960 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2bc8      	cmp	r3, #200	@ 0xc8
 8003958:	d101      	bne.n	800395e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003968:	b084      	sub	sp, #16
 800396a:	b580      	push	{r7, lr}
 800396c:	b086      	sub	sp, #24
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
 8003972:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003976:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003982:	2300      	movs	r3, #0
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	e009      	b.n	800399c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	3340      	adds	r3, #64	@ 0x40
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	2200      	movs	r2, #0
 8003994:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	3301      	adds	r3, #1
 800399a:	613b      	str	r3, [r7, #16]
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	2b0e      	cmp	r3, #14
 80039a0:	d9f2      	bls.n	8003988 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80039a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d11c      	bne.n	80039e4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039b8:	f043 0302 	orr.w	r3, r3, #2
 80039bc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	e005      	b.n	80039f0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80039f6:	461a      	mov	r2, r3
 80039f8:	2300      	movs	r3, #0
 80039fa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039fc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d10d      	bne.n	8003a20 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d104      	bne.n	8003a16 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f968 	bl	8003ce4 <USB_SetDevSpeed>
 8003a14:	e008      	b.n	8003a28 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a16:	2101      	movs	r1, #1
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f963 	bl	8003ce4 <USB_SetDevSpeed>
 8003a1e:	e003      	b.n	8003a28 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a20:	2103      	movs	r1, #3
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f95e 	bl	8003ce4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a28:	2110      	movs	r1, #16
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f8fa 	bl	8003c24 <USB_FlushTxFifo>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f924 	bl	8003c88 <USB_FlushRxFifo>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a50:	461a      	mov	r2, r3
 8003a52:	2300      	movs	r3, #0
 8003a54:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	2300      	movs	r3, #0
 8003a60:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a68:	461a      	mov	r2, r3
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a6e:	2300      	movs	r3, #0
 8003a70:	613b      	str	r3, [r7, #16]
 8003a72:	e043      	b.n	8003afc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a8a:	d118      	bne.n	8003abe <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10a      	bne.n	8003aa8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	e013      	b.n	8003ad0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	e008      	b.n	8003ad0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	015a      	lsls	r2, r3, #5
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aca:	461a      	mov	r2, r3
 8003acc:	2300      	movs	r3, #0
 8003ace:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003adc:	461a      	mov	r2, r3
 8003ade:	2300      	movs	r3, #0
 8003ae0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	015a      	lsls	r2, r3, #5
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aee:	461a      	mov	r2, r3
 8003af0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003af4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	3301      	adds	r3, #1
 8003afa:	613b      	str	r3, [r7, #16]
 8003afc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003b00:	461a      	mov	r2, r3
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d3b5      	bcc.n	8003a74 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b08:	2300      	movs	r3, #0
 8003b0a:	613b      	str	r3, [r7, #16]
 8003b0c:	e043      	b.n	8003b96 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b24:	d118      	bne.n	8003b58 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10a      	bne.n	8003b42 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b38:	461a      	mov	r2, r3
 8003b3a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	e013      	b.n	8003b6a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	015a      	lsls	r2, r3, #5
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b4e:	461a      	mov	r2, r3
 8003b50:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	e008      	b.n	8003b6a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b64:	461a      	mov	r2, r3
 8003b66:	2300      	movs	r3, #0
 8003b68:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b76:	461a      	mov	r2, r3
 8003b78:	2300      	movs	r3, #0
 8003b7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b88:	461a      	mov	r2, r3
 8003b8a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	3301      	adds	r3, #1
 8003b94:	613b      	str	r3, [r7, #16]
 8003b96:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d3b5      	bcc.n	8003b0e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bb4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003bc2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003bc4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d105      	bne.n	8003bd8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	f043 0210 	orr.w	r2, r3, #16
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699a      	ldr	r2, [r3, #24]
 8003bdc:	4b10      	ldr	r3, [pc, #64]	@ (8003c20 <USB_DevInit+0x2b8>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003be4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	f043 0208 	orr.w	r2, r3, #8
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003bf8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d107      	bne.n	8003c10 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c08:	f043 0304 	orr.w	r3, r3, #4
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c1c:	b004      	add	sp, #16
 8003c1e:	4770      	bx	lr
 8003c20:	803c3800 	.word	0x803c3800

08003c24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	3301      	adds	r3, #1
 8003c36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c3e:	d901      	bls.n	8003c44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e01b      	b.n	8003c7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	daf2      	bge.n	8003c32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	019b      	lsls	r3, r3, #6
 8003c54:	f043 0220 	orr.w	r2, r3, #32
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c68:	d901      	bls.n	8003c6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e006      	b.n	8003c7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	d0f0      	beq.n	8003c5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	3301      	adds	r3, #1
 8003c98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ca0:	d901      	bls.n	8003ca6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e018      	b.n	8003cd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	daf2      	bge.n	8003c94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2210      	movs	r2, #16
 8003cb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003cc4:	d901      	bls.n	8003cca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e006      	b.n	8003cd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f003 0310 	and.w	r3, r3, #16
 8003cd2:	2b10      	cmp	r3, #16
 8003cd4:	d0f0      	beq.n	8003cb8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	78fb      	ldrb	r3, [r7, #3]
 8003cfe:	68f9      	ldr	r1, [r7, #12]
 8003d00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d04:	4313      	orrs	r3, r2
 8003d06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b087      	sub	sp, #28
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 0306 	and.w	r3, r3, #6
 8003d2e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d102      	bne.n	8003d3c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003d36:	2300      	movs	r3, #0
 8003d38:	75fb      	strb	r3, [r7, #23]
 8003d3a:	e00a      	b.n	8003d52 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d002      	beq.n	8003d48 <USB_GetDevSpeed+0x32>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b06      	cmp	r3, #6
 8003d46:	d102      	bne.n	8003d4e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003d48:	2302      	movs	r3, #2
 8003d4a:	75fb      	strb	r3, [r7, #23]
 8003d4c:	e001      	b.n	8003d52 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003d4e:	230f      	movs	r3, #15
 8003d50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	371c      	adds	r7, #28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	785b      	ldrb	r3, [r3, #1]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d13a      	bne.n	8003df2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d82:	69da      	ldr	r2, [r3, #28]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	f003 030f 	and.w	r3, r3, #15
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	68f9      	ldr	r1, [r7, #12]
 8003d96:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d155      	bne.n	8003e60 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	791b      	ldrb	r3, [r3, #4]
 8003dce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003dd0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	059b      	lsls	r3, r3, #22
 8003dd6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	0151      	lsls	r1, r2, #5
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	440a      	add	r2, r1
 8003de2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003de6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dee:	6013      	str	r3, [r2, #0]
 8003df0:	e036      	b.n	8003e60 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003df8:	69da      	ldr	r2, [r3, #28]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	2101      	movs	r1, #1
 8003e04:	fa01 f303 	lsl.w	r3, r1, r3
 8003e08:	041b      	lsls	r3, r3, #16
 8003e0a:	68f9      	ldr	r1, [r7, #12]
 8003e0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e10:	4313      	orrs	r3, r2
 8003e12:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d11a      	bne.n	8003e60 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	791b      	ldrb	r3, [r3, #4]
 8003e44:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e46:	430b      	orrs	r3, r1
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	0151      	lsls	r1, r2, #5
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	440a      	add	r2, r1
 8003e52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e5e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
	...

08003e70 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	785b      	ldrb	r3, [r3, #1]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d161      	bne.n	8003f50 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ea2:	d11f      	bne.n	8003ee4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	0151      	lsls	r1, r2, #5
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	440a      	add	r2, r1
 8003eba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ebe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003ec2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	0151      	lsls	r1, r2, #5
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	440a      	add	r2, r1
 8003eda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ede:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ee2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	f003 030f 	and.w	r3, r3, #15
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	43db      	mvns	r3, r3
 8003efe:	68f9      	ldr	r1, [r7, #12]
 8003f00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f04:	4013      	ands	r3, r2
 8003f06:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f0e:	69da      	ldr	r2, [r3, #28]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	2101      	movs	r1, #1
 8003f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	43db      	mvns	r3, r3
 8003f22:	68f9      	ldr	r1, [r7, #12]
 8003f24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f28:	4013      	ands	r3, r2
 8003f2a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	0159      	lsls	r1, r3, #5
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	440b      	add	r3, r1
 8003f42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f46:	4619      	mov	r1, r3
 8003f48:	4b35      	ldr	r3, [pc, #212]	@ (8004020 <USB_DeactivateEndpoint+0x1b0>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	600b      	str	r3, [r1, #0]
 8003f4e:	e060      	b.n	8004012 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f66:	d11f      	bne.n	8003fa8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	0151      	lsls	r1, r2, #5
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	440a      	add	r2, r1
 8003f7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003f86:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	0151      	lsls	r1, r2, #5
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	440a      	add	r2, r1
 8003f9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003fa2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003fa6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	f003 030f 	and.w	r3, r3, #15
 8003fb8:	2101      	movs	r1, #1
 8003fba:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbe:	041b      	lsls	r3, r3, #16
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	68f9      	ldr	r1, [r7, #12]
 8003fc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003fc8:	4013      	ands	r3, r2
 8003fca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fd2:	69da      	ldr	r2, [r3, #28]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	2101      	movs	r1, #1
 8003fde:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe2:	041b      	lsls	r3, r3, #16
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	68f9      	ldr	r1, [r7, #12]
 8003fe8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003fec:	4013      	ands	r3, r2
 8003fee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	0159      	lsls	r1, r3, #5
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	440b      	add	r3, r1
 8004006:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800400a:	4619      	mov	r1, r3
 800400c:	4b05      	ldr	r3, [pc, #20]	@ (8004024 <USB_DeactivateEndpoint+0x1b4>)
 800400e:	4013      	ands	r3, r2
 8004010:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	ec337800 	.word	0xec337800
 8004024:	eff37800 	.word	0xeff37800

08004028 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08a      	sub	sp, #40	@ 0x28
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	4613      	mov	r3, r2
 8004034:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	785b      	ldrb	r3, [r3, #1]
 8004044:	2b01      	cmp	r3, #1
 8004046:	f040 817a 	bne.w	800433e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d132      	bne.n	80040b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	0151      	lsls	r1, r2, #5
 8004064:	69fa      	ldr	r2, [r7, #28]
 8004066:	440a      	add	r2, r1
 8004068:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800406c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004070:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004074:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	4413      	add	r3, r2
 800407e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	0151      	lsls	r1, r2, #5
 8004088:	69fa      	ldr	r2, [r7, #28]
 800408a:	440a      	add	r2, r1
 800408c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004090:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004094:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	0151      	lsls	r1, r2, #5
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	440a      	add	r2, r1
 80040ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040b0:	0cdb      	lsrs	r3, r3, #19
 80040b2:	04db      	lsls	r3, r3, #19
 80040b4:	6113      	str	r3, [r2, #16]
 80040b6:	e092      	b.n	80041de <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	0151      	lsls	r1, r2, #5
 80040ca:	69fa      	ldr	r2, [r7, #28]
 80040cc:	440a      	add	r2, r1
 80040ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040d2:	0cdb      	lsrs	r3, r3, #19
 80040d4:	04db      	lsls	r3, r3, #19
 80040d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	0151      	lsls	r1, r2, #5
 80040ea:	69fa      	ldr	r2, [r7, #28]
 80040ec:	440a      	add	r2, r1
 80040ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040f2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80040f6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80040fa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d11a      	bne.n	8004138 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	691a      	ldr	r2, [r3, #16]
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	429a      	cmp	r2, r3
 800410c:	d903      	bls.n	8004116 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	4413      	add	r3, r2
 800411e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	0151      	lsls	r1, r2, #5
 8004128:	69fa      	ldr	r2, [r7, #28]
 800412a:	440a      	add	r2, r1
 800412c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004130:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004134:	6113      	str	r3, [r2, #16]
 8004136:	e01b      	b.n	8004170 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	4413      	add	r3, r2
 8004140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004144:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	6919      	ldr	r1, [r3, #16]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	440b      	add	r3, r1
 8004150:	1e59      	subs	r1, r3, #1
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	fbb1 f3f3 	udiv	r3, r1, r3
 800415a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800415c:	4ba2      	ldr	r3, [pc, #648]	@ (80043e8 <USB_EPStartXfer+0x3c0>)
 800415e:	400b      	ands	r3, r1
 8004160:	69b9      	ldr	r1, [r7, #24]
 8004162:	0148      	lsls	r0, r1, #5
 8004164:	69f9      	ldr	r1, [r7, #28]
 8004166:	4401      	add	r1, r0
 8004168:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800416c:	4313      	orrs	r3, r2
 800416e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	4413      	add	r3, r2
 8004178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800417c:	691a      	ldr	r2, [r3, #16]
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004186:	69b9      	ldr	r1, [r7, #24]
 8004188:	0148      	lsls	r0, r1, #5
 800418a:	69f9      	ldr	r1, [r7, #28]
 800418c:	4401      	add	r1, r0
 800418e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004192:	4313      	orrs	r3, r2
 8004194:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	791b      	ldrb	r3, [r3, #4]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d11f      	bne.n	80041de <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	015a      	lsls	r2, r3, #5
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	0151      	lsls	r1, r2, #5
 80041b0:	69fa      	ldr	r2, [r7, #28]
 80041b2:	440a      	add	r2, r1
 80041b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041b8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80041bc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	015a      	lsls	r2, r3, #5
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	0151      	lsls	r1, r2, #5
 80041d0:	69fa      	ldr	r2, [r7, #28]
 80041d2:	440a      	add	r2, r1
 80041d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80041dc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d14b      	bne.n	800427c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d009      	beq.n	8004200 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041f8:	461a      	mov	r2, r3
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	791b      	ldrb	r3, [r3, #4]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d128      	bne.n	800425a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004214:	2b00      	cmp	r3, #0
 8004216:	d110      	bne.n	800423a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	0151      	lsls	r1, r2, #5
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	440a      	add	r2, r1
 800422e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004232:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004236:	6013      	str	r3, [r2, #0]
 8004238:	e00f      	b.n	800425a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	0151      	lsls	r1, r2, #5
 800424c:	69fa      	ldr	r2, [r7, #28]
 800424e:	440a      	add	r2, r1
 8004250:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004254:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004258:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	4413      	add	r3, r2
 8004262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	0151      	lsls	r1, r2, #5
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	440a      	add	r2, r1
 8004270:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004274:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	e165      	b.n	8004548 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	4413      	add	r3, r2
 8004284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	0151      	lsls	r1, r2, #5
 800428e:	69fa      	ldr	r2, [r7, #28]
 8004290:	440a      	add	r2, r1
 8004292:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004296:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800429a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	791b      	ldrb	r3, [r3, #4]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d015      	beq.n	80042d0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 814d 	beq.w	8004548 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	2101      	movs	r1, #1
 80042c0:	fa01 f303 	lsl.w	r3, r1, r3
 80042c4:	69f9      	ldr	r1, [r7, #28]
 80042c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042ca:	4313      	orrs	r3, r2
 80042cc:	634b      	str	r3, [r1, #52]	@ 0x34
 80042ce:	e13b      	b.n	8004548 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d110      	bne.n	8004302 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	0151      	lsls	r1, r2, #5
 80042f2:	69fa      	ldr	r2, [r7, #28]
 80042f4:	440a      	add	r2, r1
 80042f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042fa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	e00f      	b.n	8004322 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	4413      	add	r3, r2
 800430a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	0151      	lsls	r1, r2, #5
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	440a      	add	r2, r1
 8004318:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800431c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004320:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	68d9      	ldr	r1, [r3, #12]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	781a      	ldrb	r2, [r3, #0]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	b298      	uxth	r0, r3
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	4603      	mov	r3, r0
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 f9b8 	bl	80046ac <USB_WritePacket>
 800433c:	e104      	b.n	8004548 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	0151      	lsls	r1, r2, #5
 8004350:	69fa      	ldr	r2, [r7, #28]
 8004352:	440a      	add	r2, r1
 8004354:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004358:	0cdb      	lsrs	r3, r3, #19
 800435a:	04db      	lsls	r3, r3, #19
 800435c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	0151      	lsls	r1, r2, #5
 8004370:	69fa      	ldr	r2, [r7, #28]
 8004372:	440a      	add	r2, r1
 8004374:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004378:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800437c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004380:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d131      	bne.n	80043ec <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ac:	691a      	ldr	r2, [r3, #16]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043b6:	69b9      	ldr	r1, [r7, #24]
 80043b8:	0148      	lsls	r0, r1, #5
 80043ba:	69f9      	ldr	r1, [r7, #28]
 80043bc:	4401      	add	r1, r0
 80043be:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80043c2:	4313      	orrs	r3, r2
 80043c4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	0151      	lsls	r1, r2, #5
 80043d8:	69fa      	ldr	r2, [r7, #28]
 80043da:	440a      	add	r2, r1
 80043dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80043e4:	6113      	str	r3, [r2, #16]
 80043e6:	e061      	b.n	80044ac <USB_EPStartXfer+0x484>
 80043e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d123      	bne.n	800443c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004400:	691a      	ldr	r2, [r3, #16]
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800440a:	69b9      	ldr	r1, [r7, #24]
 800440c:	0148      	lsls	r0, r1, #5
 800440e:	69f9      	ldr	r1, [r7, #28]
 8004410:	4401      	add	r1, r0
 8004412:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004416:	4313      	orrs	r3, r2
 8004418:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	4413      	add	r3, r2
 8004422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	0151      	lsls	r1, r2, #5
 800442c:	69fa      	ldr	r2, [r7, #28]
 800442e:	440a      	add	r2, r1
 8004430:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004434:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004438:	6113      	str	r3, [r2, #16]
 800443a:	e037      	b.n	80044ac <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	4413      	add	r3, r2
 8004446:	1e5a      	subs	r2, r3, #1
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004450:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	8afa      	ldrh	r2, [r7, #22]
 8004458:	fb03 f202 	mul.w	r2, r3, r2
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800446c:	691a      	ldr	r2, [r3, #16]
 800446e:	8afb      	ldrh	r3, [r7, #22]
 8004470:	04d9      	lsls	r1, r3, #19
 8004472:	4b38      	ldr	r3, [pc, #224]	@ (8004554 <USB_EPStartXfer+0x52c>)
 8004474:	400b      	ands	r3, r1
 8004476:	69b9      	ldr	r1, [r7, #24]
 8004478:	0148      	lsls	r0, r1, #5
 800447a:	69f9      	ldr	r1, [r7, #28]
 800447c:	4401      	add	r1, r0
 800447e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004482:	4313      	orrs	r3, r2
 8004484:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	4413      	add	r3, r2
 800448e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004492:	691a      	ldr	r2, [r3, #16]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800449c:	69b9      	ldr	r1, [r7, #24]
 800449e:	0148      	lsls	r0, r1, #5
 80044a0:	69f9      	ldr	r1, [r7, #28]
 80044a2:	4401      	add	r1, r0
 80044a4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80044a8:	4313      	orrs	r3, r2
 80044aa:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d10d      	bne.n	80044ce <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d009      	beq.n	80044ce <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	68d9      	ldr	r1, [r3, #12]
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ca:	460a      	mov	r2, r1
 80044cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	791b      	ldrb	r3, [r3, #4]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d128      	bne.n	8004528 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d110      	bne.n	8004508 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	0151      	lsls	r1, r2, #5
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	440a      	add	r2, r1
 80044fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004500:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	e00f      	b.n	8004528 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	0151      	lsls	r1, r2, #5
 800451a:	69fa      	ldr	r2, [r7, #28]
 800451c:	440a      	add	r2, r1
 800451e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004522:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004526:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	4413      	add	r3, r2
 8004530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	0151      	lsls	r1, r2, #5
 800453a:	69fa      	ldr	r2, [r7, #28]
 800453c:	440a      	add	r2, r1
 800453e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004542:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004546:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3720      	adds	r7, #32
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	1ff80000 	.word	0x1ff80000

08004558 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004566:	2300      	movs	r3, #0
 8004568:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	785b      	ldrb	r3, [r3, #1]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d14a      	bne.n	800460c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	4413      	add	r3, r2
 8004580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800458a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800458e:	f040 8086 	bne.w	800469e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	4413      	add	r3, r2
 800459c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	7812      	ldrb	r2, [r2, #0]
 80045a6:	0151      	lsls	r1, r2, #5
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	440a      	add	r2, r1
 80045ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80045b4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	7812      	ldrb	r2, [r2, #0]
 80045ca:	0151      	lsls	r1, r2, #5
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	440a      	add	r2, r1
 80045d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80045d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3301      	adds	r3, #1
 80045de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d902      	bls.n	80045f0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	75fb      	strb	r3, [r7, #23]
          break;
 80045ee:	e056      	b.n	800469e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004604:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004608:	d0e7      	beq.n	80045da <USB_EPStopXfer+0x82>
 800460a:	e048      	b.n	800469e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004620:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004624:	d13b      	bne.n	800469e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	4413      	add	r3, r2
 8004630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	7812      	ldrb	r2, [r2, #0]
 800463a:	0151      	lsls	r1, r2, #5
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	440a      	add	r2, r1
 8004640:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004644:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004648:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	4413      	add	r3, r2
 8004654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	7812      	ldrb	r2, [r2, #0]
 800465e:	0151      	lsls	r1, r2, #5
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	440a      	add	r2, r1
 8004664:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004668:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800466c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	3301      	adds	r3, #1
 8004672:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f242 7210 	movw	r2, #10000	@ 0x2710
 800467a:	4293      	cmp	r3, r2
 800467c:	d902      	bls.n	8004684 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	75fb      	strb	r3, [r7, #23]
          break;
 8004682:	e00c      	b.n	800469e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	4413      	add	r3, r2
 800468e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004698:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800469c:	d0e7      	beq.n	800466e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800469e:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	371c      	adds	r7, #28
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b089      	sub	sp, #36	@ 0x24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	4611      	mov	r1, r2
 80046b8:	461a      	mov	r2, r3
 80046ba:	460b      	mov	r3, r1
 80046bc:	71fb      	strb	r3, [r7, #7]
 80046be:	4613      	mov	r3, r2
 80046c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80046ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d123      	bne.n	800471a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80046d2:	88bb      	ldrh	r3, [r7, #4]
 80046d4:	3303      	adds	r3, #3
 80046d6:	089b      	lsrs	r3, r3, #2
 80046d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80046da:	2300      	movs	r3, #0
 80046dc:	61bb      	str	r3, [r7, #24]
 80046de:	e018      	b.n	8004712 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80046e0:	79fb      	ldrb	r3, [r7, #7]
 80046e2:	031a      	lsls	r2, r3, #12
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046ec:	461a      	mov	r2, r3
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	3301      	adds	r3, #1
 80046f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	3301      	adds	r3, #1
 80046fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	3301      	adds	r3, #1
 8004704:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	3301      	adds	r3, #1
 800470a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	3301      	adds	r3, #1
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	429a      	cmp	r2, r3
 8004718:	d3e2      	bcc.n	80046e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3724      	adds	r7, #36	@ 0x24
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004728:	b480      	push	{r7}
 800472a:	b08b      	sub	sp, #44	@ 0x2c
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	4613      	mov	r3, r2
 8004734:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800473e:	88fb      	ldrh	r3, [r7, #6]
 8004740:	089b      	lsrs	r3, r3, #2
 8004742:	b29b      	uxth	r3, r3
 8004744:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800474e:	2300      	movs	r3, #0
 8004750:	623b      	str	r3, [r7, #32]
 8004752:	e014      	b.n	800477e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004762:	3301      	adds	r3, #1
 8004764:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004768:	3301      	adds	r3, #1
 800476a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800476c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476e:	3301      	adds	r3, #1
 8004770:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004774:	3301      	adds	r3, #1
 8004776:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	3301      	adds	r3, #1
 800477c:	623b      	str	r3, [r7, #32]
 800477e:	6a3a      	ldr	r2, [r7, #32]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	429a      	cmp	r2, r3
 8004784:	d3e6      	bcc.n	8004754 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004786:	8bfb      	ldrh	r3, [r7, #30]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d01e      	beq.n	80047ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004796:	461a      	mov	r2, r3
 8004798:	f107 0310 	add.w	r3, r7, #16
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	fa22 f303 	lsr.w	r3, r2, r3
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b0:	701a      	strb	r2, [r3, #0]
      i++;
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	3301      	adds	r3, #1
 80047b6:	623b      	str	r3, [r7, #32]
      pDest++;
 80047b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ba:	3301      	adds	r3, #1
 80047bc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80047be:	8bfb      	ldrh	r3, [r7, #30]
 80047c0:	3b01      	subs	r3, #1
 80047c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80047c4:	8bfb      	ldrh	r3, [r7, #30]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1ea      	bne.n	80047a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80047ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	372c      	adds	r7, #44	@ 0x2c
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	785b      	ldrb	r3, [r3, #1]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d12c      	bne.n	800484e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	db12      	blt.n	800482c <USB_EPSetStall+0x54>
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00f      	beq.n	800482c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	0151      	lsls	r1, r2, #5
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	440a      	add	r2, r1
 8004822:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004826:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800482a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	015a      	lsls	r2, r3, #5
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4413      	add	r3, r2
 8004834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	0151      	lsls	r1, r2, #5
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	440a      	add	r2, r1
 8004842:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004846:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	e02b      	b.n	80048a6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4413      	add	r3, r2
 8004856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	db12      	blt.n	8004886 <USB_EPSetStall+0xae>
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00f      	beq.n	8004886 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4413      	add	r3, r2
 800486e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	0151      	lsls	r1, r2, #5
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	440a      	add	r2, r1
 800487c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004880:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004884:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4413      	add	r3, r2
 800488e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	0151      	lsls	r1, r2, #5
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	440a      	add	r2, r1
 800489c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80048a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	785b      	ldrb	r3, [r3, #1]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d128      	bne.n	8004922 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	0151      	lsls	r1, r2, #5
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	440a      	add	r2, r1
 80048e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80048ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	791b      	ldrb	r3, [r3, #4]
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d003      	beq.n	8004900 <USB_EPClearStall+0x4c>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	791b      	ldrb	r3, [r3, #4]
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d138      	bne.n	8004972 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	0151      	lsls	r1, r2, #5
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	440a      	add	r2, r1
 8004916:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800491a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	e027      	b.n	8004972 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	0151      	lsls	r1, r2, #5
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	440a      	add	r2, r1
 8004938:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800493c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004940:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	791b      	ldrb	r3, [r3, #4]
 8004946:	2b03      	cmp	r3, #3
 8004948:	d003      	beq.n	8004952 <USB_EPClearStall+0x9e>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	791b      	ldrb	r3, [r3, #4]
 800494e:	2b02      	cmp	r3, #2
 8004950:	d10f      	bne.n	8004972 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4413      	add	r3, r2
 800495a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	0151      	lsls	r1, r2, #5
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	440a      	add	r2, r1
 8004968:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800496c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004970:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	460b      	mov	r3, r1
 800498a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800499e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80049a2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	78fb      	ldrb	r3, [r7, #3]
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80049b4:	68f9      	ldr	r1, [r7, #12]
 80049b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049ba:	4313      	orrs	r3, r2
 80049bc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80049e6:	f023 0303 	bic.w	r3, r3, #3
 80049ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049fa:	f023 0302 	bic.w	r3, r3, #2
 80049fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b085      	sub	sp, #20
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004a28:	f023 0303 	bic.w	r3, r3, #3
 8004a2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a3c:	f043 0302 	orr.w	r3, r3, #2
 8004a40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	4013      	ands	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a68:	68fb      	ldr	r3, [r7, #12]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b085      	sub	sp, #20
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	4013      	ands	r3, r2
 8004a98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	0c1b      	lsrs	r3, r3, #16
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b085      	sub	sp, #20
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	4013      	ands	r3, r2
 8004acc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	b29b      	uxth	r3, r3
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b085      	sub	sp, #20
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004aee:	78fb      	ldrb	r3, [r7, #3]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b087      	sub	sp, #28
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	460b      	mov	r3, r1
 8004b24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b3c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004b3e:	78fb      	ldrb	r3, [r7, #3]
 8004b40:	f003 030f 	and.w	r3, r3, #15
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	fa22 f303 	lsr.w	r3, r2, r3
 8004b4a:	01db      	lsls	r3, r3, #7
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004b54:	78fb      	ldrb	r3, [r7, #3]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4013      	ands	r3, r2
 8004b66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b68:	68bb      	ldr	r3, [r7, #8]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	371c      	adds	r7, #28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	f003 0301 	and.w	r3, r3, #1
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b085      	sub	sp, #20
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004bb0:	f023 0307 	bic.w	r3, r3, #7
 8004bb4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	460b      	mov	r3, r1
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	333c      	adds	r3, #60	@ 0x3c
 8004bee:	3304      	adds	r3, #4
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	4a26      	ldr	r2, [pc, #152]	@ (8004c90 <USB_EP0_OutStart+0xb8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d90a      	bls.n	8004c12 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c0c:	d101      	bne.n	8004c12 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	e037      	b.n	8004c82 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c18:	461a      	mov	r2, r3
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c40:	f043 0318 	orr.w	r3, r3, #24
 8004c44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c54:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004c58:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004c5a:	7afb      	ldrb	r3, [r7, #11]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d10f      	bne.n	8004c80 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c66:	461a      	mov	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c7a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004c7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	371c      	adds	r7, #28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	4f54300a 	.word	0x4f54300a

08004c94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cac:	d901      	bls.n	8004cb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e01b      	b.n	8004cea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	daf2      	bge.n	8004ca0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f043 0201 	orr.w	r2, r3, #1
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cd6:	d901      	bls.n	8004cdc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e006      	b.n	8004cea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d0f0      	beq.n	8004cca <USB_CoreReset+0x36>

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
	...

08004cf8 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	460b      	mov	r3, r1
 8004d02:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8004d04:	2018      	movs	r0, #24
 8004d06:	f002 fc6b 	bl	80075e0 <USBD_static_malloc>
 8004d0a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d109      	bne.n	8004d26 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	32b0      	adds	r2, #176	@ 0xb0
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004d22:	2302      	movs	r3, #2
 8004d24:	e08a      	b.n	8004e3c <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	32b0      	adds	r2, #176	@ 0xb0
 8004d30:	68f9      	ldr	r1, [r7, #12]
 8004d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	32b0      	adds	r2, #176	@ 0xb0
 8004d40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	7c1b      	ldrb	r3, [r3, #16]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d11b      	bne.n	8004d8a <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004d52:	4b3c      	ldr	r3, [pc, #240]	@ (8004e44 <USBD_CUSTOM_HID_Init+0x14c>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	f003 020f 	and.w	r2, r3, #15
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	3326      	adds	r3, #38	@ 0x26
 8004d68:	2205      	movs	r2, #5
 8004d6a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004d6c:	4b36      	ldr	r3, [pc, #216]	@ (8004e48 <USBD_CUSTOM_HID_Init+0x150>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	f003 020f 	and.w	r2, r3, #15
 8004d74:	6879      	ldr	r1, [r7, #4]
 8004d76:	4613      	mov	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	440b      	add	r3, r1
 8004d80:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004d84:	2205      	movs	r2, #5
 8004d86:	801a      	strh	r2, [r3, #0]
 8004d88:	e01a      	b.n	8004dc0 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004d8a:	4b2e      	ldr	r3, [pc, #184]	@ (8004e44 <USBD_CUSTOM_HID_Init+0x14c>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	f003 020f 	and.w	r2, r3, #15
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	4613      	mov	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	3326      	adds	r3, #38	@ 0x26
 8004da0:	2205      	movs	r2, #5
 8004da2:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004da4:	4b28      	ldr	r3, [pc, #160]	@ (8004e48 <USBD_CUSTOM_HID_Init+0x150>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	f003 020f 	and.w	r2, r3, #15
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	4613      	mov	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	440b      	add	r3, r1
 8004db8:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004dbc:	2205      	movs	r2, #5
 8004dbe:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8004dc0:	4b20      	ldr	r3, [pc, #128]	@ (8004e44 <USBD_CUSTOM_HID_Init+0x14c>)
 8004dc2:	7819      	ldrb	r1, [r3, #0]
 8004dc4:	2310      	movs	r3, #16
 8004dc6:	2203      	movs	r2, #3
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f002 faaa 	bl	8007322 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8004dce:	4b1d      	ldr	r3, [pc, #116]	@ (8004e44 <USBD_CUSTOM_HID_Init+0x14c>)
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	f003 020f 	and.w	r2, r3, #15
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	440b      	add	r3, r1
 8004de2:	3324      	adds	r3, #36	@ 0x24
 8004de4:	2201      	movs	r2, #1
 8004de6:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8004de8:	4b17      	ldr	r3, [pc, #92]	@ (8004e48 <USBD_CUSTOM_HID_Init+0x150>)
 8004dea:	7819      	ldrb	r1, [r3, #0]
 8004dec:	2302      	movs	r3, #2
 8004dee:	2203      	movs	r2, #3
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f002 fa96 	bl	8007322 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8004df6:	4b14      	ldr	r3, [pc, #80]	@ (8004e48 <USBD_CUSTOM_HID_Init+0x150>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	f003 020f 	and.w	r2, r3, #15
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	4613      	mov	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004e0e:	2201      	movs	r2, #1
 8004e10:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	33b0      	adds	r3, #176	@ 0xb0
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8004e2c:	4b06      	ldr	r3, [pc, #24]	@ (8004e48 <USBD_CUSTOM_HID_Init+0x150>)
 8004e2e:	7819      	ldrb	r1, [r3, #0]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	2302      	movs	r3, #2
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f002 fb63 	bl	8007500 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	2000028e 	.word	0x2000028e
 8004e48:	2000028f 	.word	0x2000028f

08004e4c <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	460b      	mov	r3, r1
 8004e56:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8004e58:	4b37      	ldr	r3, [pc, #220]	@ (8004f38 <USBD_CUSTOM_HID_DeInit+0xec>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f002 fa85 	bl	800736e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8004e64:	4b34      	ldr	r3, [pc, #208]	@ (8004f38 <USBD_CUSTOM_HID_DeInit+0xec>)
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	f003 020f 	and.w	r2, r3, #15
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	440b      	add	r3, r1
 8004e78:	3324      	adds	r3, #36	@ 0x24
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8004e7e:	4b2e      	ldr	r3, [pc, #184]	@ (8004f38 <USBD_CUSTOM_HID_DeInit+0xec>)
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	f003 020f 	and.w	r2, r3, #15
 8004e86:	6879      	ldr	r1, [r7, #4]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	3326      	adds	r3, #38	@ 0x26
 8004e94:	2200      	movs	r2, #0
 8004e96:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8004e98:	4b28      	ldr	r3, [pc, #160]	@ (8004f3c <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f002 fa65 	bl	800736e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8004ea4:	4b25      	ldr	r3, [pc, #148]	@ (8004f3c <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	f003 020f 	and.w	r2, r3, #15
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	440b      	add	r3, r1
 8004eb8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8004ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8004f3c <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	f003 020f 	and.w	r2, r3, #15
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004ed8:	2200      	movs	r2, #0
 8004eda:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	32b0      	adds	r2, #176	@ 0xb0
 8004ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d01f      	beq.n	8004f2e <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	33b0      	adds	r3, #176	@ 0xb0
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	32b0      	adds	r2, #176	@ 0xb0
 8004f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f002 fb73 	bl	80075fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	32b0      	adds	r2, #176	@ 0xb0
 8004f20:	2100      	movs	r1, #0
 8004f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	2000028e 	.word	0x2000028e
 8004f3c:	2000028f 	.word	0x2000028f

08004f40 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	32b0      	adds	r2, #176	@ 0xb0
 8004f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f58:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	83fb      	strh	r3, [r7, #30]
#warning "USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED not implemented; See original library code"
#endif
#ifdef USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED
#warning "USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED not implemented; See original library code"
#endif
  uint8_t  *pbuf = NULL;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e118      	b.n	80051a6 <USBD_CUSTOM_HID_Setup+0x266>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d077      	beq.n	8005070 <USBD_CUSTOM_HID_Setup+0x130>
 8004f80:	2b20      	cmp	r3, #32
 8004f82:	f040 8108 	bne.w	8005196 <USBD_CUSTOM_HID_Setup+0x256>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	785b      	ldrb	r3, [r3, #1]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	2b0a      	cmp	r3, #10
 8004f8e:	d866      	bhi.n	800505e <USBD_CUSTOM_HID_Setup+0x11e>
 8004f90:	a201      	add	r2, pc, #4	@ (adr r2, 8004f98 <USBD_CUSTOM_HID_Setup+0x58>)
 8004f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f96:	bf00      	nop
 8004f98:	08005023 	.word	0x08005023
 8004f9c:	08004ff5 	.word	0x08004ff5
 8004fa0:	08004fd3 	.word	0x08004fd3
 8004fa4:	0800505f 	.word	0x0800505f
 8004fa8:	0800505f 	.word	0x0800505f
 8004fac:	0800505f 	.word	0x0800505f
 8004fb0:	0800505f 	.word	0x0800505f
 8004fb4:	0800505f 	.word	0x0800505f
 8004fb8:	08005005 	.word	0x08005005
 8004fbc:	08004fe3 	.word	0x08004fe3
 8004fc0:	08004fc5 	.word	0x08004fc5
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	885b      	ldrh	r3, [r3, #2]
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	461a      	mov	r2, r3
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	605a      	str	r2, [r3, #4]
          break;
 8004fd0:	e04d      	b.n	800506e <USBD_CUSTOM_HID_Setup+0x12e>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	4619      	mov	r1, r3
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f001 fd16 	bl	8006a0c <USBD_CtlSendData>
          break;
 8004fe0:	e045      	b.n	800506e <USBD_CUSTOM_HID_Setup+0x12e>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	885b      	ldrh	r3, [r3, #2]
 8004fe6:	0a1b      	lsrs	r3, r3, #8
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	461a      	mov	r2, r3
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	609a      	str	r2, [r3, #8]
          break;
 8004ff2:	e03c      	b.n	800506e <USBD_CUSTOM_HID_Setup+0x12e>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	3308      	adds	r3, #8
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f001 fd05 	bl	8006a0c <USBD_CtlSendData>
          break;
 8005002:	e034      	b.n	800506e <USBD_CUSTOM_HID_Setup+0x12e>

        case CUSTOM_HID_REQ_SET_REPORT:
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	2201      	movs	r2, #1
 8005008:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800500a:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	88db      	ldrh	r3, [r3, #6]
 8005010:	2b02      	cmp	r3, #2
 8005012:	bf28      	it	cs
 8005014:	2302      	movcs	r3, #2
 8005016:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8005018:	461a      	mov	r2, r3
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f001 fd22 	bl	8006a64 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8005020:	e025      	b.n	800506e <USBD_CUSTOM_HID_Setup+0x12e>
        /*
         * Implementation of Contact Count Maximum and Device Certification Status feature reports as required by Windows
         * For more information, see https://learn.microsoft.com/en-us/windows-hardware/design/component-guidelines/touchscreen-required-hid-top-level-collections
         */
        case CUSTOM_HID_REQ_GET_REPORT:
        	int FEATURE_REPORT_WVALUE_OFFSET = 0x300;		// High Byte of wValue is report type, Low Byte is report ID (HID 1.11, Section 7.2)
 8005022:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005026:	60fb      	str	r3, [r7, #12]
        	if (req->wValue == (FEATURE_REPORT_WVALUE_OFFSET + REPORTID_MAX_COUNT))
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	885b      	ldrh	r3, [r3, #2]
 800502c:	461a      	mov	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3302      	adds	r3, #2
 8005032:	429a      	cmp	r2, r3
 8005034:	d105      	bne.n	8005042 <USBD_CUSTOM_HID_Setup+0x102>
        	{
        		USBD_CtlSendData(pdev, (uint8_t*)&maxCountFeatureReport, 2);
 8005036:	2202      	movs	r2, #2
 8005038:	495d      	ldr	r1, [pc, #372]	@ (80051b0 <USBD_CUSTOM_HID_Setup+0x270>)
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f001 fce6 	bl	8006a0c <USBD_CtlSendData>
        	}
        	else if (req->wValue == (FEATURE_REPORT_WVALUE_OFFSET + REPORTID_CERTIFICATION))
					{
        		USBD_CtlSendData(pdev, (uint8_t*)&certificationFeatureReport, 257);
					}
        	break;
 8005040:	e014      	b.n	800506c <USBD_CUSTOM_HID_Setup+0x12c>
        	else if (req->wValue == (FEATURE_REPORT_WVALUE_OFFSET + REPORTID_CERTIFICATION))
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	885b      	ldrh	r3, [r3, #2]
 8005046:	461a      	mov	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	3344      	adds	r3, #68	@ 0x44
 800504c:	429a      	cmp	r2, r3
 800504e:	d10d      	bne.n	800506c <USBD_CUSTOM_HID_Setup+0x12c>
        		USBD_CtlSendData(pdev, (uint8_t*)&certificationFeatureReport, 257);
 8005050:	f240 1201 	movw	r2, #257	@ 0x101
 8005054:	4957      	ldr	r1, [pc, #348]	@ (80051b4 <USBD_CUSTOM_HID_Setup+0x274>)
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f001 fcd8 	bl	8006a0c <USBD_CtlSendData>
        	break;
 800505c:	e006      	b.n	800506c <USBD_CUSTOM_HID_Setup+0x12c>
        default:
          USBD_CtlError(pdev, req);
 800505e:	6839      	ldr	r1, [r7, #0]
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f001 fc62 	bl	800692a <USBD_CtlError>
          ret = USBD_FAIL;
 8005066:	2303      	movs	r3, #3
 8005068:	75fb      	strb	r3, [r7, #23]
          break;
 800506a:	e000      	b.n	800506e <USBD_CUSTOM_HID_Setup+0x12e>
        	break;
 800506c:	bf00      	nop
      }
      break;
 800506e:	e099      	b.n	80051a4 <USBD_CUSTOM_HID_Setup+0x264>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	785b      	ldrb	r3, [r3, #1]
 8005074:	2b0b      	cmp	r3, #11
 8005076:	f200 8085 	bhi.w	8005184 <USBD_CUSTOM_HID_Setup+0x244>
 800507a:	a201      	add	r2, pc, #4	@ (adr r2, 8005080 <USBD_CUSTOM_HID_Setup+0x140>)
 800507c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005080:	080050b1 	.word	0x080050b1
 8005084:	08005193 	.word	0x08005193
 8005088:	08005185 	.word	0x08005185
 800508c:	08005185 	.word	0x08005185
 8005090:	08005185 	.word	0x08005185
 8005094:	08005185 	.word	0x08005185
 8005098:	080050db 	.word	0x080050db
 800509c:	08005185 	.word	0x08005185
 80050a0:	08005185 	.word	0x08005185
 80050a4:	08005185 	.word	0x08005185
 80050a8:	08005133 	.word	0x08005133
 80050ac:	0800515d 	.word	0x0800515d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b03      	cmp	r3, #3
 80050ba:	d107      	bne.n	80050cc <USBD_CUSTOM_HID_Setup+0x18c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80050bc:	f107 030a 	add.w	r3, r7, #10
 80050c0:	2202      	movs	r2, #2
 80050c2:	4619      	mov	r1, r3
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f001 fca1 	bl	8006a0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80050ca:	e063      	b.n	8005194 <USBD_CUSTOM_HID_Setup+0x254>
            USBD_CtlError(pdev, req);
 80050cc:	6839      	ldr	r1, [r7, #0]
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f001 fc2b 	bl	800692a <USBD_CtlError>
            ret = USBD_FAIL;
 80050d4:	2303      	movs	r3, #3
 80050d6:	75fb      	strb	r3, [r7, #23]
          break;
 80050d8:	e05c      	b.n	8005194 <USBD_CUSTOM_HID_Setup+0x254>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	885b      	ldrh	r3, [r3, #2]
 80050de:	0a1b      	lsrs	r3, r3, #8
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	2b22      	cmp	r3, #34	@ 0x22
 80050e4:	d110      	bne.n	8005108 <USBD_CUSTOM_HID_Setup+0x1c8>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	88db      	ldrh	r3, [r3, #6]
 80050ea:	2bc5      	cmp	r3, #197	@ 0xc5
 80050ec:	bf28      	it	cs
 80050ee:	23c5      	movcs	r3, #197	@ 0xc5
 80050f0:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	33b0      	adds	r3, #176	@ 0xb0
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	61bb      	str	r3, [r7, #24]
 8005106:	e00d      	b.n	8005124 <USBD_CUSTOM_HID_Setup+0x1e4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	885b      	ldrh	r3, [r3, #2]
 800510c:	0a1b      	lsrs	r3, r3, #8
 800510e:	b29b      	uxth	r3, r3
 8005110:	2b21      	cmp	r3, #33	@ 0x21
 8005112:	d107      	bne.n	8005124 <USBD_CUSTOM_HID_Setup+0x1e4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8005114:	4b28      	ldr	r3, [pc, #160]	@ (80051b8 <USBD_CUSTOM_HID_Setup+0x278>)
 8005116:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	88db      	ldrh	r3, [r3, #6]
 800511c:	2b09      	cmp	r3, #9
 800511e:	bf28      	it	cs
 8005120:	2309      	movcs	r3, #9
 8005122:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005124:	8bfb      	ldrh	r3, [r7, #30]
 8005126:	461a      	mov	r2, r3
 8005128:	69b9      	ldr	r1, [r7, #24]
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f001 fc6e 	bl	8006a0c <USBD_CtlSendData>
          break;
 8005130:	e030      	b.n	8005194 <USBD_CUSTOM_HID_Setup+0x254>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b03      	cmp	r3, #3
 800513c:	d107      	bne.n	800514e <USBD_CUSTOM_HID_Setup+0x20e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	330c      	adds	r3, #12
 8005142:	2201      	movs	r2, #1
 8005144:	4619      	mov	r1, r3
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f001 fc60 	bl	8006a0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800514c:	e022      	b.n	8005194 <USBD_CUSTOM_HID_Setup+0x254>
            USBD_CtlError(pdev, req);
 800514e:	6839      	ldr	r1, [r7, #0]
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f001 fbea 	bl	800692a <USBD_CtlError>
            ret = USBD_FAIL;
 8005156:	2303      	movs	r3, #3
 8005158:	75fb      	strb	r3, [r7, #23]
          break;
 800515a:	e01b      	b.n	8005194 <USBD_CUSTOM_HID_Setup+0x254>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b03      	cmp	r3, #3
 8005166:	d106      	bne.n	8005176 <USBD_CUSTOM_HID_Setup+0x236>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	885b      	ldrh	r3, [r3, #2]
 800516c:	b2db      	uxtb	r3, r3
 800516e:	461a      	mov	r2, r3
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005174:	e00e      	b.n	8005194 <USBD_CUSTOM_HID_Setup+0x254>
            USBD_CtlError(pdev, req);
 8005176:	6839      	ldr	r1, [r7, #0]
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f001 fbd6 	bl	800692a <USBD_CtlError>
            ret = USBD_FAIL;
 800517e:	2303      	movs	r3, #3
 8005180:	75fb      	strb	r3, [r7, #23]
          break;
 8005182:	e007      	b.n	8005194 <USBD_CUSTOM_HID_Setup+0x254>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005184:	6839      	ldr	r1, [r7, #0]
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f001 fbcf 	bl	800692a <USBD_CtlError>
          ret = USBD_FAIL;
 800518c:	2303      	movs	r3, #3
 800518e:	75fb      	strb	r3, [r7, #23]
          break;
 8005190:	e000      	b.n	8005194 <USBD_CUSTOM_HID_Setup+0x254>
          break;
 8005192:	bf00      	nop
      }
      break;
 8005194:	e006      	b.n	80051a4 <USBD_CUSTOM_HID_Setup+0x264>

    default:
      USBD_CtlError(pdev, req);
 8005196:	6839      	ldr	r1, [r7, #0]
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f001 fbc6 	bl	800692a <USBD_CtlError>
      ret = USBD_FAIL;
 800519e:	2303      	movs	r3, #3
 80051a0:	75fb      	strb	r3, [r7, #23]
      break;
 80051a2:	bf00      	nop
  }
  return (uint8_t)ret;
 80051a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3720      	adds	r7, #32
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	2000000c 	.word	0x2000000c
 80051b4:	20000110 	.word	0x20000110
 80051b8:	20000278 	.word	0x20000278

080051bc <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	4613      	mov	r3, r2
 80051c8:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	32b0      	adds	r2, #176	@ 0xb0
 80051d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051d8:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e017      	b.n	8005214 <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	d110      	bne.n	8005212 <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	7d1b      	ldrb	r3, [r3, #20]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10a      	bne.n	800520e <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	2201      	movs	r2, #1
 80051fc:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 80051fe:	4b07      	ldr	r3, [pc, #28]	@ (800521c <USBD_CUSTOM_HID_SendReport+0x60>)
 8005200:	7819      	ldrb	r1, [r3, #0]
 8005202:	88fb      	ldrh	r3, [r7, #6]
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f002 f959 	bl	80074be <USBD_LL_Transmit>
 800520c:	e001      	b.n	8005212 <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800520e:	2301      	movs	r3, #1
 8005210:	e000      	b.n	8005214 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3718      	adds	r7, #24
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	2000028e 	.word	0x2000028e

08005220 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005228:	2181      	movs	r1, #129	@ 0x81
 800522a:	4815      	ldr	r0, [pc, #84]	@ (8005280 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800522c:	f000 fd1d 	bl	8005c6a <USBD_GetEpDesc>
 8005230:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005232:	2101      	movs	r1, #1
 8005234:	4812      	ldr	r0, [pc, #72]	@ (8005280 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8005236:	f000 fd18 	bl	8005c6a <USBD_GetEpDesc>
 800523a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d009      	beq.n	8005256 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	f042 0210 	orr.w	r2, r2, #16
 800524a:	711a      	strb	r2, [r3, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2205      	movs	r2, #5
 8005254:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d009      	beq.n	8005270 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2200      	movs	r2, #0
 8005260:	f042 0202 	orr.w	r2, r2, #2
 8005264:	711a      	strb	r2, [r3, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	2205      	movs	r2, #5
 800526e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2229      	movs	r2, #41	@ 0x29
 8005274:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005276:	4b02      	ldr	r3, [pc, #8]	@ (8005280 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	2000024c 	.word	0x2000024c

08005284 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800528c:	2181      	movs	r1, #129	@ 0x81
 800528e:	4815      	ldr	r0, [pc, #84]	@ (80052e4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8005290:	f000 fceb 	bl	8005c6a <USBD_GetEpDesc>
 8005294:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005296:	2101      	movs	r1, #1
 8005298:	4812      	ldr	r0, [pc, #72]	@ (80052e4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800529a:	f000 fce6 	bl	8005c6a <USBD_GetEpDesc>
 800529e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d009      	beq.n	80052ba <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f042 0210 	orr.w	r2, r2, #16
 80052ae:	711a      	strb	r2, [r3, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2205      	movs	r2, #5
 80052b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d009      	beq.n	80052d4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f042 0202 	orr.w	r2, r2, #2
 80052c8:	711a      	strb	r2, [r3, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2205      	movs	r2, #5
 80052d2:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2229      	movs	r2, #41	@ 0x29
 80052d8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80052da:	4b02      	ldr	r3, [pc, #8]	@ (80052e4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	2000024c 	.word	0x2000024c

080052e8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80052f0:	2181      	movs	r1, #129	@ 0x81
 80052f2:	4815      	ldr	r0, [pc, #84]	@ (8005348 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80052f4:	f000 fcb9 	bl	8005c6a <USBD_GetEpDesc>
 80052f8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80052fa:	2101      	movs	r1, #1
 80052fc:	4812      	ldr	r0, [pc, #72]	@ (8005348 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80052fe:	f000 fcb4 	bl	8005c6a <USBD_GetEpDesc>
 8005302:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d009      	beq.n	800531e <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f042 0210 	orr.w	r2, r2, #16
 8005312:	711a      	strb	r2, [r3, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2205      	movs	r2, #5
 800531c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d009      	beq.n	8005338 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2200      	movs	r2, #0
 8005328:	f042 0202 	orr.w	r2, r2, #2
 800532c:	711a      	strb	r2, [r3, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2205      	movs	r2, #5
 8005336:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2229      	movs	r2, #41	@ 0x29
 800533c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800533e:	4b02      	ldr	r3, [pc, #8]	@ (8005348 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	2000024c 	.word	0x2000024c

0800534c <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	460b      	mov	r3, r1
 8005356:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	32b0      	adds	r2, #176	@ 0xb0
 8005362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005366:	2200      	movs	r2, #0
 8005368:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	460b      	mov	r3, r1
 8005382:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	32b0      	adds	r2, #176	@ 0xb0
 800538e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005396:	2303      	movs	r3, #3
 8005398:	e017      	b.n	80053ca <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	32b0      	adds	r2, #176	@ 0xb0
 80053a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053a8:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	33b0      	adds	r3, #176	@ 0xb0
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	7810      	ldrb	r0, [r2, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	7852      	ldrb	r2, [r2, #1]
 80053c4:	4611      	mov	r1, r2
 80053c6:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
	...

080053d4 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	32b0      	adds	r2, #176	@ 0xb0
 80053e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e00f      	b.n	8005412 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	32b0      	adds	r2, #176	@ 0xb0
 80053fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005400:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8005402:	4b06      	ldr	r3, [pc, #24]	@ (800541c <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8005404:	7819      	ldrb	r1, [r3, #0]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	2302      	movs	r3, #2
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f002 f878 	bl	8007500 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	2000028f 	.word	0x2000028f

08005420 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	32b0      	adds	r2, #176	@ 0xb0
 8005432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005436:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800543e:	2303      	movs	r3, #3
 8005440:	e016      	b.n	8005470 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d111      	bne.n	800546e <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	33b0      	adds	r3, #176	@ 0xb0
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	7810      	ldrb	r0, [r2, #0]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	7852      	ldrb	r2, [r2, #1]
 8005464:	4611      	mov	r1, r2
 8005466:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	220a      	movs	r2, #10
 8005484:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8005486:	4b03      	ldr	r3, [pc, #12]	@ (8005494 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005488:	4618      	mov	r0, r3
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	20000284 	.word	0x20000284

08005498 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e009      	b.n	80054c0 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	33b0      	adds	r3, #176	@ 0xb0
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	4613      	mov	r3, r2
 80054d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e01f      	b.n	8005524 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	79fa      	ldrb	r2, [r7, #7]
 8005516:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f001 fe9b 	bl	8007254 <USBD_LL_Init>
 800551e:	4603      	mov	r3, r0
 8005520:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005522:	7dfb      	ldrb	r3, [r7, #23]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005536:	2300      	movs	r3, #0
 8005538:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005540:	2303      	movs	r3, #3
 8005542:	e025      	b.n	8005590 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	32ae      	adds	r2, #174	@ 0xae
 8005556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800555a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00f      	beq.n	8005580 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	32ae      	adds	r2, #174	@ 0xae
 800556a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800556e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005570:	f107 020e 	add.w	r2, r7, #14
 8005574:	4610      	mov	r0, r2
 8005576:	4798      	blx	r3
 8005578:	4602      	mov	r2, r0
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005586:	1c5a      	adds	r2, r3, #1
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f001 fea3 	bl	80072ec <USBD_LL_Start>
 80055a6:	4603      	mov	r3, r0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80055b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b084      	sub	sp, #16
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	460b      	mov	r3, r1
 80055d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d009      	beq.n	80055f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	78fa      	ldrb	r2, [r7, #3]
 80055ea:	4611      	mov	r1, r2
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	4798      	blx	r3
 80055f0:	4603      	mov	r3, r0
 80055f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
 8005606:	460b      	mov	r3, r1
 8005608:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800560a:	2300      	movs	r3, #0
 800560c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	78fa      	ldrb	r2, [r7, #3]
 8005618:	4611      	mov	r1, r2
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	4798      	blx	r3
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d001      	beq.n	8005628 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005624:	2303      	movs	r3, #3
 8005626:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005628:	7bfb      	ldrb	r3, [r7, #15]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b084      	sub	sp, #16
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
 800563a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005642:	6839      	ldr	r1, [r7, #0]
 8005644:	4618      	mov	r0, r3
 8005646:	f001 f936 	bl	80068b6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005658:	461a      	mov	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005666:	f003 031f 	and.w	r3, r3, #31
 800566a:	2b02      	cmp	r3, #2
 800566c:	d01a      	beq.n	80056a4 <USBD_LL_SetupStage+0x72>
 800566e:	2b02      	cmp	r3, #2
 8005670:	d822      	bhi.n	80056b8 <USBD_LL_SetupStage+0x86>
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <USBD_LL_SetupStage+0x4a>
 8005676:	2b01      	cmp	r3, #1
 8005678:	d00a      	beq.n	8005690 <USBD_LL_SetupStage+0x5e>
 800567a:	e01d      	b.n	80056b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005682:	4619      	mov	r1, r3
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 fb63 	bl	8005d50 <USBD_StdDevReq>
 800568a:	4603      	mov	r3, r0
 800568c:	73fb      	strb	r3, [r7, #15]
      break;
 800568e:	e020      	b.n	80056d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005696:	4619      	mov	r1, r3
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 fbcb 	bl	8005e34 <USBD_StdItfReq>
 800569e:	4603      	mov	r3, r0
 80056a0:	73fb      	strb	r3, [r7, #15]
      break;
 80056a2:	e016      	b.n	80056d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80056aa:	4619      	mov	r1, r3
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 fc2d 	bl	8005f0c <USBD_StdEPReq>
 80056b2:	4603      	mov	r3, r0
 80056b4:	73fb      	strb	r3, [r7, #15]
      break;
 80056b6:	e00c      	b.n	80056d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80056be:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	4619      	mov	r1, r3
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f001 fe70 	bl	80073ac <USBD_LL_StallEP>
 80056cc:	4603      	mov	r3, r0
 80056ce:	73fb      	strb	r3, [r7, #15]
      break;
 80056d0:	bf00      	nop
  }

  return ret;
 80056d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	460b      	mov	r3, r1
 80056e6:	607a      	str	r2, [r7, #4]
 80056e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80056ee:	7afb      	ldrb	r3, [r7, #11]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d16e      	bne.n	80057d2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80056fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005702:	2b03      	cmp	r3, #3
 8005704:	f040 8098 	bne.w	8005838 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	429a      	cmp	r2, r3
 8005712:	d913      	bls.n	800573c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	1ad2      	subs	r2, r2, r3
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	4293      	cmp	r3, r2
 800572c:	bf28      	it	cs
 800572e:	4613      	movcs	r3, r2
 8005730:	461a      	mov	r2, r3
 8005732:	6879      	ldr	r1, [r7, #4]
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f001 f9b2 	bl	8006a9e <USBD_CtlContinueRx>
 800573a:	e07d      	b.n	8005838 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005742:	f003 031f 	and.w	r3, r3, #31
 8005746:	2b02      	cmp	r3, #2
 8005748:	d014      	beq.n	8005774 <USBD_LL_DataOutStage+0x98>
 800574a:	2b02      	cmp	r3, #2
 800574c:	d81d      	bhi.n	800578a <USBD_LL_DataOutStage+0xae>
 800574e:	2b00      	cmp	r3, #0
 8005750:	d002      	beq.n	8005758 <USBD_LL_DataOutStage+0x7c>
 8005752:	2b01      	cmp	r3, #1
 8005754:	d003      	beq.n	800575e <USBD_LL_DataOutStage+0x82>
 8005756:	e018      	b.n	800578a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	75bb      	strb	r3, [r7, #22]
            break;
 800575c:	e018      	b.n	8005790 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005764:	b2db      	uxtb	r3, r3
 8005766:	4619      	mov	r1, r3
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 fa64 	bl	8005c36 <USBD_CoreFindIF>
 800576e:	4603      	mov	r3, r0
 8005770:	75bb      	strb	r3, [r7, #22]
            break;
 8005772:	e00d      	b.n	8005790 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800577a:	b2db      	uxtb	r3, r3
 800577c:	4619      	mov	r1, r3
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f000 fa66 	bl	8005c50 <USBD_CoreFindEP>
 8005784:	4603      	mov	r3, r0
 8005786:	75bb      	strb	r3, [r7, #22]
            break;
 8005788:	e002      	b.n	8005790 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800578a:	2300      	movs	r3, #0
 800578c:	75bb      	strb	r3, [r7, #22]
            break;
 800578e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005790:	7dbb      	ldrb	r3, [r7, #22]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d119      	bne.n	80057ca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b03      	cmp	r3, #3
 80057a0:	d113      	bne.n	80057ca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80057a2:	7dba      	ldrb	r2, [r7, #22]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	32ae      	adds	r2, #174	@ 0xae
 80057a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00b      	beq.n	80057ca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80057b2:	7dba      	ldrb	r2, [r7, #22]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80057ba:	7dba      	ldrb	r2, [r7, #22]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	32ae      	adds	r2, #174	@ 0xae
 80057c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f001 f978 	bl	8006ac0 <USBD_CtlSendStatus>
 80057d0:	e032      	b.n	8005838 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80057d2:	7afb      	ldrb	r3, [r7, #11]
 80057d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	4619      	mov	r1, r3
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 fa37 	bl	8005c50 <USBD_CoreFindEP>
 80057e2:	4603      	mov	r3, r0
 80057e4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80057e6:	7dbb      	ldrb	r3, [r7, #22]
 80057e8:	2bff      	cmp	r3, #255	@ 0xff
 80057ea:	d025      	beq.n	8005838 <USBD_LL_DataOutStage+0x15c>
 80057ec:	7dbb      	ldrb	r3, [r7, #22]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d122      	bne.n	8005838 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b03      	cmp	r3, #3
 80057fc:	d117      	bne.n	800582e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80057fe:	7dba      	ldrb	r2, [r7, #22]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	32ae      	adds	r2, #174	@ 0xae
 8005804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00f      	beq.n	800582e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800580e:	7dba      	ldrb	r2, [r7, #22]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005816:	7dba      	ldrb	r2, [r7, #22]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	32ae      	adds	r2, #174	@ 0xae
 800581c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	7afa      	ldrb	r2, [r7, #11]
 8005824:	4611      	mov	r1, r2
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	4798      	blx	r3
 800582a:	4603      	mov	r3, r0
 800582c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800582e:	7dfb      	ldrb	r3, [r7, #23]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005834:	7dfb      	ldrb	r3, [r7, #23]
 8005836:	e000      	b.n	800583a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3718      	adds	r7, #24
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b086      	sub	sp, #24
 8005846:	af00      	add	r7, sp, #0
 8005848:	60f8      	str	r0, [r7, #12]
 800584a:	460b      	mov	r3, r1
 800584c:	607a      	str	r2, [r7, #4]
 800584e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005850:	7afb      	ldrb	r3, [r7, #11]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d16f      	bne.n	8005936 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3314      	adds	r3, #20
 800585a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005862:	2b02      	cmp	r3, #2
 8005864:	d15a      	bne.n	800591c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	689a      	ldr	r2, [r3, #8]
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	429a      	cmp	r2, r3
 8005870:	d914      	bls.n	800589c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	689a      	ldr	r2, [r3, #8]
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	1ad2      	subs	r2, r2, r3
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	461a      	mov	r2, r3
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f001 f8da 	bl	8006a42 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800588e:	2300      	movs	r3, #0
 8005890:	2200      	movs	r2, #0
 8005892:	2100      	movs	r1, #0
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f001 fe33 	bl	8007500 <USBD_LL_PrepareReceive>
 800589a:	e03f      	b.n	800591c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	68da      	ldr	r2, [r3, #12]
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d11c      	bne.n	80058e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d316      	bcc.n	80058e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80058be:	429a      	cmp	r2, r3
 80058c0:	d20f      	bcs.n	80058e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80058c2:	2200      	movs	r2, #0
 80058c4:	2100      	movs	r1, #0
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f001 f8bb 	bl	8006a42 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80058d4:	2300      	movs	r3, #0
 80058d6:	2200      	movs	r2, #0
 80058d8:	2100      	movs	r1, #0
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f001 fe10 	bl	8007500 <USBD_LL_PrepareReceive>
 80058e0:	e01c      	b.n	800591c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b03      	cmp	r3, #3
 80058ec:	d10f      	bne.n	800590e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d009      	beq.n	800590e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800590e:	2180      	movs	r1, #128	@ 0x80
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f001 fd4b 	bl	80073ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f001 f8e5 	bl	8006ae6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d03a      	beq.n	800599c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f7ff fe42 	bl	80055b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005934:	e032      	b.n	800599c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005936:	7afb      	ldrb	r3, [r7, #11]
 8005938:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800593c:	b2db      	uxtb	r3, r3
 800593e:	4619      	mov	r1, r3
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 f985 	bl	8005c50 <USBD_CoreFindEP>
 8005946:	4603      	mov	r3, r0
 8005948:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800594a:	7dfb      	ldrb	r3, [r7, #23]
 800594c:	2bff      	cmp	r3, #255	@ 0xff
 800594e:	d025      	beq.n	800599c <USBD_LL_DataInStage+0x15a>
 8005950:	7dfb      	ldrb	r3, [r7, #23]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d122      	bne.n	800599c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b03      	cmp	r3, #3
 8005960:	d11c      	bne.n	800599c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005962:	7dfa      	ldrb	r2, [r7, #23]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	32ae      	adds	r2, #174	@ 0xae
 8005968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d014      	beq.n	800599c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005972:	7dfa      	ldrb	r2, [r7, #23]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800597a:	7dfa      	ldrb	r2, [r7, #23]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	32ae      	adds	r2, #174	@ 0xae
 8005980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	7afa      	ldrb	r2, [r7, #11]
 8005988:	4611      	mov	r1, r2
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	4798      	blx	r3
 800598e:	4603      	mov	r3, r0
 8005990:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005992:	7dbb      	ldrb	r3, [r7, #22]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005998:	7dbb      	ldrb	r3, [r7, #22]
 800599a:	e000      	b.n	800599e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3718      	adds	r7, #24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b084      	sub	sp, #16
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80059ae:	2300      	movs	r3, #0
 80059b0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d014      	beq.n	8005a0c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00e      	beq.n	8005a0c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6852      	ldr	r2, [r2, #4]
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	4611      	mov	r1, r2
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	4798      	blx	r3
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a0c:	2340      	movs	r3, #64	@ 0x40
 8005a0e:	2200      	movs	r2, #0
 8005a10:	2100      	movs	r1, #0
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f001 fc85 	bl	8007322 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2240      	movs	r2, #64	@ 0x40
 8005a24:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a28:	2340      	movs	r3, #64	@ 0x40
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	2180      	movs	r1, #128	@ 0x80
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f001 fc77 	bl	8007322 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2240      	movs	r2, #64	@ 0x40
 8005a3e:	621a      	str	r2, [r3, #32]

  return ret;
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	460b      	mov	r3, r1
 8005a54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	78fa      	ldrb	r2, [r7, #3]
 8005a5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d006      	beq.n	8005a8c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2204      	movs	r2, #4
 8005a90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b083      	sub	sp, #12
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d106      	bne.n	8005ac4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d110      	bne.n	8005b08 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00b      	beq.n	8005b08 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005af6:	69db      	ldr	r3, [r3, #28]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d005      	beq.n	8005b08 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b082      	sub	sp, #8
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	32ae      	adds	r2, #174	@ 0xae
 8005b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e01c      	b.n	8005b6e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b03      	cmp	r3, #3
 8005b3e:	d115      	bne.n	8005b6c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	32ae      	adds	r2, #174	@ 0xae
 8005b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00b      	beq.n	8005b6c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	32ae      	adds	r2, #174	@ 0xae
 8005b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	78fa      	ldrb	r2, [r7, #3]
 8005b66:	4611      	mov	r1, r2
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b082      	sub	sp, #8
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	460b      	mov	r3, r1
 8005b80:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	32ae      	adds	r2, #174	@ 0xae
 8005b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e01c      	b.n	8005bd2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b03      	cmp	r3, #3
 8005ba2:	d115      	bne.n	8005bd0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	32ae      	adds	r2, #174	@ 0xae
 8005bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00b      	beq.n	8005bd0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	32ae      	adds	r2, #174	@ 0xae
 8005bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc8:	78fa      	ldrb	r2, [r7, #3]
 8005bca:	4611      	mov	r1, r2
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00e      	beq.n	8005c2c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6852      	ldr	r2, [r2, #4]
 8005c1a:	b2d2      	uxtb	r2, r2
 8005c1c:	4611      	mov	r1, r2
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	4798      	blx	r3
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d001      	beq.n	8005c2c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b083      	sub	sp, #12
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
 8005c3e:	460b      	mov	r3, r1
 8005c40:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005c42:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	460b      	mov	r3, r1
 8005c5a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005c5c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b086      	sub	sp, #24
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	460b      	mov	r3, r1
 8005c74:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	885b      	ldrh	r3, [r3, #2]
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	7812      	ldrb	r2, [r2, #0]
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d91f      	bls.n	8005cd0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005c96:	e013      	b.n	8005cc0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005c98:	f107 030a 	add.w	r3, r7, #10
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	6978      	ldr	r0, [r7, #20]
 8005ca0:	f000 f81b 	bl	8005cda <USBD_GetNextDesc>
 8005ca4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	785b      	ldrb	r3, [r3, #1]
 8005caa:	2b05      	cmp	r3, #5
 8005cac:	d108      	bne.n	8005cc0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	789b      	ldrb	r3, [r3, #2]
 8005cb6:	78fa      	ldrb	r2, [r7, #3]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d008      	beq.n	8005cce <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	885b      	ldrh	r3, [r3, #2]
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	897b      	ldrh	r3, [r7, #10]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d8e5      	bhi.n	8005c98 <USBD_GetEpDesc+0x2e>
 8005ccc:	e000      	b.n	8005cd0 <USBD_GetEpDesc+0x66>
          break;
 8005cce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005cd0:	693b      	ldr	r3, [r7, #16]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b085      	sub	sp, #20
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	7812      	ldrb	r2, [r2, #0]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4413      	add	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005d04:	68fb      	ldr	r3, [r7, #12]
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b087      	sub	sp, #28
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	3301      	adds	r3, #1
 8005d28:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005d30:	8a3b      	ldrh	r3, [r7, #16]
 8005d32:	021b      	lsls	r3, r3, #8
 8005d34:	b21a      	sxth	r2, r3
 8005d36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	b21b      	sxth	r3, r3
 8005d3e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005d40:	89fb      	ldrh	r3, [r7, #14]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
	...

08005d50 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005d66:	2b40      	cmp	r3, #64	@ 0x40
 8005d68:	d005      	beq.n	8005d76 <USBD_StdDevReq+0x26>
 8005d6a:	2b40      	cmp	r3, #64	@ 0x40
 8005d6c:	d857      	bhi.n	8005e1e <USBD_StdDevReq+0xce>
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00f      	beq.n	8005d92 <USBD_StdDevReq+0x42>
 8005d72:	2b20      	cmp	r3, #32
 8005d74:	d153      	bne.n	8005e1e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	32ae      	adds	r2, #174	@ 0xae
 8005d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	6839      	ldr	r1, [r7, #0]
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	4798      	blx	r3
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d90:	e04a      	b.n	8005e28 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	785b      	ldrb	r3, [r3, #1]
 8005d96:	2b09      	cmp	r3, #9
 8005d98:	d83b      	bhi.n	8005e12 <USBD_StdDevReq+0xc2>
 8005d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005da0 <USBD_StdDevReq+0x50>)
 8005d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da0:	08005df5 	.word	0x08005df5
 8005da4:	08005e09 	.word	0x08005e09
 8005da8:	08005e13 	.word	0x08005e13
 8005dac:	08005dff 	.word	0x08005dff
 8005db0:	08005e13 	.word	0x08005e13
 8005db4:	08005dd3 	.word	0x08005dd3
 8005db8:	08005dc9 	.word	0x08005dc9
 8005dbc:	08005e13 	.word	0x08005e13
 8005dc0:	08005deb 	.word	0x08005deb
 8005dc4:	08005ddd 	.word	0x08005ddd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fa3c 	bl	8006248 <USBD_GetDescriptor>
          break;
 8005dd0:	e024      	b.n	8005e1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005dd2:	6839      	ldr	r1, [r7, #0]
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 fbcb 	bl	8006570 <USBD_SetAddress>
          break;
 8005dda:	e01f      	b.n	8005e1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005ddc:	6839      	ldr	r1, [r7, #0]
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fc0a 	bl	80065f8 <USBD_SetConfig>
 8005de4:	4603      	mov	r3, r0
 8005de6:	73fb      	strb	r3, [r7, #15]
          break;
 8005de8:	e018      	b.n	8005e1c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005dea:	6839      	ldr	r1, [r7, #0]
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 fcad 	bl	800674c <USBD_GetConfig>
          break;
 8005df2:	e013      	b.n	8005e1c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005df4:	6839      	ldr	r1, [r7, #0]
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fcde 	bl	80067b8 <USBD_GetStatus>
          break;
 8005dfc:	e00e      	b.n	8005e1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005dfe:	6839      	ldr	r1, [r7, #0]
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 fd0d 	bl	8006820 <USBD_SetFeature>
          break;
 8005e06:	e009      	b.n	8005e1c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005e08:	6839      	ldr	r1, [r7, #0]
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 fd31 	bl	8006872 <USBD_ClrFeature>
          break;
 8005e10:	e004      	b.n	8005e1c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005e12:	6839      	ldr	r1, [r7, #0]
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fd88 	bl	800692a <USBD_CtlError>
          break;
 8005e1a:	bf00      	nop
      }
      break;
 8005e1c:	e004      	b.n	8005e28 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005e1e:	6839      	ldr	r1, [r7, #0]
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fd82 	bl	800692a <USBD_CtlError>
      break;
 8005e26:	bf00      	nop
  }

  return ret;
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop

08005e34 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005e4a:	2b40      	cmp	r3, #64	@ 0x40
 8005e4c:	d005      	beq.n	8005e5a <USBD_StdItfReq+0x26>
 8005e4e:	2b40      	cmp	r3, #64	@ 0x40
 8005e50:	d852      	bhi.n	8005ef8 <USBD_StdItfReq+0xc4>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <USBD_StdItfReq+0x26>
 8005e56:	2b20      	cmp	r3, #32
 8005e58:	d14e      	bne.n	8005ef8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	3b01      	subs	r3, #1
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d840      	bhi.n	8005eea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	889b      	ldrh	r3, [r3, #4]
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d836      	bhi.n	8005ee0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	889b      	ldrh	r3, [r3, #4]
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	4619      	mov	r1, r3
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7ff fedb 	bl	8005c36 <USBD_CoreFindIF>
 8005e80:	4603      	mov	r3, r0
 8005e82:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e84:	7bbb      	ldrb	r3, [r7, #14]
 8005e86:	2bff      	cmp	r3, #255	@ 0xff
 8005e88:	d01d      	beq.n	8005ec6 <USBD_StdItfReq+0x92>
 8005e8a:	7bbb      	ldrb	r3, [r7, #14]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d11a      	bne.n	8005ec6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005e90:	7bba      	ldrb	r2, [r7, #14]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	32ae      	adds	r2, #174	@ 0xae
 8005e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00f      	beq.n	8005ec0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005ea0:	7bba      	ldrb	r2, [r7, #14]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005ea8:	7bba      	ldrb	r2, [r7, #14]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	32ae      	adds	r2, #174	@ 0xae
 8005eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	6839      	ldr	r1, [r7, #0]
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	4798      	blx	r3
 8005eba:	4603      	mov	r3, r0
 8005ebc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005ebe:	e004      	b.n	8005eca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005ec4:	e001      	b.n	8005eca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	88db      	ldrh	r3, [r3, #6]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d110      	bne.n	8005ef4 <USBD_StdItfReq+0xc0>
 8005ed2:	7bfb      	ldrb	r3, [r7, #15]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10d      	bne.n	8005ef4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 fdf1 	bl	8006ac0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005ede:	e009      	b.n	8005ef4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005ee0:	6839      	ldr	r1, [r7, #0]
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fd21 	bl	800692a <USBD_CtlError>
          break;
 8005ee8:	e004      	b.n	8005ef4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005eea:	6839      	ldr	r1, [r7, #0]
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fd1c 	bl	800692a <USBD_CtlError>
          break;
 8005ef2:	e000      	b.n	8005ef6 <USBD_StdItfReq+0xc2>
          break;
 8005ef4:	bf00      	nop
      }
      break;
 8005ef6:	e004      	b.n	8005f02 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005ef8:	6839      	ldr	r1, [r7, #0]
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fd15 	bl	800692a <USBD_CtlError>
      break;
 8005f00:	bf00      	nop
  }

  return ret;
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f16:	2300      	movs	r3, #0
 8005f18:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	889b      	ldrh	r3, [r3, #4]
 8005f1e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005f28:	2b40      	cmp	r3, #64	@ 0x40
 8005f2a:	d007      	beq.n	8005f3c <USBD_StdEPReq+0x30>
 8005f2c:	2b40      	cmp	r3, #64	@ 0x40
 8005f2e:	f200 817f 	bhi.w	8006230 <USBD_StdEPReq+0x324>
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d02a      	beq.n	8005f8c <USBD_StdEPReq+0x80>
 8005f36:	2b20      	cmp	r3, #32
 8005f38:	f040 817a 	bne.w	8006230 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005f3c:	7bbb      	ldrb	r3, [r7, #14]
 8005f3e:	4619      	mov	r1, r3
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7ff fe85 	bl	8005c50 <USBD_CoreFindEP>
 8005f46:	4603      	mov	r3, r0
 8005f48:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f4a:	7b7b      	ldrb	r3, [r7, #13]
 8005f4c:	2bff      	cmp	r3, #255	@ 0xff
 8005f4e:	f000 8174 	beq.w	800623a <USBD_StdEPReq+0x32e>
 8005f52:	7b7b      	ldrb	r3, [r7, #13]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f040 8170 	bne.w	800623a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005f5a:	7b7a      	ldrb	r2, [r7, #13]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005f62:	7b7a      	ldrb	r2, [r7, #13]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	32ae      	adds	r2, #174	@ 0xae
 8005f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 8163 	beq.w	800623a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005f74:	7b7a      	ldrb	r2, [r7, #13]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	32ae      	adds	r2, #174	@ 0xae
 8005f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	6839      	ldr	r1, [r7, #0]
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	4798      	blx	r3
 8005f86:	4603      	mov	r3, r0
 8005f88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f8a:	e156      	b.n	800623a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	785b      	ldrb	r3, [r3, #1]
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	d008      	beq.n	8005fa6 <USBD_StdEPReq+0x9a>
 8005f94:	2b03      	cmp	r3, #3
 8005f96:	f300 8145 	bgt.w	8006224 <USBD_StdEPReq+0x318>
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f000 809b 	beq.w	80060d6 <USBD_StdEPReq+0x1ca>
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d03c      	beq.n	800601e <USBD_StdEPReq+0x112>
 8005fa4:	e13e      	b.n	8006224 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d002      	beq.n	8005fb8 <USBD_StdEPReq+0xac>
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d016      	beq.n	8005fe4 <USBD_StdEPReq+0xd8>
 8005fb6:	e02c      	b.n	8006012 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fb8:	7bbb      	ldrb	r3, [r7, #14]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00d      	beq.n	8005fda <USBD_StdEPReq+0xce>
 8005fbe:	7bbb      	ldrb	r3, [r7, #14]
 8005fc0:	2b80      	cmp	r3, #128	@ 0x80
 8005fc2:	d00a      	beq.n	8005fda <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005fc4:	7bbb      	ldrb	r3, [r7, #14]
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f001 f9ef 	bl	80073ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fce:	2180      	movs	r1, #128	@ 0x80
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f001 f9eb 	bl	80073ac <USBD_LL_StallEP>
 8005fd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005fd8:	e020      	b.n	800601c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005fda:	6839      	ldr	r1, [r7, #0]
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fca4 	bl	800692a <USBD_CtlError>
              break;
 8005fe2:	e01b      	b.n	800601c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	885b      	ldrh	r3, [r3, #2]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10e      	bne.n	800600a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005fec:	7bbb      	ldrb	r3, [r7, #14]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00b      	beq.n	800600a <USBD_StdEPReq+0xfe>
 8005ff2:	7bbb      	ldrb	r3, [r7, #14]
 8005ff4:	2b80      	cmp	r3, #128	@ 0x80
 8005ff6:	d008      	beq.n	800600a <USBD_StdEPReq+0xfe>
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	88db      	ldrh	r3, [r3, #6]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d104      	bne.n	800600a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006000:	7bbb      	ldrb	r3, [r7, #14]
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 f9d1 	bl	80073ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fd58 	bl	8006ac0 <USBD_CtlSendStatus>

              break;
 8006010:	e004      	b.n	800601c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006012:	6839      	ldr	r1, [r7, #0]
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fc88 	bl	800692a <USBD_CtlError>
              break;
 800601a:	bf00      	nop
          }
          break;
 800601c:	e107      	b.n	800622e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d002      	beq.n	8006030 <USBD_StdEPReq+0x124>
 800602a:	2b03      	cmp	r3, #3
 800602c:	d016      	beq.n	800605c <USBD_StdEPReq+0x150>
 800602e:	e04b      	b.n	80060c8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006030:	7bbb      	ldrb	r3, [r7, #14]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00d      	beq.n	8006052 <USBD_StdEPReq+0x146>
 8006036:	7bbb      	ldrb	r3, [r7, #14]
 8006038:	2b80      	cmp	r3, #128	@ 0x80
 800603a:	d00a      	beq.n	8006052 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800603c:	7bbb      	ldrb	r3, [r7, #14]
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f001 f9b3 	bl	80073ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006046:	2180      	movs	r1, #128	@ 0x80
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f001 f9af 	bl	80073ac <USBD_LL_StallEP>
 800604e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006050:	e040      	b.n	80060d4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006052:	6839      	ldr	r1, [r7, #0]
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fc68 	bl	800692a <USBD_CtlError>
              break;
 800605a:	e03b      	b.n	80060d4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	885b      	ldrh	r3, [r3, #2]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d136      	bne.n	80060d2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006064:	7bbb      	ldrb	r3, [r7, #14]
 8006066:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800606a:	2b00      	cmp	r3, #0
 800606c:	d004      	beq.n	8006078 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800606e:	7bbb      	ldrb	r3, [r7, #14]
 8006070:	4619      	mov	r1, r3
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f001 f9b9 	bl	80073ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fd21 	bl	8006ac0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800607e:	7bbb      	ldrb	r3, [r7, #14]
 8006080:	4619      	mov	r1, r3
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7ff fde4 	bl	8005c50 <USBD_CoreFindEP>
 8006088:	4603      	mov	r3, r0
 800608a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800608c:	7b7b      	ldrb	r3, [r7, #13]
 800608e:	2bff      	cmp	r3, #255	@ 0xff
 8006090:	d01f      	beq.n	80060d2 <USBD_StdEPReq+0x1c6>
 8006092:	7b7b      	ldrb	r3, [r7, #13]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d11c      	bne.n	80060d2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006098:	7b7a      	ldrb	r2, [r7, #13]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80060a0:	7b7a      	ldrb	r2, [r7, #13]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	32ae      	adds	r2, #174	@ 0xae
 80060a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d010      	beq.n	80060d2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80060b0:	7b7a      	ldrb	r2, [r7, #13]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	32ae      	adds	r2, #174	@ 0xae
 80060b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	6839      	ldr	r1, [r7, #0]
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	4798      	blx	r3
 80060c2:	4603      	mov	r3, r0
 80060c4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80060c6:	e004      	b.n	80060d2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80060c8:	6839      	ldr	r1, [r7, #0]
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fc2d 	bl	800692a <USBD_CtlError>
              break;
 80060d0:	e000      	b.n	80060d4 <USBD_StdEPReq+0x1c8>
              break;
 80060d2:	bf00      	nop
          }
          break;
 80060d4:	e0ab      	b.n	800622e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d002      	beq.n	80060e8 <USBD_StdEPReq+0x1dc>
 80060e2:	2b03      	cmp	r3, #3
 80060e4:	d032      	beq.n	800614c <USBD_StdEPReq+0x240>
 80060e6:	e097      	b.n	8006218 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060e8:	7bbb      	ldrb	r3, [r7, #14]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d007      	beq.n	80060fe <USBD_StdEPReq+0x1f2>
 80060ee:	7bbb      	ldrb	r3, [r7, #14]
 80060f0:	2b80      	cmp	r3, #128	@ 0x80
 80060f2:	d004      	beq.n	80060fe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80060f4:	6839      	ldr	r1, [r7, #0]
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fc17 	bl	800692a <USBD_CtlError>
                break;
 80060fc:	e091      	b.n	8006222 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006102:	2b00      	cmp	r3, #0
 8006104:	da0b      	bge.n	800611e <USBD_StdEPReq+0x212>
 8006106:	7bbb      	ldrb	r3, [r7, #14]
 8006108:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800610c:	4613      	mov	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	3310      	adds	r3, #16
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	4413      	add	r3, r2
 800611a:	3304      	adds	r3, #4
 800611c:	e00b      	b.n	8006136 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800611e:	7bbb      	ldrb	r3, [r7, #14]
 8006120:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006124:	4613      	mov	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	4413      	add	r3, r2
 8006134:	3304      	adds	r3, #4
 8006136:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2200      	movs	r2, #0
 800613c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2202      	movs	r2, #2
 8006142:	4619      	mov	r1, r3
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fc61 	bl	8006a0c <USBD_CtlSendData>
              break;
 800614a:	e06a      	b.n	8006222 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800614c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006150:	2b00      	cmp	r3, #0
 8006152:	da11      	bge.n	8006178 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006154:	7bbb      	ldrb	r3, [r7, #14]
 8006156:	f003 020f 	and.w	r2, r3, #15
 800615a:	6879      	ldr	r1, [r7, #4]
 800615c:	4613      	mov	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	440b      	add	r3, r1
 8006166:	3324      	adds	r3, #36	@ 0x24
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d117      	bne.n	800619e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800616e:	6839      	ldr	r1, [r7, #0]
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fbda 	bl	800692a <USBD_CtlError>
                  break;
 8006176:	e054      	b.n	8006222 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006178:	7bbb      	ldrb	r3, [r7, #14]
 800617a:	f003 020f 	and.w	r2, r3, #15
 800617e:	6879      	ldr	r1, [r7, #4]
 8006180:	4613      	mov	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	440b      	add	r3, r1
 800618a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d104      	bne.n	800619e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006194:	6839      	ldr	r1, [r7, #0]
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fbc7 	bl	800692a <USBD_CtlError>
                  break;
 800619c:	e041      	b.n	8006222 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800619e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	da0b      	bge.n	80061be <USBD_StdEPReq+0x2b2>
 80061a6:	7bbb      	ldrb	r3, [r7, #14]
 80061a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80061ac:	4613      	mov	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	3310      	adds	r3, #16
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	4413      	add	r3, r2
 80061ba:	3304      	adds	r3, #4
 80061bc:	e00b      	b.n	80061d6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80061be:	7bbb      	ldrb	r3, [r7, #14]
 80061c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061c4:	4613      	mov	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	4413      	add	r3, r2
 80061d4:	3304      	adds	r3, #4
 80061d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80061d8:	7bbb      	ldrb	r3, [r7, #14]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d002      	beq.n	80061e4 <USBD_StdEPReq+0x2d8>
 80061de:	7bbb      	ldrb	r3, [r7, #14]
 80061e0:	2b80      	cmp	r3, #128	@ 0x80
 80061e2:	d103      	bne.n	80061ec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2200      	movs	r2, #0
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	e00e      	b.n	800620a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80061ec:	7bbb      	ldrb	r3, [r7, #14]
 80061ee:	4619      	mov	r1, r3
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f001 f919 	bl	8007428 <USBD_LL_IsStallEP>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2201      	movs	r2, #1
 8006200:	601a      	str	r2, [r3, #0]
 8006202:	e002      	b.n	800620a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2200      	movs	r2, #0
 8006208:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	2202      	movs	r2, #2
 800620e:	4619      	mov	r1, r3
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fbfb 	bl	8006a0c <USBD_CtlSendData>
              break;
 8006216:	e004      	b.n	8006222 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fb85 	bl	800692a <USBD_CtlError>
              break;
 8006220:	bf00      	nop
          }
          break;
 8006222:	e004      	b.n	800622e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006224:	6839      	ldr	r1, [r7, #0]
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fb7f 	bl	800692a <USBD_CtlError>
          break;
 800622c:	bf00      	nop
      }
      break;
 800622e:	e005      	b.n	800623c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006230:	6839      	ldr	r1, [r7, #0]
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fb79 	bl	800692a <USBD_CtlError>
      break;
 8006238:	e000      	b.n	800623c <USBD_StdEPReq+0x330>
      break;
 800623a:	bf00      	nop
  }

  return ret;
 800623c:	7bfb      	ldrb	r3, [r7, #15]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
	...

08006248 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006252:	2300      	movs	r3, #0
 8006254:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006256:	2300      	movs	r3, #0
 8006258:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	885b      	ldrh	r3, [r3, #2]
 8006262:	0a1b      	lsrs	r3, r3, #8
 8006264:	b29b      	uxth	r3, r3
 8006266:	3b01      	subs	r3, #1
 8006268:	2b0e      	cmp	r3, #14
 800626a:	f200 8152 	bhi.w	8006512 <USBD_GetDescriptor+0x2ca>
 800626e:	a201      	add	r2, pc, #4	@ (adr r2, 8006274 <USBD_GetDescriptor+0x2c>)
 8006270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006274:	080062e5 	.word	0x080062e5
 8006278:	080062fd 	.word	0x080062fd
 800627c:	0800633d 	.word	0x0800633d
 8006280:	08006513 	.word	0x08006513
 8006284:	08006513 	.word	0x08006513
 8006288:	080064b3 	.word	0x080064b3
 800628c:	080064df 	.word	0x080064df
 8006290:	08006513 	.word	0x08006513
 8006294:	08006513 	.word	0x08006513
 8006298:	08006513 	.word	0x08006513
 800629c:	08006513 	.word	0x08006513
 80062a0:	08006513 	.word	0x08006513
 80062a4:	08006513 	.word	0x08006513
 80062a8:	08006513 	.word	0x08006513
 80062ac:	080062b1 	.word	0x080062b1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00b      	beq.n	80062d4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	7c12      	ldrb	r2, [r2, #16]
 80062c8:	f107 0108 	add.w	r1, r7, #8
 80062cc:	4610      	mov	r0, r2
 80062ce:	4798      	blx	r3
 80062d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062d2:	e126      	b.n	8006522 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80062d4:	6839      	ldr	r1, [r7, #0]
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fb27 	bl	800692a <USBD_CtlError>
        err++;
 80062dc:	7afb      	ldrb	r3, [r7, #11]
 80062de:	3301      	adds	r3, #1
 80062e0:	72fb      	strb	r3, [r7, #11]
      break;
 80062e2:	e11e      	b.n	8006522 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	7c12      	ldrb	r2, [r2, #16]
 80062f0:	f107 0108 	add.w	r1, r7, #8
 80062f4:	4610      	mov	r0, r2
 80062f6:	4798      	blx	r3
 80062f8:	60f8      	str	r0, [r7, #12]
      break;
 80062fa:	e112      	b.n	8006522 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	7c1b      	ldrb	r3, [r3, #16]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10d      	bne.n	8006320 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800630a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630c:	f107 0208 	add.w	r2, r7, #8
 8006310:	4610      	mov	r0, r2
 8006312:	4798      	blx	r3
 8006314:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	3301      	adds	r3, #1
 800631a:	2202      	movs	r2, #2
 800631c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800631e:	e100      	b.n	8006522 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006328:	f107 0208 	add.w	r2, r7, #8
 800632c:	4610      	mov	r0, r2
 800632e:	4798      	blx	r3
 8006330:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	3301      	adds	r3, #1
 8006336:	2202      	movs	r2, #2
 8006338:	701a      	strb	r2, [r3, #0]
      break;
 800633a:	e0f2      	b.n	8006522 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	885b      	ldrh	r3, [r3, #2]
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b05      	cmp	r3, #5
 8006344:	f200 80ac 	bhi.w	80064a0 <USBD_GetDescriptor+0x258>
 8006348:	a201      	add	r2, pc, #4	@ (adr r2, 8006350 <USBD_GetDescriptor+0x108>)
 800634a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634e:	bf00      	nop
 8006350:	08006369 	.word	0x08006369
 8006354:	0800639d 	.word	0x0800639d
 8006358:	080063d1 	.word	0x080063d1
 800635c:	08006405 	.word	0x08006405
 8006360:	08006439 	.word	0x08006439
 8006364:	0800646d 	.word	0x0800646d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00b      	beq.n	800638c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	7c12      	ldrb	r2, [r2, #16]
 8006380:	f107 0108 	add.w	r1, r7, #8
 8006384:	4610      	mov	r0, r2
 8006386:	4798      	blx	r3
 8006388:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800638a:	e091      	b.n	80064b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800638c:	6839      	ldr	r1, [r7, #0]
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 facb 	bl	800692a <USBD_CtlError>
            err++;
 8006394:	7afb      	ldrb	r3, [r7, #11]
 8006396:	3301      	adds	r3, #1
 8006398:	72fb      	strb	r3, [r7, #11]
          break;
 800639a:	e089      	b.n	80064b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00b      	beq.n	80063c0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	7c12      	ldrb	r2, [r2, #16]
 80063b4:	f107 0108 	add.w	r1, r7, #8
 80063b8:	4610      	mov	r0, r2
 80063ba:	4798      	blx	r3
 80063bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063be:	e077      	b.n	80064b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80063c0:	6839      	ldr	r1, [r7, #0]
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fab1 	bl	800692a <USBD_CtlError>
            err++;
 80063c8:	7afb      	ldrb	r3, [r7, #11]
 80063ca:	3301      	adds	r3, #1
 80063cc:	72fb      	strb	r3, [r7, #11]
          break;
 80063ce:	e06f      	b.n	80064b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00b      	beq.n	80063f4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	7c12      	ldrb	r2, [r2, #16]
 80063e8:	f107 0108 	add.w	r1, r7, #8
 80063ec:	4610      	mov	r0, r2
 80063ee:	4798      	blx	r3
 80063f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063f2:	e05d      	b.n	80064b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80063f4:	6839      	ldr	r1, [r7, #0]
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fa97 	bl	800692a <USBD_CtlError>
            err++;
 80063fc:	7afb      	ldrb	r3, [r7, #11]
 80063fe:	3301      	adds	r3, #1
 8006400:	72fb      	strb	r3, [r7, #11]
          break;
 8006402:	e055      	b.n	80064b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00b      	beq.n	8006428 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	7c12      	ldrb	r2, [r2, #16]
 800641c:	f107 0108 	add.w	r1, r7, #8
 8006420:	4610      	mov	r0, r2
 8006422:	4798      	blx	r3
 8006424:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006426:	e043      	b.n	80064b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006428:	6839      	ldr	r1, [r7, #0]
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 fa7d 	bl	800692a <USBD_CtlError>
            err++;
 8006430:	7afb      	ldrb	r3, [r7, #11]
 8006432:	3301      	adds	r3, #1
 8006434:	72fb      	strb	r3, [r7, #11]
          break;
 8006436:	e03b      	b.n	80064b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00b      	beq.n	800645c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	7c12      	ldrb	r2, [r2, #16]
 8006450:	f107 0108 	add.w	r1, r7, #8
 8006454:	4610      	mov	r0, r2
 8006456:	4798      	blx	r3
 8006458:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800645a:	e029      	b.n	80064b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800645c:	6839      	ldr	r1, [r7, #0]
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fa63 	bl	800692a <USBD_CtlError>
            err++;
 8006464:	7afb      	ldrb	r3, [r7, #11]
 8006466:	3301      	adds	r3, #1
 8006468:	72fb      	strb	r3, [r7, #11]
          break;
 800646a:	e021      	b.n	80064b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00b      	beq.n	8006490 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	7c12      	ldrb	r2, [r2, #16]
 8006484:	f107 0108 	add.w	r1, r7, #8
 8006488:	4610      	mov	r0, r2
 800648a:	4798      	blx	r3
 800648c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800648e:	e00f      	b.n	80064b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006490:	6839      	ldr	r1, [r7, #0]
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fa49 	bl	800692a <USBD_CtlError>
            err++;
 8006498:	7afb      	ldrb	r3, [r7, #11]
 800649a:	3301      	adds	r3, #1
 800649c:	72fb      	strb	r3, [r7, #11]
          break;
 800649e:	e007      	b.n	80064b0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80064a0:	6839      	ldr	r1, [r7, #0]
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fa41 	bl	800692a <USBD_CtlError>
          err++;
 80064a8:	7afb      	ldrb	r3, [r7, #11]
 80064aa:	3301      	adds	r3, #1
 80064ac:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80064ae:	bf00      	nop
      }
      break;
 80064b0:	e037      	b.n	8006522 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	7c1b      	ldrb	r3, [r3, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d109      	bne.n	80064ce <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064c2:	f107 0208 	add.w	r2, r7, #8
 80064c6:	4610      	mov	r0, r2
 80064c8:	4798      	blx	r3
 80064ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064cc:	e029      	b.n	8006522 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80064ce:	6839      	ldr	r1, [r7, #0]
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fa2a 	bl	800692a <USBD_CtlError>
        err++;
 80064d6:	7afb      	ldrb	r3, [r7, #11]
 80064d8:	3301      	adds	r3, #1
 80064da:	72fb      	strb	r3, [r7, #11]
      break;
 80064dc:	e021      	b.n	8006522 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	7c1b      	ldrb	r3, [r3, #16]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10d      	bne.n	8006502 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ee:	f107 0208 	add.w	r2, r7, #8
 80064f2:	4610      	mov	r0, r2
 80064f4:	4798      	blx	r3
 80064f6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	3301      	adds	r3, #1
 80064fc:	2207      	movs	r2, #7
 80064fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006500:	e00f      	b.n	8006522 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006502:	6839      	ldr	r1, [r7, #0]
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 fa10 	bl	800692a <USBD_CtlError>
        err++;
 800650a:	7afb      	ldrb	r3, [r7, #11]
 800650c:	3301      	adds	r3, #1
 800650e:	72fb      	strb	r3, [r7, #11]
      break;
 8006510:	e007      	b.n	8006522 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006512:	6839      	ldr	r1, [r7, #0]
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fa08 	bl	800692a <USBD_CtlError>
      err++;
 800651a:	7afb      	ldrb	r3, [r7, #11]
 800651c:	3301      	adds	r3, #1
 800651e:	72fb      	strb	r3, [r7, #11]
      break;
 8006520:	bf00      	nop
  }

  if (err != 0U)
 8006522:	7afb      	ldrb	r3, [r7, #11]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d11e      	bne.n	8006566 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	88db      	ldrh	r3, [r3, #6]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d016      	beq.n	800655e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006530:	893b      	ldrh	r3, [r7, #8]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00e      	beq.n	8006554 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	88da      	ldrh	r2, [r3, #6]
 800653a:	893b      	ldrh	r3, [r7, #8]
 800653c:	4293      	cmp	r3, r2
 800653e:	bf28      	it	cs
 8006540:	4613      	movcs	r3, r2
 8006542:	b29b      	uxth	r3, r3
 8006544:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006546:	893b      	ldrh	r3, [r7, #8]
 8006548:	461a      	mov	r2, r3
 800654a:	68f9      	ldr	r1, [r7, #12]
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fa5d 	bl	8006a0c <USBD_CtlSendData>
 8006552:	e009      	b.n	8006568 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006554:	6839      	ldr	r1, [r7, #0]
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f9e7 	bl	800692a <USBD_CtlError>
 800655c:	e004      	b.n	8006568 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 faae 	bl	8006ac0 <USBD_CtlSendStatus>
 8006564:	e000      	b.n	8006568 <USBD_GetDescriptor+0x320>
    return;
 8006566:	bf00      	nop
  }
}
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop

08006570 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	889b      	ldrh	r3, [r3, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d131      	bne.n	80065e6 <USBD_SetAddress+0x76>
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	88db      	ldrh	r3, [r3, #6]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d12d      	bne.n	80065e6 <USBD_SetAddress+0x76>
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	885b      	ldrh	r3, [r3, #2]
 800658e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006590:	d829      	bhi.n	80065e6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	885b      	ldrh	r3, [r3, #2]
 8006596:	b2db      	uxtb	r3, r3
 8006598:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800659c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	d104      	bne.n	80065b4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80065aa:	6839      	ldr	r1, [r7, #0]
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 f9bc 	bl	800692a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065b2:	e01d      	b.n	80065f0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	7bfa      	ldrb	r2, [r7, #15]
 80065b8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
 80065be:	4619      	mov	r1, r3
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 ff5d 	bl	8007480 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fa7a 	bl	8006ac0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80065cc:	7bfb      	ldrb	r3, [r7, #15]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d004      	beq.n	80065dc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2202      	movs	r2, #2
 80065d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065da:	e009      	b.n	80065f0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065e4:	e004      	b.n	80065f0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80065e6:	6839      	ldr	r1, [r7, #0]
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f99e 	bl	800692a <USBD_CtlError>
  }
}
 80065ee:	bf00      	nop
 80065f0:	bf00      	nop
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	885b      	ldrh	r3, [r3, #2]
 800660a:	b2da      	uxtb	r2, r3
 800660c:	4b4e      	ldr	r3, [pc, #312]	@ (8006748 <USBD_SetConfig+0x150>)
 800660e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006610:	4b4d      	ldr	r3, [pc, #308]	@ (8006748 <USBD_SetConfig+0x150>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d905      	bls.n	8006624 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006618:	6839      	ldr	r1, [r7, #0]
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f985 	bl	800692a <USBD_CtlError>
    return USBD_FAIL;
 8006620:	2303      	movs	r3, #3
 8006622:	e08c      	b.n	800673e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b02      	cmp	r3, #2
 800662e:	d002      	beq.n	8006636 <USBD_SetConfig+0x3e>
 8006630:	2b03      	cmp	r3, #3
 8006632:	d029      	beq.n	8006688 <USBD_SetConfig+0x90>
 8006634:	e075      	b.n	8006722 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006636:	4b44      	ldr	r3, [pc, #272]	@ (8006748 <USBD_SetConfig+0x150>)
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d020      	beq.n	8006680 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800663e:	4b42      	ldr	r3, [pc, #264]	@ (8006748 <USBD_SetConfig+0x150>)
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	461a      	mov	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006648:	4b3f      	ldr	r3, [pc, #252]	@ (8006748 <USBD_SetConfig+0x150>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	4619      	mov	r1, r3
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7fe ffb9 	bl	80055c6 <USBD_SetClassConfig>
 8006654:	4603      	mov	r3, r0
 8006656:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d008      	beq.n	8006670 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800665e:	6839      	ldr	r1, [r7, #0]
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f962 	bl	800692a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2202      	movs	r2, #2
 800666a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800666e:	e065      	b.n	800673c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fa25 	bl	8006ac0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2203      	movs	r2, #3
 800667a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800667e:	e05d      	b.n	800673c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fa1d 	bl	8006ac0 <USBD_CtlSendStatus>
      break;
 8006686:	e059      	b.n	800673c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006688:	4b2f      	ldr	r3, [pc, #188]	@ (8006748 <USBD_SetConfig+0x150>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d112      	bne.n	80066b6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006698:	4b2b      	ldr	r3, [pc, #172]	@ (8006748 <USBD_SetConfig+0x150>)
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	461a      	mov	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80066a2:	4b29      	ldr	r3, [pc, #164]	@ (8006748 <USBD_SetConfig+0x150>)
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	4619      	mov	r1, r3
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7fe ffa8 	bl	80055fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fa06 	bl	8006ac0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80066b4:	e042      	b.n	800673c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80066b6:	4b24      	ldr	r3, [pc, #144]	@ (8006748 <USBD_SetConfig+0x150>)
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	461a      	mov	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d02a      	beq.n	800671a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	4619      	mov	r1, r3
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f7fe ff96 	bl	80055fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80066d2:	4b1d      	ldr	r3, [pc, #116]	@ (8006748 <USBD_SetConfig+0x150>)
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	461a      	mov	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80066dc:	4b1a      	ldr	r3, [pc, #104]	@ (8006748 <USBD_SetConfig+0x150>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	4619      	mov	r1, r3
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7fe ff6f 	bl	80055c6 <USBD_SetClassConfig>
 80066e8:	4603      	mov	r3, r0
 80066ea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80066ec:	7bfb      	ldrb	r3, [r7, #15]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00f      	beq.n	8006712 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80066f2:	6839      	ldr	r1, [r7, #0]
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f918 	bl	800692a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7fe ff7b 	bl	80055fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2202      	movs	r2, #2
 800670c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006710:	e014      	b.n	800673c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f9d4 	bl	8006ac0 <USBD_CtlSendStatus>
      break;
 8006718:	e010      	b.n	800673c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f9d0 	bl	8006ac0 <USBD_CtlSendStatus>
      break;
 8006720:	e00c      	b.n	800673c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006722:	6839      	ldr	r1, [r7, #0]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f900 	bl	800692a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800672a:	4b07      	ldr	r3, [pc, #28]	@ (8006748 <USBD_SetConfig+0x150>)
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	4619      	mov	r1, r3
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7fe ff64 	bl	80055fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006736:	2303      	movs	r3, #3
 8006738:	73fb      	strb	r3, [r7, #15]
      break;
 800673a:	bf00      	nop
  }

  return ret;
 800673c:	7bfb      	ldrb	r3, [r7, #15]
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	200003e8 	.word	0x200003e8

0800674c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	88db      	ldrh	r3, [r3, #6]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d004      	beq.n	8006768 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800675e:	6839      	ldr	r1, [r7, #0]
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f8e2 	bl	800692a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006766:	e023      	b.n	80067b0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b02      	cmp	r3, #2
 8006772:	dc02      	bgt.n	800677a <USBD_GetConfig+0x2e>
 8006774:	2b00      	cmp	r3, #0
 8006776:	dc03      	bgt.n	8006780 <USBD_GetConfig+0x34>
 8006778:	e015      	b.n	80067a6 <USBD_GetConfig+0x5a>
 800677a:	2b03      	cmp	r3, #3
 800677c:	d00b      	beq.n	8006796 <USBD_GetConfig+0x4a>
 800677e:	e012      	b.n	80067a6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	3308      	adds	r3, #8
 800678a:	2201      	movs	r2, #1
 800678c:	4619      	mov	r1, r3
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 f93c 	bl	8006a0c <USBD_CtlSendData>
        break;
 8006794:	e00c      	b.n	80067b0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3304      	adds	r3, #4
 800679a:	2201      	movs	r2, #1
 800679c:	4619      	mov	r1, r3
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f934 	bl	8006a0c <USBD_CtlSendData>
        break;
 80067a4:	e004      	b.n	80067b0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80067a6:	6839      	ldr	r1, [r7, #0]
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f8be 	bl	800692a <USBD_CtlError>
        break;
 80067ae:	bf00      	nop
}
 80067b0:	bf00      	nop
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	3b01      	subs	r3, #1
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d81e      	bhi.n	800680e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	88db      	ldrh	r3, [r3, #6]
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d004      	beq.n	80067e2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80067d8:	6839      	ldr	r1, [r7, #0]
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f8a5 	bl	800692a <USBD_CtlError>
        break;
 80067e0:	e01a      	b.n	8006818 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2201      	movs	r2, #1
 80067e6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d005      	beq.n	80067fe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f043 0202 	orr.w	r2, r3, #2
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	330c      	adds	r3, #12
 8006802:	2202      	movs	r2, #2
 8006804:	4619      	mov	r1, r3
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f900 	bl	8006a0c <USBD_CtlSendData>
      break;
 800680c:	e004      	b.n	8006818 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f88a 	bl	800692a <USBD_CtlError>
      break;
 8006816:	bf00      	nop
  }
}
 8006818:	bf00      	nop
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	885b      	ldrh	r3, [r3, #2]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d107      	bne.n	8006842 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f940 	bl	8006ac0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006840:	e013      	b.n	800686a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	885b      	ldrh	r3, [r3, #2]
 8006846:	2b02      	cmp	r3, #2
 8006848:	d10b      	bne.n	8006862 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	889b      	ldrh	r3, [r3, #4]
 800684e:	0a1b      	lsrs	r3, r3, #8
 8006850:	b29b      	uxth	r3, r3
 8006852:	b2da      	uxtb	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f930 	bl	8006ac0 <USBD_CtlSendStatus>
}
 8006860:	e003      	b.n	800686a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006862:	6839      	ldr	r1, [r7, #0]
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 f860 	bl	800692a <USBD_CtlError>
}
 800686a:	bf00      	nop
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b082      	sub	sp, #8
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006882:	b2db      	uxtb	r3, r3
 8006884:	3b01      	subs	r3, #1
 8006886:	2b02      	cmp	r3, #2
 8006888:	d80b      	bhi.n	80068a2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	885b      	ldrh	r3, [r3, #2]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d10c      	bne.n	80068ac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f910 	bl	8006ac0 <USBD_CtlSendStatus>
      }
      break;
 80068a0:	e004      	b.n	80068ac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f840 	bl	800692a <USBD_CtlError>
      break;
 80068aa:	e000      	b.n	80068ae <USBD_ClrFeature+0x3c>
      break;
 80068ac:	bf00      	nop
  }
}
 80068ae:	bf00      	nop
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b084      	sub	sp, #16
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
 80068be:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	781a      	ldrb	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	3301      	adds	r3, #1
 80068d0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	781a      	ldrb	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	3301      	adds	r3, #1
 80068de:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f7ff fa16 	bl	8005d12 <SWAPBYTE>
 80068e6:	4603      	mov	r3, r0
 80068e8:	461a      	mov	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3301      	adds	r3, #1
 80068f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	3301      	adds	r3, #1
 80068f8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f7ff fa09 	bl	8005d12 <SWAPBYTE>
 8006900:	4603      	mov	r3, r0
 8006902:	461a      	mov	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	3301      	adds	r3, #1
 800690c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	3301      	adds	r3, #1
 8006912:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f7ff f9fc 	bl	8005d12 <SWAPBYTE>
 800691a:	4603      	mov	r3, r0
 800691c:	461a      	mov	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	80da      	strh	r2, [r3, #6]
}
 8006922:	bf00      	nop
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b082      	sub	sp, #8
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006934:	2180      	movs	r1, #128	@ 0x80
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fd38 	bl	80073ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800693c:	2100      	movs	r1, #0
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fd34 	bl	80073ac <USBD_LL_StallEP>
}
 8006944:	bf00      	nop
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006958:	2300      	movs	r3, #0
 800695a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d036      	beq.n	80069d0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006966:	6938      	ldr	r0, [r7, #16]
 8006968:	f000 f836 	bl	80069d8 <USBD_GetLen>
 800696c:	4603      	mov	r3, r0
 800696e:	3301      	adds	r3, #1
 8006970:	b29b      	uxth	r3, r3
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	b29a      	uxth	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800697a:	7dfb      	ldrb	r3, [r7, #23]
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	4413      	add	r3, r2
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	7812      	ldrb	r2, [r2, #0]
 8006984:	701a      	strb	r2, [r3, #0]
  idx++;
 8006986:	7dfb      	ldrb	r3, [r7, #23]
 8006988:	3301      	adds	r3, #1
 800698a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800698c:	7dfb      	ldrb	r3, [r7, #23]
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	4413      	add	r3, r2
 8006992:	2203      	movs	r2, #3
 8006994:	701a      	strb	r2, [r3, #0]
  idx++;
 8006996:	7dfb      	ldrb	r3, [r7, #23]
 8006998:	3301      	adds	r3, #1
 800699a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800699c:	e013      	b.n	80069c6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800699e:	7dfb      	ldrb	r3, [r7, #23]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	4413      	add	r3, r2
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	7812      	ldrb	r2, [r2, #0]
 80069a8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	3301      	adds	r3, #1
 80069ae:	613b      	str	r3, [r7, #16]
    idx++;
 80069b0:	7dfb      	ldrb	r3, [r7, #23]
 80069b2:	3301      	adds	r3, #1
 80069b4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80069b6:	7dfb      	ldrb	r3, [r7, #23]
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	4413      	add	r3, r2
 80069bc:	2200      	movs	r2, #0
 80069be:	701a      	strb	r2, [r3, #0]
    idx++;
 80069c0:	7dfb      	ldrb	r3, [r7, #23]
 80069c2:	3301      	adds	r3, #1
 80069c4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1e7      	bne.n	800699e <USBD_GetString+0x52>
 80069ce:	e000      	b.n	80069d2 <USBD_GetString+0x86>
    return;
 80069d0:	bf00      	nop
  }
}
 80069d2:	3718      	adds	r7, #24
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80069e8:	e005      	b.n	80069f6 <USBD_GetLen+0x1e>
  {
    len++;
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
 80069ec:	3301      	adds	r3, #1
 80069ee:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	3301      	adds	r3, #1
 80069f4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1f5      	bne.n	80069ea <USBD_GetLen+0x12>
  }

  return len;
 80069fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	2100      	movs	r1, #0
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f000 fd43 	bl	80074be <USBD_LL_Transmit>

  return USBD_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b084      	sub	sp, #16
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	60f8      	str	r0, [r7, #12]
 8006a4a:	60b9      	str	r1, [r7, #8]
 8006a4c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	2100      	movs	r1, #0
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f000 fd32 	bl	80074be <USBD_LL_Transmit>

  return USBD_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2203      	movs	r2, #3
 8006a74:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f000 fd36 	bl	8007500 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b084      	sub	sp, #16
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	60f8      	str	r0, [r7, #12]
 8006aa6:	60b9      	str	r1, [r7, #8]
 8006aa8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	2100      	movs	r1, #0
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 fd25 	bl	8007500 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2204      	movs	r2, #4
 8006acc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 fcf1 	bl	80074be <USBD_LL_Transmit>

  return USBD_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3708      	adds	r7, #8
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b082      	sub	sp, #8
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2205      	movs	r2, #5
 8006af2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006af6:	2300      	movs	r3, #0
 8006af8:	2200      	movs	r2, #0
 8006afa:	2100      	movs	r1, #0
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fcff 	bl	8007500 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <touchscreen_init>:
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */

void touchscreen_init(void)
{
 8006b0c:	b490      	push	{r4, r7}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
	touchReport.report_ID = REPORTID_TOUCH;
 8006b12:	4b11      	ldr	r3, [pc, #68]	@ (8006b58 <touchscreen_init+0x4c>)
 8006b14:	2201      	movs	r2, #1
 8006b16:	701a      	strb	r2, [r3, #0]
	Contact contacts[2] = {contact_0, contact_1};
 8006b18:	4a10      	ldr	r2, [pc, #64]	@ (8006b5c <touchscreen_init+0x50>)
 8006b1a:	1d3b      	adds	r3, r7, #4
 8006b1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b20:	6018      	str	r0, [r3, #0]
 8006b22:	3304      	adds	r3, #4
 8006b24:	8019      	strh	r1, [r3, #0]
 8006b26:	4a0e      	ldr	r2, [pc, #56]	@ (8006b60 <touchscreen_init+0x54>)
 8006b28:	f107 030a 	add.w	r3, r7, #10
 8006b2c:	6810      	ldr	r0, [r2, #0]
 8006b2e:	6018      	str	r0, [r3, #0]
 8006b30:	8892      	ldrh	r2, [r2, #4]
 8006b32:	809a      	strh	r2, [r3, #4]
	memcpy(touchReport.contacts, contacts, sizeof(contacts));
 8006b34:	4b08      	ldr	r3, [pc, #32]	@ (8006b58 <touchscreen_init+0x4c>)
 8006b36:	1c5c      	adds	r4, r3, #1
 8006b38:	1d3b      	adds	r3, r7, #4
 8006b3a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006b3c:	6020      	str	r0, [r4, #0]
 8006b3e:	6061      	str	r1, [r4, #4]
 8006b40:	60a2      	str	r2, [r4, #8]
	touchReport.contacts[0].contact_ID = 0;
 8006b42:	4b05      	ldr	r3, [pc, #20]	@ (8006b58 <touchscreen_init+0x4c>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	709a      	strb	r2, [r3, #2]
	touchReport.contacts[1].contact_ID = 1;
 8006b48:	4b03      	ldr	r3, [pc, #12]	@ (8006b58 <touchscreen_init+0x4c>)
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	721a      	strb	r2, [r3, #8]
}
 8006b4e:	bf00      	nop
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bc90      	pop	{r4, r7}
 8006b56:	4770      	bx	lr
 8006b58:	200003fc 	.word	0x200003fc
 8006b5c:	200003ec 	.word	0x200003ec
 8006b60:	200003f4 	.word	0x200003f4

08006b64 <touchscreen_set>:

int touchscreen_set(uint8_t ID, uint16_t x, uint16_t y)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	71fb      	strb	r3, [r7, #7]
 8006b6e:	460b      	mov	r3, r1
 8006b70:	80bb      	strh	r3, [r7, #4]
 8006b72:	4613      	mov	r3, r2
 8006b74:	807b      	strh	r3, [r7, #2]
	if ((ID >= TOUCHSCREEN_MAX_CONTACTS) || (x > TOUCHSCREEN_WIDTH) || (y > TOUCHSCREEN_HEIGHT))
 8006b76:	79fb      	ldrb	r3, [r7, #7]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d807      	bhi.n	8006b8c <touchscreen_set+0x28>
 8006b7c:	88bb      	ldrh	r3, [r7, #4]
 8006b7e:	f5b3 6ff0 	cmp.w	r3, #1920	@ 0x780
 8006b82:	d803      	bhi.n	8006b8c <touchscreen_set+0x28>
 8006b84:	887b      	ldrh	r3, [r7, #2]
 8006b86:	f5b3 6f87 	cmp.w	r3, #1080	@ 0x438
 8006b8a:	d901      	bls.n	8006b90 <touchscreen_set+0x2c>
	{
		return TOUCHSCREEN_FAILURE;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	e022      	b.n	8006bd6 <touchscreen_set+0x72>
	}
	touchReport.contacts[ID].tip_switch = 1;
 8006b90:	79fa      	ldrb	r2, [r7, #7]
 8006b92:	4914      	ldr	r1, [pc, #80]	@ (8006be4 <touchscreen_set+0x80>)
 8006b94:	4613      	mov	r3, r2
 8006b96:	005b      	lsls	r3, r3, #1
 8006b98:	4413      	add	r3, r2
 8006b9a:	005b      	lsls	r3, r3, #1
 8006b9c:	440b      	add	r3, r1
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	701a      	strb	r2, [r3, #0]
	contacts_counted[ID] = 1;
 8006ba4:	79fb      	ldrb	r3, [r7, #7]
 8006ba6:	4a10      	ldr	r2, [pc, #64]	@ (8006be8 <touchscreen_set+0x84>)
 8006ba8:	2101      	movs	r1, #1
 8006baa:	54d1      	strb	r1, [r2, r3]
	touchReport.contacts[ID].x = x;
 8006bac:	79fa      	ldrb	r2, [r7, #7]
 8006bae:	490d      	ldr	r1, [pc, #52]	@ (8006be4 <touchscreen_set+0x80>)
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	4413      	add	r3, r2
 8006bb6:	005b      	lsls	r3, r3, #1
 8006bb8:	440b      	add	r3, r1
 8006bba:	88ba      	ldrh	r2, [r7, #4]
 8006bbc:	f8a3 2003 	strh.w	r2, [r3, #3]
	touchReport.contacts[ID].y = y;
 8006bc0:	79fa      	ldrb	r2, [r7, #7]
 8006bc2:	4908      	ldr	r1, [pc, #32]	@ (8006be4 <touchscreen_set+0x80>)
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	4413      	add	r3, r2
 8006bca:	005b      	lsls	r3, r3, #1
 8006bcc:	440b      	add	r3, r1
 8006bce:	887a      	ldrh	r2, [r7, #2]
 8006bd0:	f8a3 2005 	strh.w	r2, [r3, #5]
	return TOUCHSCREEN_SUCCESS;
 8006bd4:	2301      	movs	r3, #1
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	200003fc 	.word	0x200003fc
 8006be8:	2000040c 	.word	0x2000040c

08006bec <touchscreen_reset>:

int touchscreen_reset(uint8_t ID)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	71fb      	strb	r3, [r7, #7]
	if (ID >= TOUCHSCREEN_MAX_CONTACTS)
 8006bf6:	79fb      	ldrb	r3, [r7, #7]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d901      	bls.n	8006c00 <touchscreen_reset+0x14>
	{
		return TOUCHSCREEN_FAILURE;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	e00a      	b.n	8006c16 <touchscreen_reset+0x2a>
	}
	touchReport.contacts[ID].tip_switch = 0;
 8006c00:	79fa      	ldrb	r2, [r7, #7]
 8006c02:	4908      	ldr	r1, [pc, #32]	@ (8006c24 <touchscreen_reset+0x38>)
 8006c04:	4613      	mov	r3, r2
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	4413      	add	r3, r2
 8006c0a:	005b      	lsls	r3, r3, #1
 8006c0c:	440b      	add	r3, r1
 8006c0e:	3301      	adds	r3, #1
 8006c10:	2200      	movs	r2, #0
 8006c12:	701a      	strb	r2, [r3, #0]
	return TOUCHSCREEN_SUCCESS;
 8006c14:	2301      	movs	r3, #1
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	200003fc 	.word	0x200003fc

08006c28 <touchscreen_update>:

void touchscreen_update(uint16_t scan_time)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	4603      	mov	r3, r0
 8006c30:	80fb      	strh	r3, [r7, #6]
	int contact_count = 0;
 8006c32:	2300      	movs	r3, #0
 8006c34:	60fb      	str	r3, [r7, #12]
	for (int ID = 0; ID < TOUCHSCREEN_MAX_CONTACTS; ID++)
 8006c36:	2300      	movs	r3, #0
 8006c38:	60bb      	str	r3, [r7, #8]
 8006c3a:	e01b      	b.n	8006c74 <touchscreen_update+0x4c>
	{
		if (contacts_counted[ID])
 8006c3c:	4a17      	ldr	r2, [pc, #92]	@ (8006c9c <touchscreen_update+0x74>)
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	4413      	add	r3, r2
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d002      	beq.n	8006c4e <touchscreen_update+0x26>
		{
			contact_count++;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	60fb      	str	r3, [r7, #12]
		}
		if (touchReport.contacts[ID].tip_switch == 0)
 8006c4e:	4914      	ldr	r1, [pc, #80]	@ (8006ca0 <touchscreen_update+0x78>)
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	4613      	mov	r3, r2
 8006c54:	005b      	lsls	r3, r3, #1
 8006c56:	4413      	add	r3, r2
 8006c58:	005b      	lsls	r3, r3, #1
 8006c5a:	440b      	add	r3, r1
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d104      	bne.n	8006c6e <touchscreen_update+0x46>
		{
			contacts_counted[ID] = 0;
 8006c64:	4a0d      	ldr	r2, [pc, #52]	@ (8006c9c <touchscreen_update+0x74>)
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	4413      	add	r3, r2
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	701a      	strb	r2, [r3, #0]
	for (int ID = 0; ID < TOUCHSCREEN_MAX_CONTACTS; ID++)
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	3301      	adds	r3, #1
 8006c72:	60bb      	str	r3, [r7, #8]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	dde0      	ble.n	8006c3c <touchscreen_update+0x14>
		}
	}
	touchReport.contact_count = contact_count;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	b2da      	uxtb	r2, r3
 8006c7e:	4b08      	ldr	r3, [pc, #32]	@ (8006ca0 <touchscreen_update+0x78>)
 8006c80:	73da      	strb	r2, [r3, #15]
	touchReport.scan_time = scan_time;
 8006c82:	4b07      	ldr	r3, [pc, #28]	@ (8006ca0 <touchscreen_update+0x78>)
 8006c84:	88fa      	ldrh	r2, [r7, #6]
 8006c86:	f8a3 200d 	strh.w	r2, [r3, #13]
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t *) &touchReport, sizeof (touchReport));
 8006c8a:	2210      	movs	r2, #16
 8006c8c:	4904      	ldr	r1, [pc, #16]	@ (8006ca0 <touchscreen_update+0x78>)
 8006c8e:	4805      	ldr	r0, [pc, #20]	@ (8006ca4 <touchscreen_update+0x7c>)
 8006c90:	f7fe fa94 	bl	80051bc <USBD_CUSTOM_HID_SendReport>
}
 8006c94:	bf00      	nop
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	2000040c 	.word	0x2000040c
 8006ca0:	200003fc 	.word	0x200003fc
 8006ca4:	20000410 	.word	0x20000410

08006ca8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006cac:	2200      	movs	r2, #0
 8006cae:	4912      	ldr	r1, [pc, #72]	@ (8006cf8 <MX_USB_DEVICE_Init+0x50>)
 8006cb0:	4812      	ldr	r0, [pc, #72]	@ (8006cfc <MX_USB_DEVICE_Init+0x54>)
 8006cb2:	f7fe fc0b 	bl	80054cc <USBD_Init>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d001      	beq.n	8006cc0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006cbc:	f7f9 fd60 	bl	8000780 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8006cc0:	490f      	ldr	r1, [pc, #60]	@ (8006d00 <MX_USB_DEVICE_Init+0x58>)
 8006cc2:	480e      	ldr	r0, [pc, #56]	@ (8006cfc <MX_USB_DEVICE_Init+0x54>)
 8006cc4:	f7fe fc32 	bl	800552c <USBD_RegisterClass>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006cce:	f7f9 fd57 	bl	8000780 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8006cd2:	490c      	ldr	r1, [pc, #48]	@ (8006d04 <MX_USB_DEVICE_Init+0x5c>)
 8006cd4:	4809      	ldr	r0, [pc, #36]	@ (8006cfc <MX_USB_DEVICE_Init+0x54>)
 8006cd6:	f7fe fbdf 	bl	8005498 <USBD_CUSTOM_HID_RegisterInterface>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006ce0:	f7f9 fd4e 	bl	8000780 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006ce4:	4805      	ldr	r0, [pc, #20]	@ (8006cfc <MX_USB_DEVICE_Init+0x54>)
 8006ce6:	f7fe fc57 	bl	8005598 <USBD_Start>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006cf0:	f7f9 fd46 	bl	8000780 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006cf4:	bf00      	nop
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	20000368 	.word	0x20000368
 8006cfc:	20000410 	.word	0x20000410
 8006d00:	20000214 	.word	0x20000214
 8006d04:	20000358 	.word	0x20000358

08006d08 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006d0c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8006d1c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	4603      	mov	r3, r0
 8006d30:	460a      	mov	r2, r1
 8006d32:	71fb      	strb	r3, [r7, #7]
 8006d34:	4613      	mov	r3, r2
 8006d36:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8006d38:	4806      	ldr	r0, [pc, #24]	@ (8006d54 <CUSTOM_HID_OutEvent_FS+0x2c>)
 8006d3a:	f7fe fb4b 	bl	80053d4 <USBD_CUSTOM_HID_ReceivePacket>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d002      	beq.n	8006d4a <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 8006d44:	f04f 33ff 	mov.w	r3, #4294967295
 8006d48:	e000      	b.n	8006d4c <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 8006d4a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	20000410 	.word	0x20000410

08006d58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	6039      	str	r1, [r7, #0]
 8006d62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	2212      	movs	r2, #18
 8006d68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006d6a:	4b03      	ldr	r3, [pc, #12]	@ (8006d78 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	20000388 	.word	0x20000388

08006d7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	4603      	mov	r3, r0
 8006d84:	6039      	str	r1, [r7, #0]
 8006d86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	2204      	movs	r2, #4
 8006d8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006d8e:	4b03      	ldr	r3, [pc, #12]	@ (8006d9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr
 8006d9c:	200003a8 	.word	0x200003a8

08006da0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	4603      	mov	r3, r0
 8006da8:	6039      	str	r1, [r7, #0]
 8006daa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006dac:	79fb      	ldrb	r3, [r7, #7]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d105      	bne.n	8006dbe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	4907      	ldr	r1, [pc, #28]	@ (8006dd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006db6:	4808      	ldr	r0, [pc, #32]	@ (8006dd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006db8:	f7ff fdc8 	bl	800694c <USBD_GetString>
 8006dbc:	e004      	b.n	8006dc8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	4904      	ldr	r1, [pc, #16]	@ (8006dd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006dc2:	4805      	ldr	r0, [pc, #20]	@ (8006dd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006dc4:	f7ff fdc2 	bl	800694c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006dc8:	4b02      	ldr	r3, [pc, #8]	@ (8006dd4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	200006ec 	.word	0x200006ec
 8006dd8:	080076d8 	.word	0x080076d8

08006ddc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	4603      	mov	r3, r0
 8006de4:	6039      	str	r1, [r7, #0]
 8006de6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	4904      	ldr	r1, [pc, #16]	@ (8006dfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006dec:	4804      	ldr	r0, [pc, #16]	@ (8006e00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006dee:	f7ff fdad 	bl	800694c <USBD_GetString>
  return USBD_StrDesc;
 8006df2:	4b02      	ldr	r3, [pc, #8]	@ (8006dfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3708      	adds	r7, #8
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	200006ec 	.word	0x200006ec
 8006e00:	080076f8 	.word	0x080076f8

08006e04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	6039      	str	r1, [r7, #0]
 8006e0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	221a      	movs	r2, #26
 8006e14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006e16:	f000 f855 	bl	8006ec4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006e1a:	4b02      	ldr	r3, [pc, #8]	@ (8006e24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3708      	adds	r7, #8
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	200003ac 	.word	0x200003ac

08006e28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	4603      	mov	r3, r0
 8006e30:	6039      	str	r1, [r7, #0]
 8006e32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006e34:	79fb      	ldrb	r3, [r7, #7]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d105      	bne.n	8006e46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	4907      	ldr	r1, [pc, #28]	@ (8006e5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e3e:	4808      	ldr	r0, [pc, #32]	@ (8006e60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e40:	f7ff fd84 	bl	800694c <USBD_GetString>
 8006e44:	e004      	b.n	8006e50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	4904      	ldr	r1, [pc, #16]	@ (8006e5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e4a:	4805      	ldr	r0, [pc, #20]	@ (8006e60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e4c:	f7ff fd7e 	bl	800694c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e50:	4b02      	ldr	r3, [pc, #8]	@ (8006e5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	200006ec 	.word	0x200006ec
 8006e60:	0800770c 	.word	0x0800770c

08006e64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	6039      	str	r1, [r7, #0]
 8006e6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e70:	79fb      	ldrb	r3, [r7, #7]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d105      	bne.n	8006e82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e76:	683a      	ldr	r2, [r7, #0]
 8006e78:	4907      	ldr	r1, [pc, #28]	@ (8006e98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e7a:	4808      	ldr	r0, [pc, #32]	@ (8006e9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e7c:	f7ff fd66 	bl	800694c <USBD_GetString>
 8006e80:	e004      	b.n	8006e8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	4904      	ldr	r1, [pc, #16]	@ (8006e98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e86:	4805      	ldr	r0, [pc, #20]	@ (8006e9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e88:	f7ff fd60 	bl	800694c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e8c:	4b02      	ldr	r3, [pc, #8]	@ (8006e98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	200006ec 	.word	0x200006ec
 8006e9c:	08007720 	.word	0x08007720

08006ea0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	6039      	str	r1, [r7, #0]
 8006eaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	220c      	movs	r2, #12
 8006eb0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8006eb2:	4b03      	ldr	r3, [pc, #12]	@ (8006ec0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	2000039c 	.word	0x2000039c

08006ec4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006eca:	4b0f      	ldr	r3, [pc, #60]	@ (8006f08 <Get_SerialNum+0x44>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8006f0c <Get_SerialNum+0x48>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8006f10 <Get_SerialNum+0x4c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d009      	beq.n	8006efe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006eea:	2208      	movs	r2, #8
 8006eec:	4909      	ldr	r1, [pc, #36]	@ (8006f14 <Get_SerialNum+0x50>)
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 f814 	bl	8006f1c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006ef4:	2204      	movs	r2, #4
 8006ef6:	4908      	ldr	r1, [pc, #32]	@ (8006f18 <Get_SerialNum+0x54>)
 8006ef8:	68b8      	ldr	r0, [r7, #8]
 8006efa:	f000 f80f 	bl	8006f1c <IntToUnicode>
  }
}
 8006efe:	bf00      	nop
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	1fff7a10 	.word	0x1fff7a10
 8006f0c:	1fff7a14 	.word	0x1fff7a14
 8006f10:	1fff7a18 	.word	0x1fff7a18
 8006f14:	200003ae 	.word	0x200003ae
 8006f18:	200003be 	.word	0x200003be

08006f1c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	4613      	mov	r3, r2
 8006f28:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006f2e:	2300      	movs	r3, #0
 8006f30:	75fb      	strb	r3, [r7, #23]
 8006f32:	e027      	b.n	8006f84 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	0f1b      	lsrs	r3, r3, #28
 8006f38:	2b09      	cmp	r3, #9
 8006f3a:	d80b      	bhi.n	8006f54 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	0f1b      	lsrs	r3, r3, #28
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	7dfb      	ldrb	r3, [r7, #23]
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	4619      	mov	r1, r3
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	440b      	add	r3, r1
 8006f4c:	3230      	adds	r2, #48	@ 0x30
 8006f4e:	b2d2      	uxtb	r2, r2
 8006f50:	701a      	strb	r2, [r3, #0]
 8006f52:	e00a      	b.n	8006f6a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	0f1b      	lsrs	r3, r3, #28
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
 8006f5c:	005b      	lsls	r3, r3, #1
 8006f5e:	4619      	mov	r1, r3
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	440b      	add	r3, r1
 8006f64:	3237      	adds	r2, #55	@ 0x37
 8006f66:	b2d2      	uxtb	r2, r2
 8006f68:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006f70:	7dfb      	ldrb	r3, [r7, #23]
 8006f72:	005b      	lsls	r3, r3, #1
 8006f74:	3301      	adds	r3, #1
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	4413      	add	r3, r2
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006f7e:	7dfb      	ldrb	r3, [r7, #23]
 8006f80:	3301      	adds	r3, #1
 8006f82:	75fb      	strb	r3, [r7, #23]
 8006f84:	7dfa      	ldrb	r2, [r7, #23]
 8006f86:	79fb      	ldrb	r3, [r7, #7]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d3d3      	bcc.n	8006f34 <IntToUnicode+0x18>
  }
}
 8006f8c:	bf00      	nop
 8006f8e:	bf00      	nop
 8006f90:	371c      	adds	r7, #28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
	...

08006f9c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b0a0      	sub	sp, #128	@ 0x80
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fa4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8006fa8:	2200      	movs	r2, #0
 8006faa:	601a      	str	r2, [r3, #0]
 8006fac:	605a      	str	r2, [r3, #4]
 8006fae:	609a      	str	r2, [r3, #8]
 8006fb0:	60da      	str	r2, [r3, #12]
 8006fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006fb4:	f107 0310 	add.w	r3, r7, #16
 8006fb8:	225c      	movs	r2, #92	@ 0x5c
 8006fba:	2100      	movs	r1, #0
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f000 fb53 	bl	8007668 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fca:	d149      	bne.n	8007060 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8006fcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006fd0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006fd6:	f107 0310 	add.w	r3, r7, #16
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fb fb58 	bl	8002690 <HAL_RCCEx_PeriphCLKConfig>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d001      	beq.n	8006fea <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8006fe6:	f7f9 fbcb 	bl	8000780 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fea:	2300      	movs	r3, #0
 8006fec:	60fb      	str	r3, [r7, #12]
 8006fee:	4b1e      	ldr	r3, [pc, #120]	@ (8007068 <HAL_PCD_MspInit+0xcc>)
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff2:	4a1d      	ldr	r2, [pc, #116]	@ (8007068 <HAL_PCD_MspInit+0xcc>)
 8006ff4:	f043 0301 	orr.w	r3, r3, #1
 8006ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8007068 <HAL_PCD_MspInit+0xcc>)
 8006ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007006:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800700a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800700c:	2302      	movs	r3, #2
 800700e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007010:	2300      	movs	r3, #0
 8007012:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007014:	2303      	movs	r3, #3
 8007016:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007018:	230a      	movs	r3, #10
 800701a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800701c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007020:	4619      	mov	r1, r3
 8007022:	4812      	ldr	r0, [pc, #72]	@ (800706c <HAL_PCD_MspInit+0xd0>)
 8007024:	f7f9 fdf8 	bl	8000c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007028:	4b0f      	ldr	r3, [pc, #60]	@ (8007068 <HAL_PCD_MspInit+0xcc>)
 800702a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800702c:	4a0e      	ldr	r2, [pc, #56]	@ (8007068 <HAL_PCD_MspInit+0xcc>)
 800702e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007032:	6353      	str	r3, [r2, #52]	@ 0x34
 8007034:	2300      	movs	r3, #0
 8007036:	60bb      	str	r3, [r7, #8]
 8007038:	4b0b      	ldr	r3, [pc, #44]	@ (8007068 <HAL_PCD_MspInit+0xcc>)
 800703a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800703c:	4a0a      	ldr	r2, [pc, #40]	@ (8007068 <HAL_PCD_MspInit+0xcc>)
 800703e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007042:	6453      	str	r3, [r2, #68]	@ 0x44
 8007044:	4b08      	ldr	r3, [pc, #32]	@ (8007068 <HAL_PCD_MspInit+0xcc>)
 8007046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007048:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800704c:	60bb      	str	r3, [r7, #8]
 800704e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007050:	2200      	movs	r2, #0
 8007052:	2100      	movs	r1, #0
 8007054:	2043      	movs	r0, #67	@ 0x43
 8007056:	f7f9 fda8 	bl	8000baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800705a:	2043      	movs	r0, #67	@ 0x43
 800705c:	f7f9 fdc1 	bl	8000be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007060:	bf00      	nop
 8007062:	3780      	adds	r7, #128	@ 0x80
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	40023800 	.word	0x40023800
 800706c:	40020000 	.word	0x40020000

08007070 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007084:	4619      	mov	r1, r3
 8007086:	4610      	mov	r0, r2
 8007088:	f7fe fad3 	bl	8005632 <USBD_LL_SetupStage>
}
 800708c:	bf00      	nop
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	460b      	mov	r3, r1
 800709e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80070a6:	78fa      	ldrb	r2, [r7, #3]
 80070a8:	6879      	ldr	r1, [r7, #4]
 80070aa:	4613      	mov	r3, r2
 80070ac:	00db      	lsls	r3, r3, #3
 80070ae:	4413      	add	r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	440b      	add	r3, r1
 80070b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	78fb      	ldrb	r3, [r7, #3]
 80070bc:	4619      	mov	r1, r3
 80070be:	f7fe fb0d 	bl	80056dc <USBD_LL_DataOutStage>
}
 80070c2:	bf00      	nop
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b082      	sub	sp, #8
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	460b      	mov	r3, r1
 80070d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80070dc:	78fa      	ldrb	r2, [r7, #3]
 80070de:	6879      	ldr	r1, [r7, #4]
 80070e0:	4613      	mov	r3, r2
 80070e2:	00db      	lsls	r3, r3, #3
 80070e4:	4413      	add	r3, r2
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	440b      	add	r3, r1
 80070ea:	3320      	adds	r3, #32
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	78fb      	ldrb	r3, [r7, #3]
 80070f0:	4619      	mov	r1, r3
 80070f2:	f7fe fba6 	bl	8005842 <USBD_LL_DataInStage>
}
 80070f6:	bf00      	nop
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b082      	sub	sp, #8
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800710c:	4618      	mov	r0, r3
 800710e:	f7fe fce0 	bl	8005ad2 <USBD_LL_SOF>
}
 8007112:	bf00      	nop
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b084      	sub	sp, #16
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007122:	2301      	movs	r3, #1
 8007124:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	79db      	ldrb	r3, [r3, #7]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d102      	bne.n	8007134 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800712e:	2300      	movs	r3, #0
 8007130:	73fb      	strb	r3, [r7, #15]
 8007132:	e008      	b.n	8007146 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	79db      	ldrb	r3, [r3, #7]
 8007138:	2b02      	cmp	r3, #2
 800713a:	d102      	bne.n	8007142 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800713c:	2301      	movs	r3, #1
 800713e:	73fb      	strb	r3, [r7, #15]
 8007140:	e001      	b.n	8007146 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007142:	f7f9 fb1d 	bl	8000780 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800714c:	7bfa      	ldrb	r2, [r7, #15]
 800714e:	4611      	mov	r1, r2
 8007150:	4618      	mov	r0, r3
 8007152:	f7fe fc7a 	bl	8005a4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800715c:	4618      	mov	r0, r3
 800715e:	f7fe fc22 	bl	80059a6 <USBD_LL_Reset>
}
 8007162:	bf00      	nop
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800717a:	4618      	mov	r0, r3
 800717c:	f7fe fc75 	bl	8005a6a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	6812      	ldr	r2, [r2, #0]
 800718e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007192:	f043 0301 	orr.w	r3, r3, #1
 8007196:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	7adb      	ldrb	r3, [r3, #11]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d005      	beq.n	80071ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80071a0:	4b04      	ldr	r3, [pc, #16]	@ (80071b4 <HAL_PCD_SuspendCallback+0x48>)
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	4a03      	ldr	r2, [pc, #12]	@ (80071b4 <HAL_PCD_SuspendCallback+0x48>)
 80071a6:	f043 0306 	orr.w	r3, r3, #6
 80071aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80071ac:	bf00      	nop
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	e000ed00 	.word	0xe000ed00

080071b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fe fc6b 	bl	8005aa2 <USBD_LL_Resume>
}
 80071cc:	bf00      	nop
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	460b      	mov	r3, r1
 80071de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071e6:	78fa      	ldrb	r2, [r7, #3]
 80071e8:	4611      	mov	r1, r2
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fe fcc3 	bl	8005b76 <USBD_LL_IsoOUTIncomplete>
}
 80071f0:	bf00      	nop
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	460b      	mov	r3, r1
 8007202:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800720a:	78fa      	ldrb	r2, [r7, #3]
 800720c:	4611      	mov	r1, r2
 800720e:	4618      	mov	r0, r3
 8007210:	f7fe fc7f 	bl	8005b12 <USBD_LL_IsoINIncomplete>
}
 8007214:	bf00      	nop
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800722a:	4618      	mov	r0, r3
 800722c:	f7fe fcd5 	bl	8005bda <USBD_LL_DevConnected>
}
 8007230:	bf00      	nop
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007246:	4618      	mov	r0, r3
 8007248:	f7fe fcd2 	bl	8005bf0 <USBD_LL_DevDisconnected>
}
 800724c:	bf00      	nop
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d13c      	bne.n	80072de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007264:	4a20      	ldr	r2, [pc, #128]	@ (80072e8 <USBD_LL_Init+0x94>)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a1e      	ldr	r2, [pc, #120]	@ (80072e8 <USBD_LL_Init+0x94>)
 8007270:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007274:	4b1c      	ldr	r3, [pc, #112]	@ (80072e8 <USBD_LL_Init+0x94>)
 8007276:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800727a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800727c:	4b1a      	ldr	r3, [pc, #104]	@ (80072e8 <USBD_LL_Init+0x94>)
 800727e:	2206      	movs	r2, #6
 8007280:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007282:	4b19      	ldr	r3, [pc, #100]	@ (80072e8 <USBD_LL_Init+0x94>)
 8007284:	2202      	movs	r2, #2
 8007286:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007288:	4b17      	ldr	r3, [pc, #92]	@ (80072e8 <USBD_LL_Init+0x94>)
 800728a:	2200      	movs	r2, #0
 800728c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800728e:	4b16      	ldr	r3, [pc, #88]	@ (80072e8 <USBD_LL_Init+0x94>)
 8007290:	2202      	movs	r2, #2
 8007292:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007294:	4b14      	ldr	r3, [pc, #80]	@ (80072e8 <USBD_LL_Init+0x94>)
 8007296:	2200      	movs	r2, #0
 8007298:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800729a:	4b13      	ldr	r3, [pc, #76]	@ (80072e8 <USBD_LL_Init+0x94>)
 800729c:	2200      	movs	r2, #0
 800729e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80072a0:	4b11      	ldr	r3, [pc, #68]	@ (80072e8 <USBD_LL_Init+0x94>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80072a6:	4b10      	ldr	r3, [pc, #64]	@ (80072e8 <USBD_LL_Init+0x94>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80072ac:	4b0e      	ldr	r3, [pc, #56]	@ (80072e8 <USBD_LL_Init+0x94>)
 80072ae:	2200      	movs	r2, #0
 80072b0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80072b2:	480d      	ldr	r0, [pc, #52]	@ (80072e8 <USBD_LL_Init+0x94>)
 80072b4:	f7f9 fe75 	bl	8000fa2 <HAL_PCD_Init>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d001      	beq.n	80072c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80072be:	f7f9 fa5f 	bl	8000780 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80072c2:	2180      	movs	r1, #128	@ 0x80
 80072c4:	4808      	ldr	r0, [pc, #32]	@ (80072e8 <USBD_LL_Init+0x94>)
 80072c6:	f7fb f8bc 	bl	8002442 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80072ca:	2240      	movs	r2, #64	@ 0x40
 80072cc:	2100      	movs	r1, #0
 80072ce:	4806      	ldr	r0, [pc, #24]	@ (80072e8 <USBD_LL_Init+0x94>)
 80072d0:	f7fb f870 	bl	80023b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80072d4:	2280      	movs	r2, #128	@ 0x80
 80072d6:	2101      	movs	r1, #1
 80072d8:	4803      	ldr	r0, [pc, #12]	@ (80072e8 <USBD_LL_Init+0x94>)
 80072da:	f7fb f86b 	bl	80023b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	200008ec 	.word	0x200008ec

080072ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072f8:	2300      	movs	r3, #0
 80072fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007302:	4618      	mov	r0, r3
 8007304:	f7f9 ff63 	bl	80011ce <HAL_PCD_Start>
 8007308:	4603      	mov	r3, r0
 800730a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800730c:	7bfb      	ldrb	r3, [r7, #15]
 800730e:	4618      	mov	r0, r3
 8007310:	f000 f97e 	bl	8007610 <USBD_Get_USB_Status>
 8007314:	4603      	mov	r3, r0
 8007316:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007318:	7bbb      	ldrb	r3, [r7, #14]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b084      	sub	sp, #16
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	4608      	mov	r0, r1
 800732c:	4611      	mov	r1, r2
 800732e:	461a      	mov	r2, r3
 8007330:	4603      	mov	r3, r0
 8007332:	70fb      	strb	r3, [r7, #3]
 8007334:	460b      	mov	r3, r1
 8007336:	70bb      	strb	r3, [r7, #2]
 8007338:	4613      	mov	r3, r2
 800733a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007340:	2300      	movs	r3, #0
 8007342:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800734a:	78bb      	ldrb	r3, [r7, #2]
 800734c:	883a      	ldrh	r2, [r7, #0]
 800734e:	78f9      	ldrb	r1, [r7, #3]
 8007350:	f7fa fc64 	bl	8001c1c <HAL_PCD_EP_Open>
 8007354:	4603      	mov	r3, r0
 8007356:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007358:	7bfb      	ldrb	r3, [r7, #15]
 800735a:	4618      	mov	r0, r3
 800735c:	f000 f958 	bl	8007610 <USBD_Get_USB_Status>
 8007360:	4603      	mov	r3, r0
 8007362:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007364:	7bbb      	ldrb	r3, [r7, #14]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	460b      	mov	r3, r1
 8007378:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800737a:	2300      	movs	r3, #0
 800737c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007388:	78fa      	ldrb	r2, [r7, #3]
 800738a:	4611      	mov	r1, r2
 800738c:	4618      	mov	r0, r3
 800738e:	f7fa fcad 	bl	8001cec <HAL_PCD_EP_Close>
 8007392:	4603      	mov	r3, r0
 8007394:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007396:	7bfb      	ldrb	r3, [r7, #15]
 8007398:	4618      	mov	r0, r3
 800739a:	f000 f939 	bl	8007610 <USBD_Get_USB_Status>
 800739e:	4603      	mov	r3, r0
 80073a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073b8:	2300      	movs	r3, #0
 80073ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073bc:	2300      	movs	r3, #0
 80073be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80073c6:	78fa      	ldrb	r2, [r7, #3]
 80073c8:	4611      	mov	r1, r2
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7fa fd4d 	bl	8001e6a <HAL_PCD_EP_SetStall>
 80073d0:	4603      	mov	r3, r0
 80073d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 f91a 	bl	8007610 <USBD_Get_USB_Status>
 80073dc:	4603      	mov	r3, r0
 80073de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b084      	sub	sp, #16
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
 80073f2:	460b      	mov	r3, r1
 80073f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007404:	78fa      	ldrb	r2, [r7, #3]
 8007406:	4611      	mov	r1, r2
 8007408:	4618      	mov	r0, r3
 800740a:	f7fa fd91 	bl	8001f30 <HAL_PCD_EP_ClrStall>
 800740e:	4603      	mov	r3, r0
 8007410:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007412:	7bfb      	ldrb	r3, [r7, #15]
 8007414:	4618      	mov	r0, r3
 8007416:	f000 f8fb 	bl	8007610 <USBD_Get_USB_Status>
 800741a:	4603      	mov	r3, r0
 800741c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800741e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	460b      	mov	r3, r1
 8007432:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800743a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800743c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007440:	2b00      	cmp	r3, #0
 8007442:	da0b      	bge.n	800745c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007444:	78fb      	ldrb	r3, [r7, #3]
 8007446:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800744a:	68f9      	ldr	r1, [r7, #12]
 800744c:	4613      	mov	r3, r2
 800744e:	00db      	lsls	r3, r3, #3
 8007450:	4413      	add	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	440b      	add	r3, r1
 8007456:	3316      	adds	r3, #22
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	e00b      	b.n	8007474 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800745c:	78fb      	ldrb	r3, [r7, #3]
 800745e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007462:	68f9      	ldr	r1, [r7, #12]
 8007464:	4613      	mov	r3, r2
 8007466:	00db      	lsls	r3, r3, #3
 8007468:	4413      	add	r3, r2
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	440b      	add	r3, r1
 800746e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007472:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007474:	4618      	mov	r0, r3
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	460b      	mov	r3, r1
 800748a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800748c:	2300      	movs	r3, #0
 800748e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800749a:	78fa      	ldrb	r2, [r7, #3]
 800749c:	4611      	mov	r1, r2
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fa fb98 	bl	8001bd4 <HAL_PCD_SetAddress>
 80074a4:	4603      	mov	r3, r0
 80074a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 f8b0 	bl	8007610 <USBD_Get_USB_Status>
 80074b0:	4603      	mov	r3, r0
 80074b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b086      	sub	sp, #24
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	60f8      	str	r0, [r7, #12]
 80074c6:	607a      	str	r2, [r7, #4]
 80074c8:	603b      	str	r3, [r7, #0]
 80074ca:	460b      	mov	r3, r1
 80074cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80074dc:	7af9      	ldrb	r1, [r7, #11]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	f7fa fc88 	bl	8001df6 <HAL_PCD_EP_Transmit>
 80074e6:	4603      	mov	r3, r0
 80074e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074ea:	7dfb      	ldrb	r3, [r7, #23]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f000 f88f 	bl	8007610 <USBD_Get_USB_Status>
 80074f2:	4603      	mov	r3, r0
 80074f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80074f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3718      	adds	r7, #24
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	607a      	str	r2, [r7, #4]
 800750a:	603b      	str	r3, [r7, #0]
 800750c:	460b      	mov	r3, r1
 800750e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800751e:	7af9      	ldrb	r1, [r7, #11]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	f7fa fc2c 	bl	8001d80 <HAL_PCD_EP_Receive>
 8007528:	4603      	mov	r3, r0
 800752a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800752c:	7dfb      	ldrb	r3, [r7, #23]
 800752e:	4618      	mov	r0, r3
 8007530:	f000 f86e 	bl	8007610 <USBD_Get_USB_Status>
 8007534:	4603      	mov	r3, r0
 8007536:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007538:	7dbb      	ldrb	r3, [r7, #22]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
	...

08007544 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	460b      	mov	r3, r1
 800754e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007550:	78fb      	ldrb	r3, [r7, #3]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d002      	beq.n	800755c <HAL_PCDEx_LPM_Callback+0x18>
 8007556:	2b01      	cmp	r3, #1
 8007558:	d01f      	beq.n	800759a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800755a:	e03b      	b.n	80075d4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	7adb      	ldrb	r3, [r3, #11]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d007      	beq.n	8007574 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8007564:	f7f9 f832 	bl	80005cc <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007568:	4b1c      	ldr	r3, [pc, #112]	@ (80075dc <HAL_PCDEx_LPM_Callback+0x98>)
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	4a1b      	ldr	r2, [pc, #108]	@ (80075dc <HAL_PCDEx_LPM_Callback+0x98>)
 800756e:	f023 0306 	bic.w	r3, r3, #6
 8007572:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	6812      	ldr	r2, [r2, #0]
 8007582:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007586:	f023 0301 	bic.w	r3, r3, #1
 800758a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007592:	4618      	mov	r0, r3
 8007594:	f7fe fa85 	bl	8005aa2 <USBD_LL_Resume>
    break;
 8007598:	e01c      	b.n	80075d4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	6812      	ldr	r2, [r2, #0]
 80075a8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80075ac:	f043 0301 	orr.w	r3, r3, #1
 80075b0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7fe fa56 	bl	8005a6a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	7adb      	ldrb	r3, [r3, #11]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d005      	beq.n	80075d2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075c6:	4b05      	ldr	r3, [pc, #20]	@ (80075dc <HAL_PCDEx_LPM_Callback+0x98>)
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	4a04      	ldr	r2, [pc, #16]	@ (80075dc <HAL_PCDEx_LPM_Callback+0x98>)
 80075cc:	f043 0306 	orr.w	r3, r3, #6
 80075d0:	6113      	str	r3, [r2, #16]
    break;
 80075d2:	bf00      	nop
}
 80075d4:	bf00      	nop
 80075d6:	3708      	adds	r7, #8
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	e000ed00 	.word	0xe000ed00

080075e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 80075e8:	4b03      	ldr	r3, [pc, #12]	@ (80075f8 <USBD_static_malloc+0x18>)
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	20000dd0 	.word	0x20000dd0

080075fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]

}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	4603      	mov	r3, r0
 8007618:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800761a:	2300      	movs	r3, #0
 800761c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800761e:	79fb      	ldrb	r3, [r7, #7]
 8007620:	2b03      	cmp	r3, #3
 8007622:	d817      	bhi.n	8007654 <USBD_Get_USB_Status+0x44>
 8007624:	a201      	add	r2, pc, #4	@ (adr r2, 800762c <USBD_Get_USB_Status+0x1c>)
 8007626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762a:	bf00      	nop
 800762c:	0800763d 	.word	0x0800763d
 8007630:	08007643 	.word	0x08007643
 8007634:	08007649 	.word	0x08007649
 8007638:	0800764f 	.word	0x0800764f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800763c:	2300      	movs	r3, #0
 800763e:	73fb      	strb	r3, [r7, #15]
    break;
 8007640:	e00b      	b.n	800765a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007642:	2303      	movs	r3, #3
 8007644:	73fb      	strb	r3, [r7, #15]
    break;
 8007646:	e008      	b.n	800765a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007648:	2301      	movs	r3, #1
 800764a:	73fb      	strb	r3, [r7, #15]
    break;
 800764c:	e005      	b.n	800765a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800764e:	2303      	movs	r3, #3
 8007650:	73fb      	strb	r3, [r7, #15]
    break;
 8007652:	e002      	b.n	800765a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007654:	2303      	movs	r3, #3
 8007656:	73fb      	strb	r3, [r7, #15]
    break;
 8007658:	bf00      	nop
  }
  return usb_status;
 800765a:	7bfb      	ldrb	r3, [r7, #15]
}
 800765c:	4618      	mov	r0, r3
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <memset>:
 8007668:	4402      	add	r2, r0
 800766a:	4603      	mov	r3, r0
 800766c:	4293      	cmp	r3, r2
 800766e:	d100      	bne.n	8007672 <memset+0xa>
 8007670:	4770      	bx	lr
 8007672:	f803 1b01 	strb.w	r1, [r3], #1
 8007676:	e7f9      	b.n	800766c <memset+0x4>

08007678 <__libc_init_array>:
 8007678:	b570      	push	{r4, r5, r6, lr}
 800767a:	4d0d      	ldr	r5, [pc, #52]	@ (80076b0 <__libc_init_array+0x38>)
 800767c:	4c0d      	ldr	r4, [pc, #52]	@ (80076b4 <__libc_init_array+0x3c>)
 800767e:	1b64      	subs	r4, r4, r5
 8007680:	10a4      	asrs	r4, r4, #2
 8007682:	2600      	movs	r6, #0
 8007684:	42a6      	cmp	r6, r4
 8007686:	d109      	bne.n	800769c <__libc_init_array+0x24>
 8007688:	4d0b      	ldr	r5, [pc, #44]	@ (80076b8 <__libc_init_array+0x40>)
 800768a:	4c0c      	ldr	r4, [pc, #48]	@ (80076bc <__libc_init_array+0x44>)
 800768c:	f000 f818 	bl	80076c0 <_init>
 8007690:	1b64      	subs	r4, r4, r5
 8007692:	10a4      	asrs	r4, r4, #2
 8007694:	2600      	movs	r6, #0
 8007696:	42a6      	cmp	r6, r4
 8007698:	d105      	bne.n	80076a6 <__libc_init_array+0x2e>
 800769a:	bd70      	pop	{r4, r5, r6, pc}
 800769c:	f855 3b04 	ldr.w	r3, [r5], #4
 80076a0:	4798      	blx	r3
 80076a2:	3601      	adds	r6, #1
 80076a4:	e7ee      	b.n	8007684 <__libc_init_array+0xc>
 80076a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80076aa:	4798      	blx	r3
 80076ac:	3601      	adds	r6, #1
 80076ae:	e7f2      	b.n	8007696 <__libc_init_array+0x1e>
 80076b0:	08007750 	.word	0x08007750
 80076b4:	08007750 	.word	0x08007750
 80076b8:	08007750 	.word	0x08007750
 80076bc:	08007754 	.word	0x08007754

080076c0 <_init>:
 80076c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c2:	bf00      	nop
 80076c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076c6:	bc08      	pop	{r3}
 80076c8:	469e      	mov	lr, r3
 80076ca:	4770      	bx	lr

080076cc <_fini>:
 80076cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ce:	bf00      	nop
 80076d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076d2:	bc08      	pop	{r3}
 80076d4:	469e      	mov	lr, r3
 80076d6:	4770      	bx	lr
